{"version":3,"file":"nestled.umd.min.js","sources":["../src/Power.js","../src/Cartridges/Header.js","../src/Cartridges/Cartridge.js","../src/Cartridges/Mappers/index.js","../src/Cartridges/Mapper.js","../src/Cartridges/Mappers/NROM.js","../src/Cartridges/Mappers/MMC1.js","../src/Cartridges/FileFormats/INES.js","../src/Cartridges/FileFormats/UNIF.js","../src/Cartridges/Metadata.js","../src/CartConnector.js","../src/Controllers/Controller.js","../src/Controllers/Joypad.js","../src/Controllers/Devices/Keyboard.js","../src/CtrlConnector.js","../src/Video/Colors.js","../src/Video/VideoBuffer.js","../src/VideoOutput.js","../src/Audio/AudioRingBuffer.js","../src/AudioOutput.js","../src/CPU.js","../src/Audio/Units/LengthCounter.js","../src/Audio/Units/TimerUnit.js","../src/Audio/Units/EnvelopeGenerator.js","../src/Audio/Units/LinearCounter.js","../src/Audio/Units/SweepUnit.js","../src/Audio/PulseChannel.js","../src/Audio/TriangleChannel.js","../src/Audio/NoiseChannel.js","../src/Audio/DMC.js","../src/APU.js","../src/PPU.js","../src/Engine.js","../src/NES.js","../src/index.js"],"sourcesContent":["export class Powered {\n    constructor() {\n        this.isPowered = false;\n    }\n    \n    //== Power ==============================================================================//\n    powerOn()  { return this.isPowered = true; }\n    powerOff() { return this.isPowered = false; }\n    \n    reset() { return; }\n}\n\nexport class Power extends Powered {\n    constructor() {\n        super();\n        \n        /** The 2 buttons, *Power* and *Reset*, on the front. */\n        this.buttons = new Buttons(this);\n        \n        /** @type {Powered[]?} @private */\n        this.subDevices = null;\n    }\n    \n    //== Power ==============================================================================//\n    powerOn() {\n        this.isPowered = true;\n        this.getSubDevices().forEach((device) => {\n            if (!device.isPowered) device.powerOn();\n        });\n        return this.isPowered;\n    }\n    powerOff() {\n        this.isPowered = false;\n        this.getSubDevices().forEach((device) => {\n            if (device.isPowered) device.powerOff();\n        });\n        return this.isPowered;\n    }\n    \n    reset() {\n        this.getSubDevices().forEach((device) => {\n            device.reset();\n        });\n    }\n    \n    //=======================================================================================//\n    /**\n     * @returns {Powered[]}\n     * @private\n     */\n    getSubDevices() {\n        if (!this.subDevices) {\n            /** @type {(keyof this)[]} */ // @ts-ignore\n            const propertyNames = Object.getOwnPropertyNames(this);\n            this.subDevices = propertyNames.filter(\n                (name) => (\n                    name !== 'bus' &&\n                    typeof this[name] === 'object' &&\n                    this[name] instanceof Powered\n                )\n            ).map(\n                /** @returns {Powered} */ // @ts-ignore\n                (name) => this[name]\n            );\n        }\n        return this.subDevices;\n    }\n}\n\nclass Buttons {\n    /** @param {Powered} device */\n    constructor(device) {\n        /** Press the *Power* button, which toggles the device *On* or *Off*. */\n        this.pressPower = () => {\n            if (!device.isPowered)\n                return device.powerOn();\n            else\n                return device.powerOff();\n        };\n        /** Press the *Reset* button, which resets the device to its initial state. */\n        this.pressReset = () => {\n            device.reset();\n        };\n    }\n}\n\nexport default Power;\n","export class Header {\n    /**\n     * @param {ArrayBuffer?} data\n     */\n    constructor(data = null) {\n        this.loaded = false;\n        \n        this.format = \"Unknown\";\n        this.valid = false;\n        \n        this.mapperNumber = -1;\n        this.mapperName = \"\";\n        this.supported = false;\n        \n        this.PRGROMByteLength = 0;\n        this.CHRROMByteLength = 0;\n        \n        this.horiMirroring = false;\n        this.vertMirroring = false;\n        this.battery = false;\n        this.trainer = false;\n        \n        this.consoleType = 0;\n        \n        this.PRGRAMByteLength = 0;\n        this.CHRRAMByteLength = 0;\n        this.PRGNVRAMByteLength = 0;\n        this.CHRNVRAMByteLength = 0;\n        \n        if (data) this.parse(data);\n    }\n    \n    /** @readonly */\n    get byteLength() {\n        return 0x00;\n    }\n    \n    /**\n     * @param {ArrayBuffer} data\n     */\n    parse(data) {\n        return this.loaded = !!data.byteLength && (data.byteLength >= this.byteLength);\n    }\n}\n\nexport default Header;\n","/** @typedef {import('./Header.js').Header} Header */\n\nexport const PRGROMBANKSIZE = 0x4000;\nexport const CHRROMBANKSIZE = 0x1000;\n\nexport class Cartridge {\n    constructor() {\n        this.PRGRAM = new Uint8Array(PRGROMBANKSIZE);\n        this.CHRRAM = new Uint8Array(CHRROMBANKSIZE);\n        \n        /** @type {Uint8Array[]} */\n        this.PRGROM = [];\n        /** @protected */\n        this.firstPRGBank = this.PRGRAM;\n        /** @protected */\n        this.lastPRGBank  = this.PRGRAM;\n        this.PRGBank = [this.firstPRGBank, this.lastPRGBank];\n        \n        /** @type {Uint8Array[]} */\n        this.CHRROM = [];\n        /** @protected */\n        this.firstCHRBank  = this.CHRRAM;\n        /** @protected */\n        this.secondCHRBank = this.CHRRAM;\n        this.CHRBank = [this.firstCHRBank, this.secondCHRBank];\n        \n        this.horiMirroring = false;\n        this.vertMirroring = false;\n    }\n    \n    //===================================================================================//\n    /**\n     * Loads cartridge data from a file, and sets circuitry (mirroring) from header data.\n     * @param {Header} header Already parsed header informations\n     * @param {ArrayBuffer} data The whole file, including the header data\n     */\n    load(header, data) {\n        let offset = header.byteLength;\n        \n        this.horiMirroring = header.horiMirroring;\n        this.vertMirroring = header.vertMirroring;\n        \n        if (header.trainer) {\n            this.PRGRAM.set(new Uint8Array(data, offset, 0x200), 0x1000);\n            offset += 0x200;\n        }\n        \n        const numPRGBank = header.PRGROMByteLength / PRGROMBANKSIZE;\n        if (numPRGBank > 0) {\n            for (let bank = 0; bank < numPRGBank; bank++) {\n                this.PRGROM.push(new Uint8Array(data, offset, PRGROMBANKSIZE));\n                offset += PRGROMBANKSIZE;\n            }\n            this.firstPRGBank = this.PRGROM[0];\n            this.lastPRGBank  = this.PRGROM[this.PRGROM.length-1];\n        }\n        this.PRGBank = [this.firstPRGBank, this.lastPRGBank];\n        \n        const numCHRBank = header.CHRROMByteLength / CHRROMBANKSIZE;\n        if (numCHRBank > 0) {\n            for (let bank = 0; bank < numCHRBank; bank++) {\n                this.CHRROM.push(new Uint8Array(data, offset, CHRROMBANKSIZE));\n                offset += CHRROMBANKSIZE;\n            }\n            this.firstCHRBank  = this.CHRROM[0];\n            this.secondCHRBank = this.CHRROM[1];\n        }\n        this.CHRBank = [this.firstCHRBank, this.secondCHRBank];\n    }\n    \n    //== Memory access from CPU =========================================================//\n    /**\n     * @param {number} address 16-bit address\n     * @returns {number} 8-bit value\n     */\n    cpuRead(address) {\n        if (address >= 0xC000) {\n            return this.PRGBank[1][address - 0xC000];\n        } else if (address >= 0x8000) {\n            return this.PRGBank[0][address - 0x8000];\n        } else {\n            if (address >= 0x6000)   address -= 0x6000;\n            while (address > 0x1FFF) address -= 0x2000;\n            return this.PRGRAM[address];\n        }\n    }\n    /**\n     * @param {number} address 16-bit address\n     * @param {number} data 8-bit value\n     */\n    cpuWrite(address, data) {\n        if (address >= 0x6000)   address -= 0x6000;\n        while (address > 0x1FFF) address -= 0x2000;\n        this.PRGRAM[address] = data;\n    }\n    \n    //== Memory access from PPU =========================================================//\n    /**\n     * @param {number} address 16-bit address\n     * @returns {number} 8-bit value\n     */\n    ppuRead(address) {\n        if (address < 0x1000)\n            return this.CHRBank[0][address];\n        else if (address < 0x2000)\n            return this.CHRBank[1][address - 0x1000];\n        else {\n            address -= 0x2000;\n            while (address > 0x0FFF) address -= 0x1000;\n            return this.CHRBank[1][address];\n        }\n    }\n    /**\n     * @param {number} address 16-bit address\n     * @param {number} data 8-bit value\n     */\n    ppuWrite(address, data) {\n        while (address > 0x0FFF) address -= 0x1000;\n        this.CHRRAM[address] = data;\n    }\n    \n    //== CIRAM A10 (Pin22) ==============================================================//\n    /**\n     * This is the 1k bank selection input for PPU's internal RAM, derived from the\n     * address bus.\n     * \n     * This is used to control how the name tables are banked; in other words, this\n     * selects nametable mirroring.\n     * @param {number} address 16-bit address\n     * @returns {0|1}\n     */\n    ciramA10(address) { /* eslint-disable-line no-unused-vars */\n        //Not connected by default\n        return 0;\n    }\n    \n    //== CIRAM /CE (Pin57) ==============================================================//\n    /**\n     * This is the video memory selection input, derived from the address bus.\n     * \n     * When set, this tells the PPU to use its own internal 2kb of RAM instead of\n     * cartridge's CHR-ROM.\n     * @param {number} address 16-bit address\n     * @returns {boolean}\n     */\n    ciramEnabled(address) {\n        //Connected to PPU /A13 (0x2000) by default\n        if (address < 0x2000)\n            return false;\n        else if (address < 0x4000)\n            return true;\n        else\n            return (address & 0x2000) > 0;\n    }\n}\n\nexport default Cartridge;\n","export { NROM } from './NROM.js';\nexport { MMC1 } from './MMC1.js';\n\nexport default Object.freeze([\n    //0x00\n    \"NROM\",\"Nintendo MMC1\",\"UNROM\",\"CNROM\",\"Nintendo MMC3\",\"Nintendo MMC5\",\"FFE Rev. A\",\"ANROM\",\n    \"\",\"Nintendo MMC2\",\"Nintendo MMC4\",\"Color Dreams\",\"REX DBZ 5\",\"CPROM\",\"REX SL-1632\",\"100-in-1\",\n    //0x10\n    \"BANDAI 24C02\",\"FFE Rev. B\",\"JALECO SS880006\",\"Namcot 163\",\"\",\"Konami VRC4a/VRC4c\",\"Konami VRC2a\",\"Konami VRC2b/VRC4e\",\n    \"Konami VRC6a\",\"Konami VRC4b/VRC4d\",\"Konami VRC6b\",\"CC-21 MI HUN CHE\",\"\",\"\",\"\",\"\",\n    //0x20\n    \"IREM G-101\",\"TC0190FMC/TC0350FMR\",\"IREM I-IM/BNROM\",\"Wario Land 2\",\"TXC Policeman\",\"PAL-ZZ SMB/TETRIS/NWC\",\"Bit Corp.\",\"\",\n    \"SMB2j FDS\",\"CALTRON 6-in-1\",\"BIO MIRACLE FDS\",\"FDS SMB2j LF36\",\"MMC3 BMC PIRATE A\",\"MMC3 BMC PIRATE B\",\"RUMBLESTATION 15-in-1\",\"NES-QJ SSVB/NWC\",\n    //0x30\n    \"TAITO TCxxx\",\"MMC3 BMC PIRATE C\",\"SMB2j FDS Rev. A\",\"11-in-1 BALL SERIES\",\"MMC3 BMC PIRATE D\",\"SUPERVISION 16-in-1\",\"\",\"\",\n    \"\",\"SIMBPLE BMC PIRATE A\",\"SIMBPLE BMC PIRATE B\",\"\",\"SIMBPLE BMC PIRATE C\",\"20-in-1 KAISER Rev. A\",\"700-in-1\",\"\",\n    //0x40\n    \"TENGEN RAMBO1\",\"IREM-H3001\",\"MHROM\",\"SUNSOFT-FZII\",\"Sunsoft Mapper #4\",\"SUNSOFT-5/FME-7\",\"BA KAMEN DISCRETE\",\"CAMERICA BF9093\",\n    \"JALECO JF-17\",\"KONAMI VRC3\",\"TW MMC3+VRAM Rev. A\",\"KONAMI VRC1\",\"NAMCOT 108 Rev. A\",\"IREM LROG017\",\"Irem 74HC161/32\",\"AVE/C&E/TXC BOARD\",\n    //0x50\n    \"TAITO X1-005 Rev. A\",\"\",\"TAITO X1-017\",\"YOKO VRC Rev. B\",\"\",\"KONAMI VRC7\",\"JALECO JF-13\",\"74*139/74 DISCRETE\",\n    \"NAMCO 3433\",\"SUNSOFT-3\",\"HUMMER/JY BOARD\",\"EARLY HUMMER/JY BOARD\",\"JALECO JF-19\",\"SUNSOFT-3R\",\"HVC-UN1ROM\",\"NAMCOT 108 Rev. B\",\n    //0x60\n    \"BANDAI OEKAKIDS\",\"IREM TAM-S1\",\"\",\"VS Uni/Dual- system\",\"\",\"\",\"\",\"FDS DOKIDOKI FULL\",\n    \"\",\"NES-EVENT NWC1990\",\"SMB3 PIRATE A\",\"MAGIC CORP A\",\"FDS UNROM BOARD\",\"\",\"\",\"\",\n    //0x70\n    \"ASDER/NTDEC BOARD\",\"HACKER/SACHEN BOARD\",\"MMC3 SG PROT. A\",\"MMC3 PIRATE A\",\"MMC1/MMC3/VRC PIRATE\",\"FUTURE MEDIA BOARD\",\"TSKROM\",\"NES-TQROM\",\n    \"FDS TOBIDASE\",\"MMC3 PIRATE PROT. A\",\"\",\"MMC3 PIRATE H2288\",\"\",\"FDS LH32\",\"\",\"\",\n    //0x80\n    \"\",\"\",\"\",\"\",\"TXC/MGENIUS 22111\",\"SA72008\",\"MMC3 BMC PIRATE\",\"\",\n    \"TCU02\",\"S8259D\",\"S8259B\",\"S8259C\",\"JALECO JF-11/14\",\"S8259A\",\"UNLKS7032\",\"TCA01\",\n    //0x90\n    \"AGCI 50282\",\"SA72007\",\"SA0161M\",\"TCU01\",\"SA0037\",\"SA0036\",\"S74LS374N\",\"\",\n    \"\",\"BANDAI SRAM\",\"\",\"\",\"\",\"BANDAI BARCODE\",\"\",\"BANDAI 24C01\",\n    //0xA0\n    \"SA009\",\"\",\"\",\"\",\"\",\"\",\"SUBOR Rev. A\",\"SUBOR Rev. B\",\n    \"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n    //0xB0\n    \"BMCFK23C\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n    \"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n    //0xC0\n    \"TW MMC3+VRAM Rev. B\",\"NTDEC TC-112\",\"TW MMC3+VRAM Rev. C\",\"TW MMC3+VRAM Rev. D\",\"\",\"\",\"TW MMC3+VRAM Rev. E\",\"\",\n    \"\",\"\",\"\",\"\",\"\",\"\",\"NAMCOT 108 Rev. C\",\"TAITO X1-005 Rev. B\",\n    //0xD0\n    \"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n    \"\",\"\",\"\",\"UNLA9746\",\"Debug Mapper\",\"UNLN625092\",\"\",\"\",\n    //0xE0\n    \"\",\"\",\"BMC 22+20-in-1\",\"\",\"\",\"\",\"BMC Contra+22-in-1\",\"\",\n    \"BMC QUATTRO\",\"BMC 22+20-in-1 RST\",\"BMC MAXI\",\"\",\"\",\"\",\"UNL6035052\",\"\",\n    //0xF0\n    \"\",\"\",\"\",\"S74LS374NA\",\"DECATHLON\",\"\",\"FONG SHEN BANG\",\"\",\n    \"\",\"\",\"\",\"\",\"SAN GUO ZHI PIRATE\",\"DRAGON BALL PIRATE\",\"\",\"\",\n]);\n","import Cartridge from './Cartridge.js';\nimport mapperNames, {\n    NROM,\n    MMC1,\n} from './Mappers/index.js';\n\nconst constructors = Object.freeze([\n    NROM,\n    MMC1,\n]);\n\nexport const Mapper = {\n    /**\n     * Create a new cartridge instance implementing the given mapper number's circuitry.\n     * @param {number} number iNES 1.0 mapper number (0-255)\n     * @returns {Cartridge}\n     */\n    create(number) {\n        return new (constructors[number] || Cartridge);\n    },\n    \n    /**\n     * If the given mapper number is supported by the Nestled emulator.\n     * @param {number} number iNES 1.0 mapper number (0-255)\n     * @returns {boolean}\n     */\n    supported(number) {\n        return typeof constructors[number] !== 'undefined';\n    },\n    \n    /**\n     * The name corresponding to the given mapper number.\n     * @param {number} number iNES 1.0 mapper number (0-255)\n     * @returns {string}\n     */\n    name(number) {\n        return mapperNames[number] || \"Unknown\";\n    },\n};\n\nexport default Mapper;\n","import Cartridge from '../Cartridge.js';\n\n/**\n * The generic designation *NROM* refers to the Nintendo cartridge boards *NES-NROM-128*\n * and *NES-NROM-256*.\n * (The suffixes 128/256 refer to kilobits by Nintendo's own designation; not kilobytes.)\n * \n * The iNES format assigns *Mapper 0* to NROM.\n */\nexport class NROM extends Cartridge {\n    //== CIRAM A10 (Pin22) ==============================================================//\n    /**\n     * @param {number} address 16-bit address\n     * @returns {0|1}\n     */\n    ciramA10(address) {\n        if (address < 0x400)\n            return 0;\n        else if (this.vertMirroring)\n            return (address & 0x400) ? 1 : 0;\n        else if (address < 0x800)\n            return 0;\n        else if (this.horiMirroring)\n            return (address & 0x800) ? 1 : 0;\n        else\n            return 0;\n    }\n}\nexport default NROM;\n","import Cartridge from '../Cartridge.js';\n\n/**\n * The *Nintendo MMC1* is a mapper ASIC used in Nintendo's SxROM boards.\n * \n * Most common SxROM boards are assigned to *iNES Mapper 1*.\n */\nexport class MMC1 extends Cartridge {\n    constructor() {\n        super();\n        \n        this.mirroring   = 0;\n        this.PRGBankMode = 3;\n        this.CHRBankMode = 0;\n        \n        this.buffer = 0;\n        this.index = 0;\n    }\n    \n    //== Internal registers =============================================================//\n    /** @protected @param {number} value */\n    set control(value) {\n        this.mirroring   = (value & 0x03);\n        this.PRGBankMode = (value & 0x0C) >> 2;\n        this.CHRBankMode = (value & 0x10) >> 4;\n    }\n    \n    /** @protected @param {number} value */\n    set CHR0(value) {\n        if (this.CHRBankMode === 1) {\n            this.CHRBank[0] = this.CHRROM[value];\n        } else {\n            const bank = value & ~1;\n            this.CHRBank[0] = this.CHRROM[bank+0];\n            this.CHRBank[1] = this.CHRROM[bank+1];\n        }\n    }\n    /** @protected @param {number} value */\n    set CHR1(value) {\n        if (this.CHRBankMode === 1) {\n            this.CHRBank[1] = this.CHRROM[value];\n        }\n    }\n    \n    /** @protected @param {number} value */\n    set PRG(value) {\n        if (this.PRGBankMode === 3) {\n            while (value >= 0x10) value -= 0x10;\n            this.PRGBank[0] = this.PRGROM[value];\n            this.PRGBank[1] = this.lastPRGBank;\n        } else if (this.PRGBankMode === 2) {\n            while (value >= 0x10) value -= 0x10;\n            this.PRGBank[0] = this.firstPRGBank;\n            this.PRGBank[1] = this.PRGROM[value];\n        } else {\n            const bank = value & 0x0E;\n            this.PRGBank[0] = this.PRGROM[bank+0];\n            this.PRGBank[1] = this.PRGROM[bank+1];\n        }\n    }\n    \n    /**\n     * @param {number} address 16-bit address\n     * @param {number} data 8-bit value\n     * @protected\n     */\n    write(address, data) {\n        switch (address - 0x8000) {\n        case 0x0000: this.control = data; break;\n        case 0x2000: this.CHR0    = data; break;\n        case 0x4000: this.CHR1    = data; break;\n        case 0x6000: this.PRG     = data; break;\n        default: this.write(address & 0xE000, data);\n        }\n    }\n    \n    //== Memory access from CPU =========================================================//\n    /**\n     * @param {number} address 16-bit address\n     * @param {number} data 8-bit value\n     */\n    cpuWrite(address, data) {\n        if (address >= 0x8000) {\n            if (data >= 0x80) {\n                this.buffer = 0;\n                this.index = 0;\n                this.mirroring = 0;\n                this.CHRBankMode = 0;\n            } else {\n                this.buffer += ((data & 0x1) << this.index);\n                if (++this.index === 5) {\n                    this.write(address, this.buffer);\n                    this.buffer = 0;\n                    this.index = 0;\n                }\n            }\n        } else {\n            super.cpuWrite(address, data);\n        }\n    }\n    \n    //== CIRAM A10 (Pin22) ==============================================================//\n    /**\n     * @param {number} address 16-bit address\n     * @returns {0|1}\n     */\n    ciramA10(address) {\n        if (this.mirroring === 3) {\n            if (address < 0x800)\n                return 0;\n            else\n                return (address & 0x800) ? 1 : 0;\n        } else if (this.mirroring === 2) {\n            if (address < 0x400)\n                return 0;\n            else\n                return (address & 0x400) ? 1 : 0;\n        } else\n            return this.mirroring ? 1 : 0;\n    }\n}\nexport default MMC1;\n","import Header from '../Header.js';\nimport Mapper from '../Mapper.js';\n\nconst PRGROMBANKSIZE = 0x4000;\nconst CHRROMBANKSIZE = 0x2000;\nconst PRGRAMBANKSIZE = 0x2000;\n\nconst LENGTH = 0x10;\n\nexport class INESHeader extends Header {\n    /** @readonly */\n    get byteLength() {\n        return LENGTH;\n    }\n    \n    /**\n     * @param {ArrayBuffer} data\n     */\n    parse(data) {\n        if (super.parse(data)) {\n            const header = new DataView(data, 0, LENGTH);\n            if (header.getUint32(0) === 0x4E45531A) {\n                this.valid = true;\n                \n                this.format = \"Archaic iNES\";\n                \n                const byte4 = header.getUint8(4);\n                const byte5 = header.getUint8(5);\n                \n                this.PRGROMByteLength = getROMByteLength(PRGROMBANKSIZE, byte4);\n                this.CHRROMByteLength = getROMByteLength(CHRROMBANKSIZE, byte5);\n                \n                const byte6 = header.getUint8(6);\n                \n                this.mapperNumber = byte6 >> 4;\n                \n                if (byte6 & 0x8) {\n                    this.horiMirroring = false;\n                    this.vertMirroring = false;\n                } else if (byte6 & 0x1) {\n                    this.horiMirroring = false;\n                    this.vertMirroring = true;\n                } else {\n                    this.horiMirroring = true;\n                    this.vertMirroring = false;\n                }\n                \n                this.battery = !!(byte6 & 0x2);\n                this.trainer = !!(byte6 & 0x4);\n                \n                const byte7 = header.getUint8(7);\n                \n                if (!(byte7 & 0x04)) {\n                    this.mapperNumber += byte7 & 0xF0;\n                    this.consoleType = byte7 & 0x03;\n                    \n                    if (byte7 & 0x08) {\n                        const byte9 = header.getUint8(9);\n                        \n                        const PRGSize = getROMByteLength(PRGROMBANKSIZE, byte4, byte9 & 0x0F);\n                        const CHRSize = getROMByteLength(CHRROMBANKSIZE, byte5, byte9 >> 4);\n                        if (PRGSize + CHRSize <= data.byteLength) {\n                            this.format = \"NES 2.0\";\n                            this.parseV2(header);\n                        }\n                    } else {\n                        if (header.getUint32(12) === 0) {\n                            this.format = \"iNES\";\n                            this.parseV1(header);\n                        }\n                    }\n                }\n                \n                this.mapperName = Mapper.name(this.mapperNumber);\n                this.supported  = Mapper.supported(this.mapperNumber);\n            }\n        }\n        return this.loaded;\n    }\n    \n    /**\n     * @param {DataView} data\n     * @private\n     */\n    parseV1(data) {\n        this.PRGRAMByteLength = (data.getUint8(8) || 1) * PRGRAMBANKSIZE;\n    }\n    \n    /**\n     * @param {DataView} data\n     * @private\n     */\n    parseV2(data) {\n        this.mapperNumber += (data.getUint8(8) & 0x0F)*256;\n        \n        const byte9 = data.getUint8(9);\n        this.PRGROMByteLength = getROMByteLength(PRGROMBANKSIZE, data.getUint8(4), byte9 & 0x0F);\n        this.CHRROMByteLength = getROMByteLength(CHRROMBANKSIZE, data.getUint8(5), byte9 >> 4);\n        \n        const byte10 = data.getUint8(10);\n        this.PRGRAMByteLength   = getRAMByteLength(byte10 & 0x0F);\n        this.PRGNVRAMByteLength = getRAMByteLength(byte10 >> 4);\n        \n        const byte11 = data.getUint8(11);\n        this.CHRRAMByteLength   = getRAMByteLength(byte11 & 0x0F);\n        this.CHRNVRAMByteLength = getRAMByteLength(byte11 >> 4);\n    }\n}\n\n/**\n * Automatically calculate PRG/CHR ROM byte length according to header format.\n * (Supports exponent-multiplier notation of *NES 2.0*)\n * @param {number} bankSize The size of each bank, will multiply the computed value to get the length in bytes\n * @param {number} lsb 8-bit value read from `byte 4` (PRG) or `byte 5` (CHR)\n * @param {number} msb 4-bit value read from `byte 9` if *NES 2.0* (must be `0` or omitted otherwise)\n * @returns {number} Computed length in bytes\n */\nfunction getROMByteLength(bankSize, lsb, msb = 0) {\n    if (msb < 0x0F) {\n        return (lsb + msb*256) * bankSize;\n    } else {\n        const multiplier = (lsb & 0x3)*2 + 1;\n        const exponent = lsb >> 2;\n        return 2^exponent * multiplier;\n    }\n}\n\n/**\n * Automatically calculate PRG/CHR [NV]RAM byte length from *NES 2.0* header values.\n * @param {number} shiftCount Will shift `64` by this number of bits\n * @returns {number} Computed length in bytes\n */\nfunction getRAMByteLength(shiftCount) {\n    return shiftCount ? 0x40 << shiftCount : 0;\n}\n\nexport default INESHeader;\n","import Header from '../Header.js';\n\nconst LENGTH = 0x20;\n\nexport class UNIFHeader extends Header {\n    /** @readonly */\n    get byteLength() {\n        return LENGTH;\n    }\n    \n    /**\n     * @param {ArrayBuffer} data\n     */\n    parse(data) {\n        if (super.parse(data)) {\n            const header = new DataView(data, 0, LENGTH);\n            if (header.getUint32(0) === 0x554E4946) {\n                this.format = \"UNIF v\" + header.getUint32(4, true);\n            }\n        }\n        return this.loaded;\n    }\n}\n\nexport default UNIFHeader;\n","/** @typedef {import('./Header.js').Header} Header */\n\nconst CONSOLE_TYPE = Object.freeze([\n    \"NES/Famicom\",\n    \"Nintendo Vs. System\",\n    \"Nintendo Playchoice 10\",\n    \"Extended Console Type\",\n]);\nconst TV_SYSTEM = Object.freeze({\n    NTSC: \"NTSC\",\n    PAL: \"PAL\",\n    SECAM: \"SECAM\",\n});\n\nexport class Metadata {\n    constructor() {\n        this.name = \"No Cartridge\";\n        this.format = \"\";\n        \n        /** @type {string} */\n        this.consoleType = CONSOLE_TYPE[0];\n        /** @type {string} */\n        this.tvSystem = TV_SYSTEM.NTSC;\n        \n        this.mapper = \"\";\n        this.PRGROM = \"\";\n        this.CHRROM = \"\";\n        this.scrolling = \"\";\n        this.SRAM = \"\";\n        this.PRGRAM = \"\";\n        this.CHRRAM = \"\";\n        this.misc = \"\";\n        \n        /** @type {string[]} */\n        this.warnings = [];\n        /** @type {string[]} */\n        this.errors = [];\n    }\n    \n    //=======================================================================================//\n    \n    /** @readonly */\n    get supported() {\n        return this.warnings.length === 0;\n    }\n    /** @readonly */\n    get valid() {\n        return this.errors.length === 0;\n    }\n    \n    /**\n     * Pushes a new message to the *warnings* list.\n     * \n     * This automatically tags the game as __*unsupported*__.\n     * @param {string} message\n     */\n    warn(message) {\n        this.warnings.push(message);\n    }\n    /**\n     * Pushes a new message to the *errors* list.\n     * \n     * This automatically tags the game as __*invalid*__.\n     * @param {string} message\n     */\n    error(message) {\n        this.errors.push(message);\n    }\n    \n    //=======================================================================================//\n    \n    /**\n     * Extracts the name, and potentially *tvSystem* infos, from the filename.\n     * @param {string} filename\n     */\n    parseFilename(filename) {\n        const countryCodes = /\\((U|E|Unk|Unl|1|4|A|J|B|K|C|NL|PD|F|S|FC|SW|FN|G|UK|GR|HK|I|H)+\\)/.exec(filename);\n        if (countryCodes) {\n            if (countryCodes[0].search(/U[^Kn]|1|4|J|[^U]K|PD|FC|HK/) > 0)\n                this.tvSystem = TV_SYSTEM.NTSC;\n            else if (countryCodes[0].search(/E|A|B|[^F]C|NL|S|SW|FN|G|UK|GR|I|H/) > 0)\n                this.tvSystem = TV_SYSTEM.PAL;\n            else if (countryCodes[0].search(/F[^C]/) > 0)\n                this.tvSystem = TV_SYSTEM.SECAM; //wtf la France ?\n            \n            if (this.tvSystem !== TV_SYSTEM.NTSC)\n                this.warn(`Unsupported TV system (${this.tvSystem})`);\n        }\n        \n        this.name = filename.replace(\n            /\\.[A-Za-z0-9_]+$/, \"\"\n        ).replace(\n            /\\s?\\((U|E|Unk|Unl|1|4|A|J|B|K|C|NL|PD|F|S|FC|SW|FN|G|UK|GR|HK|I|H)+\\)/g, \"\"\n        ).replace(\n            /\\s?\\[(!|a|p|b|t|f|T[+-]|h|o)+\\]/g, \"\"\n        ).replace(\n            /_+/g, \" \"\n        ).trim();\n        \n        if (this.name)\n            this.name = this.name[0].toUpperCase() + this.name.slice(1);\n    }\n    \n    /**\n     * Extracts all the informations from a parsed file header.\n     * @param {Header} header\n     */\n    load(header) {\n        this.format = header.format;\n        \n        this.mapper = `Mapper #${header.mapperNumber}: ${header.mapperName}`;\n        if (!header.supported)\n            this.warn(`Unsupported mapper (#${header.mapperNumber}:${header.mapperName})`);\n        \n        this.PRGROM = `${header.PRGROMByteLength / 1024}kb of PRG-ROM`;\n        this.CHRROM = `${header.CHRROMByteLength / 1024}kb of CHR-ROM`;\n        \n        if (header.horiMirroring && header.vertMirroring) {\n            this.scrolling = \"Scrolling disabled (or Mapper controlled)\";\n        } else if (header.vertMirroring) {\n            this.scrolling = \"Horizontal scrolling\";\n        } else if (header.horiMirroring) {\n            this.scrolling = \"Vertical scrolling (or Mapper controlled)\";\n        } else {\n            this.scrolling = \"4-screens scrolling\";\n        }\n        \n        if (header.battery) this.SRAM = \"Battery-backed SRAM\";\n        if (header.trainer) this.misc = \"512b trainer data present\";\n        \n        if (header.PRGRAMByteLength && header.PRGNVRAMByteLength)\n            this.PRGRAM = `${(header.PRGRAMByteLength+header.PRGNVRAMByteLength) / 1024}kb of combined PRG-RAM/NVRAM`;\n        else if (header.PRGNVRAMByteLength)\n            this.PRGRAM = `${header.PRGNVRAMByteLength / 1024}kb of PRG-NVRAM`;\n        else if (header.PRGRAMByteLength)\n            this.PRGRAM = `${header.PRGRAMByteLength / 1024}kb of PRG-RAM`;\n        \n        if (header.CHRRAMByteLength && header.CHRNVRAMByteLength)\n            this.CHRRAM = `${(header.CHRRAMByteLength+header.CHRNVRAMByteLength) / 1024}kb of combined CHR-RAM/NVRAM`;\n        else if (header.CHRNVRAMByteLength)\n            this.CHRRAM = `${header.CHRNVRAMByteLength / 1024}kb of CHR-NVRAM`;\n        else if (header.CHRRAMByteLength)\n            this.CHRRAM = `${header.CHRRAMByteLength / 1024}kb of CHR-RAM`;\n        \n        this.consoleType = CONSOLE_TYPE[header.consoleType];\n        if (header.consoleType > 0)\n            this.warn(`Unsupported console type (${this.consoleType})`);\n    }\n    \n    //=======================================================================================//\n    \n    /**\n     * Creates a simple object containing only the relevant file informations.\n     */\n    serialize() {\n        return {\n            name: this.name,\n            format: this.format,\n            consoleType: this.consoleType,\n            tvSystem: this.tvSystem,\n            \n            mapper: this.mapper,\n            PRGROM: this.PRGROM,\n            CHRROM: this.CHRROM,\n            scrolling: this.scrolling,\n            SRAM: this.SRAM,\n            PRGRAM: this.PRGRAM,\n            CHRRAM: this.CHRRAM,\n            misc: this.misc,\n        };\n    }\n}\n\nexport default Metadata;\n","import { Cartridge, Header, Mapper, Metadata } from './Cartridges/index.js';\nimport {\n    INESHeader,\n    UNIFHeader,\n} from './Cartridges/FileFormats/index.js';\n\nexport class CartConnector {\n    constructor() {\n        /** Raw informations parsed from the file. */\n        this.file = new Header;\n        /** Interpreted informations about the file, in human-readable format. */\n        this.metadata = new Metadata;\n        /**\n         * The cartridge itself, as seen by the NES hardware, including I/O functions,\n         * memory mapping and nametable mirroring logic.\n         */\n        this.cartridge = new Cartridge;\n    }\n    \n    /** @private */\n    reset() {\n        this.file = new Header;\n        this.metadata = new Metadata;\n        this.cartridge = new Cartridge;\n    }\n    \n    //=======================================================================================//\n    \n    /** @readonly */\n    get name() { return this.metadata.name;}\n    \n    /** @readonly */\n    get supported() { return this.metadata.supported; }\n    /** @readonly */\n    get valid() { return this.metadata.valid; }\n    \n    //=======================================================================================//\n    \n    /**\n     * Loads a file, parses its filename and header for `metadata`, and fills `cartridge`\n     * with its content.\n     * @param {File} file\n     */\n    load(file) {\n        this.reset();\n        \n        return new Promise(\n            /**\n             * @param {(value: ArrayBuffer) => void} resolve\n             * @param {(reason: Error) => void} reject\n             */\n            (resolve, reject) => {\n                if (file) {\n                    this.metadata.parseFilename(file.name);\n                    \n                    if (file.size) {\n                        const reader = new FileReader;\n                        reader.onabort = () => reject(new DOMException);\n                        reader.onerror = () => reject(reader.error || new Error);\n                        reader.onload = () => {\n                            if (reader.result && typeof reader.result === 'object')\n                                resolve(reader.result);\n                            else\n                                reject(new Error);\n                        };\n                        \n                        reader.readAsArrayBuffer(file);\n                    } else {\n                        reject(new Error(\"File is empty\"));\n                    }\n                } else {\n                    reject(new DOMException);\n                }\n            }\n        ).then(\n            (data) => {\n                const signature = (new DataView(data)).getUint32(0);\n                \n                if (signature === 0x4E45531A) // \"NES[EOF]\"\n                    this.file = new INESHeader(data);\n                else if (signature === 0x554E4946) // \"UNIF\"\n                    this.file = new UNIFHeader(data);\n                else\n                    throw new Error(\"Invalid format\");\n                \n                if (!this.file.valid)\n                    throw new Error(`Unsupported format (${this.file.format})`);\n                \n                this.metadata.load(this.file);\n                \n                this.cartridge = Mapper.create(this.file.mapperNumber);\n                this.cartridge.load(this.file, data);\n                \n                return this;\n            }\n        ).catch(\n            /** @param {Error} error */\n            (error) => {\n                if (error instanceof DOMException)\n                    this.metadata.error(\"Loading aborted\");\n                else if (error.message)\n                    this.metadata.error(error.message);\n                else\n                    this.metadata.error(\"Loading failed\");\n                \n                this.cartridge = new Cartridge;\n                return this;\n            }\n        );\n    }\n    /**\n     * Unloads current file, also resetting `metadata` and `cartridge`.\n     */\n    unload() {\n        this.reset();\n        \n        return Promise.resolve(this);\n    }\n}\n\nexport default CartConnector;\n","/** @enum {string} types */\nexport const types = Object.freeze({\n    EMPTY:  \"Empty\",\n    JOYPAD: \"Joypad\",\n    ZAPPER: \"Zapper\",\n});\n/** @enum {string} devices */\nexport const devices = Object.freeze({\n    NONE:  \"None\",\n    KEYBOARD: \"Keyboard\",\n    MOUSE: \"Mouse\",\n});\n\nexport class Controller {\n    constructor() {\n        /** @protected */\n        this.strobing = false;\n    }\n    \n    /** @type {types} @readonly */\n    get type() { return types.EMPTY; }\n    /** @type {devices} @readonly */\n    get device() { return devices.NONE; }\n    \n    get empty()   { return this.type === types.EMPTY; }\n    get present() { return this.type !== types.EMPTY; }\n    \n    //== Input/Output =======================================================================//\n    /** @returns {number} 5-bit value */\n    read() {\n        if (this.strobing) this.strobe();\n        \n        return 0;\n    }\n    /** @param {0|1} data 1-bit value */\n    write(data) {\n        if (this.strobing) this.strobe();\n        \n        this.strobing = (data !== 0);\n    }\n    \n    /** @protected */\n    strobe() {\n        return;\n    }\n}\n\nexport default Controller;\n","/**\n * @typedef {(pressed:boolean) => void} ButtonHandler\n * @typedef {keyof BUTTONS} ButtonName\n */\n\nimport Controller, { types } from \"./Controller.js\";\n\nconst BUTTONS = Object.freeze({\n    a: 0, b: 1, select: 2, start: 3, up: 4, down: 5, left: 6, right: 7\n});\n\nexport class Joypad extends Controller {\n    constructor() {\n        super();\n        \n        /** @type {(0|1)[]} @private */\n        this.states = Object.seal(new Array(8).fill(0));\n        /** @type {(0|1)[]} @private */\n        this.data   = [];\n        \n        /** @type {ButtonHandler[]} */\n        this.buttonHandlers = this.states.map((v, i, a) => (\n            (pressed) => { a[i] = pressed ? 1 : 0; }\n        ));\n    }\n    \n    /** @type {types} @readonly */\n    get type() { return types.JOYPAD; }\n    \n    //== Input/Output =======================================================================//\n    /** @returns {0|1} 1-bit value */\n    read() {\n        super.read();\n        \n        const data = this.data.shift();\n        return (data !== undefined) ? data : 1;\n    }\n    \n    /** @protected */\n    strobe() {\n        this.data = [...this.states];\n    }\n    \n    //== Buttons ============================================================================//\n    /**\n     * Get the handler function for the given button name.\n     * @param {ButtonName} name\n     * @protected\n     */\n    getButtonHandler(name) {\n        const index = BUTTONS[name];\n        if (index != null)\n            return this.buttonHandlers[index];\n        else\n            throw new Error(`'${name}' is not a valid button name`);\n    }\n    \n    /**\n     * Manually press/release one Joypad button.\n     * @param {ButtonName} name\n     * @param {boolean} pressDown\n     */\n    pressButton(name, pressDown) {\n        this.getButtonHandler(name)(pressDown);\n    }\n}\n\nexport default Joypad;\n","/**\n * @typedef {import('../Joypad.js').ButtonName} ButtonName\n * @typedef {import('../Joypad.js').ButtonHandler} ButtonHandler\n * @typedef {keyof KEYS} KeyName\n */\n\nimport Joypad from '../Joypad.js';\nimport { devices } from \"../Controller.js\";\n\nconst KEYS = Object.freeze({\n    Backspace: 8, Tab: 9, Enter: 13, Shift: 16, Ctrl: 17, Alt: 18, Pause: 19,\n    Escape: 27, Space: 32, 'Page-up': 33, 'Page-down': 34, End: 35, Home: 36,\n    Left: 37, Up: 38, Right: 39, Down: 40, Insert: 45, Delete: 46,\n    '0': 48, '1': 49, '2': 50, '3': 51, '4': 52, '5': 53, '6': 54, '7': 55, '8': 56, '9': 57,\n    A: 65, B: 66, C: 67, D: 68, E: 69, F: 70, G: 71, H: 72, I: 73,\n    J: 74, K: 75, L: 76, M: 77, N: 78, O: 79, P: 80, Q: 81, R: 82,\n    S: 83, T: 84, U: 85, V: 86, W: 87, X: 88, Y: 89, Z: 90,\n    'Numpad-0': 96,  'Numpad-1': 97,  'Numpad-2': 98,  'Numpad-3': 99,  'Numpad-4': 100,\n    'Numpad-5': 101, 'Numpad-6': 102, 'Numpad-7': 103, 'Numpad-8': 104, 'Numpad-9': 105,\n    Multiply: 106, Add: 107, Subtract: 109, 'Decimal-point': 110, Divide: 111,\n    F1: 112, F2: 113, F3: 114, F4:  115,  F5: 116,  F6: 117,\n    F7: 118, F8: 119, F9: 120, F10: 121, F11: 122, F12: 123,\n    ';': 186,  '=': 187, ',': 188,  '-': 189, '.': 190, '/': 191, '`': 192,\n    '[': 219, '\\\\': 220, ']': 221, '\\'': 222,\n});\n\nexport class Keyboard extends Joypad {\n    /**\n     * @param {Record<ButtonName,KeyName>=} opts\n     */\n    constructor(opts) {\n        super();\n        \n        /** @type {Record<string,ButtonHandler>} @private */\n        this.keyHandlers = {};\n        \n        /** @type {Record<string,string>} @private */\n        this.assignedKeys = {};\n        \n        if (opts) this.assignKeys(opts);\n        \n        if (typeof window !== 'undefined') {\n            window.addEventListener('keydown', (e) => this.pressKey(e, true));\n            window.addEventListener('keyup',   (e) => this.pressKey(e, false));\n        }\n    }\n    \n    /** @type {devices} @readonly */\n    get device() { return devices.KEYBOARD; }\n    \n    //=======================================================================================//\n    /**\n     * Assign one or more keyboard keys to Joypad buttons.\n     * @param {Record<ButtonName,KeyName>} keys\n     */\n    assignKeys(keys) {\n        Object.entries(keys).forEach(\n            /** @param {[any, KeyName]} value */\n            ([button, key]) => this.assignKey(button, key)\n        );\n    }\n    \n    /**\n     * Assign a keyboard key to one of the Joypad button.\n     * @param {ButtonName} buttonName\n     * @param {KeyName} keyName\n     * @private\n     */\n    assignKey(buttonName, keyName) {\n        const handler = this.getButtonHandler(buttonName);\n        \n        Object.entries(this.keyHandlers).forEach(\n            ([keyCode, value]) => { if (value === handler) delete this.keyHandlers[keyCode]; }\n        );\n        \n        if (keyName in KEYS) {\n            this.assignedKeys[buttonName] = keyName;\n            this.keyHandlers[KEYS[keyName]] = handler;\n        }\n    }\n    \n    /**\n     * @param {KeyboardEvent} event\n     * @param {boolean} keyDown\n     * @private\n     */\n    pressKey(event, keyDown) {\n        const key = event.keyCode || event.which;\n        const handler = this.keyHandlers[key];\n        if (typeof handler === 'function') {\n            handler(keyDown);\n            event.preventDefault();\n        }\n    }\n    \n    //== Buttons ============================================================================//\n    /**\n     * Get the name of the assigned key for the given button name.\n     * @param {ButtonName} buttonName\n     */\n    getAssignedKey(buttonName) {\n        return this.assignedKeys[buttonName] || \"\";\n    }\n}\n\nexport default Keyboard;\n","/** @typedef {1|2} ControllerPort */\n\nimport { Controller } from \"./Controllers/index.js\";\n\nexport class CtrlConnector {\n    constructor() {\n        /** @private */\n        this.controllers = Object.seal({1: new Controller, 2: new Controller});\n    }\n    \n    get 1() { return this.controllers[1]; }\n    get 2() { return this.controllers[2]; }\n    \n    //=======================================================================================//\n    /**\n     * Insert a *Controller-derived* class into given port.\n     * @param {Controller} controller\n     * @param {ControllerPort} port\n     */\n    insert(controller, port = 1) {\n        this.controllers[port] = controller;\n    }\n    /**\n     * Remove the controller from the given port.\n     * @param {ControllerPort} port\n     */\n    remove(port) {\n        this.controllers[port] = new Controller;\n    }\n    \n    //=======================================================================================//\n    /**\n     * @param {number} address 16-bit address\n     * @returns {number} 5-bit value (*OR*ed with the higher 3-bits of address bus)\n     */\n    read(address) {\n        if (address === 0x4016)\n            return 0x40 + this.controllers[1].read();\n        else if (address === 0x4017)\n            return 0x40 + this.controllers[2].read();\n        else\n            return (address >>> 8) & 0xE0;\n    }\n    /**\n     * @param {number} address 16-bit value\n     * @param {number} data 3-bit value\n     */\n    write(address, data) {\n        if (data === 0x0 || data === 0x1) {\n            this.controllers[1].write(data);\n            this.controllers[2].write(data);\n            //this.expansion.write(data);\n        } else {\n            const bit0 = (data & 0x1) ? 1 : 0;\n            this.controllers[1].write(bit0);\n            this.controllers[2].write(bit0);\n            //this.expansion.write(data & 0x7);\n        }\n    }\n}\n\nexport default CtrlConnector;\n","export const pxlColors = new Uint32Array([\n    0xFF545454, 0xFF741E00, 0xFF901008, 0xFF880030, 0xFF640044, 0xFF30005C, 0xFF000454, 0xFF00183C,\n    0xFF002A20, 0xFF003A08, 0xFF004000, 0xFF003C00, 0xFF3C3200, 0xFF000000, 0xFF000000, 0xFF000000,\n    0xFF989698, 0xFFC44C08, 0xFFEC3230, 0xFFE41E5C, 0xFFB01488, 0xFF6414A0, 0xFF202298, 0xFF003C78,\n    0xFF005A54, 0xFF007228, 0xFF007C08, 0xFF287600, 0xFF786600, 0xFF000000, 0xFF000000, 0xFF000000,\n    0xFFECEEEC, 0xFFEC9A4C, 0xFFEC7C78, 0xFFEC62B0, 0xFFEC54E4, 0xFFB458EC, 0xFF646AEC, 0xFF2088D4,\n    0xFF00AAA0, 0xFF00C474, 0xFF20D04C, 0xFF6CCC38, 0xFFCCB438, 0xFF3C3C3C, 0xFF000000, 0xFF000000,\n    0xFFECEEEC, 0xFFECCCA8, 0xFFECBCBC, 0xFFECB2D4, 0xFFECAEEC, 0xFFD4AEEC, 0xFFB0B4EC, 0xFF90C4E4,\n    0xFF78D2CC, 0xFF78DEB4, 0xFF90E2A8, 0xFFB4E298, 0xFFE4D6A0, 0xFFA0A2A0, 0xFF000000, 0xFF000000\n]);\nexport const cssColors = [\n    '#545454', '#001E74', '#081090', '#300088', '#440064', '#5C0030', '#540400', '#3C1800',\n    '#202A00', '#083A00', '#004000', '#003C00', '#00323C', '#000000', '#000000', '#000000',\n    '#989698', '#084CC4', '#3032EC', '#5C1EE4', '#8814B0', '#A01464', '#982220', '#783C00',\n    '#545A00', '#287200', '#087C00', '#007628', '#006678', '#000000', '#000000', '#000000',\n    '#ECEEEC', '#4C9AEC', '#787CEC', '#B062EC', '#E454EC', '#EC58B4', '#EC6A64', '#D48820',\n    '#A0AA00', '#74C400', '#4CD020', '#38CC6C', '#38B4CC', '#3C3C3C', '#000000', '#000000',\n    '#ECEEEC', '#A8CCEC', '#BCBCEC', '#D4B2EC', '#ECAEEC', '#ECAED4', '#ECB4B0', '#E4C490',\n    '#CCD278', '#B4DE78', '#A8E290', '#98E2B4', '#A0D6E4', '#A0A2A0', '#000000', '#000000'\n];\n","export class VideoBuffer {\n    /**\n     * @param {number} width\n     * @param {number} height\n     */\n    constructor(width, height) {\n        this.width  = width;\n        this.height = height;\n        \n        /** *ImageData* ready to be drawn on screen. */\n        this.frame = new ImageData(width, height);\n        /** @private */\n        this.image = new ImageData(width, height);\n        /** @private */\n        this.data  = new Uint32Array(this.image.data.buffer);\n    }\n    \n    //===================================================================================//\n    /**\n     * Move the current buffer into `frame` and create a new empty buffer.\n     */\n    setFrame() {\n        this.frame = this.image;\n        this.image = new ImageData(this.width, this.height);\n        this.data  = new Uint32Array(this.image.data.buffer);\n    }\n    \n    //===================================================================================//\n    /**\n     * Write a series of pixels starting at given X/Y position (from top-left corner).\n     * @param {number} x\n     * @param {number} y\n     * @param {ArrayLike<number>} values An array of 32-bit RGBA pixel values\n     */\n    writePixels(x, y, values) {\n        this.data.set(values, y*this.width + x);\n    }\n}\n\nexport default VideoBuffer;\n","import { Colors, VideoBuffer } from \"./Video/index.js\";\nconst { cssColors, pxlColors } = Colors;\n\nconst width  = 256;\nconst height = 240;\n\nexport class VideoOutput {\n    constructor() {\n        /** @private @type {HTMLCanvasElement?} */\n        this.canvas  = null;\n        /** @private @type {CanvasRenderingContext2D?} */\n        this.context = null;\n        \n        this.layers = [\n            /** Sprites layer behind background. */\n            this.sprBehindLayer = new VideoBuffer(width +8, height +16),\n            /** Background layer. */\n            this.bkgLayer       = new VideoBuffer(width,    height),\n            /** Sprites layer before background. */\n            this.sprBeforeLayer = new VideoBuffer(width +8, height +16),\n        ];\n        \n        /** @private @type {HTMLCanvasElement?} */\n        this.offCanvas  = null;\n        /** @private @type {CanvasRenderingContext2D?} */\n        this.offContext = null;\n        \n        /** @private */\n        this.scheduled = 0;\n    }\n    \n    //===================================================================================//\n    /**\n     * @param {HTMLCanvasElement} output\n     * @returns {HTMLCanvasElement} The now connected CANVAS element\n     */\n    connect(output) {\n        if (output.nodeName === 'CANVAS') {\n            return this.canvas = output;\n        } else {\n            throw new TypeError(\"VideoOutput.connect() expects a <CANVAS> element but \" +\n                                \"received <\" + output.nodeName + \"> instead.\");\n        }\n    }\n    /**\n     * @returns {HTMLCanvasElement?} The now disconnected CANVAS element\n     */\n    disconnect() {\n        const disconnected = this.canvas;\n        this.canvas = null;\n        return disconnected;\n    }\n    \n    /**\n     * *True* if properly connected to a CANVAS element.\n     * @readonly */\n    get connected()    { return !!this.canvas; }\n    /**\n     * *True* if not connected to any CANVAS element.\n     * @readonly */\n    get disconnected() { return  !this.canvas; }\n    \n    //===================================================================================//\n    \n    start() {\n        if (this.canvas) {\n            if ((this.context = this.canvas.getContext('2d', {alpha: false})))\n                this.context.imageSmoothingEnabled = false;\n            \n            this.offCanvas = document.createElement('canvas');\n            this.offCanvas.width  = width;\n            this.offCanvas.height = height;\n            \n            if ((this.offContext = this.offCanvas.getContext('2d', {alpha: true})))\n                this.offContext.imageSmoothingEnabled = false;\n        }\n    }\n    \n    stop() {\n        if (this.canvas) {\n            window.cancelAnimationFrame(this.scheduled);\n            \n            this.context = null;\n            \n            if (this.offCanvas) {\n                this.offCanvas.remove();\n                this.offCanvas  = null;\n                this.offContext = null;\n            }\n        }\n    }\n    \n    //===================================================================================//\n    /** @readonly */\n    get colors() { return pxlColors; }\n    \n    /**\n     * @param {number} backdrop 6-bit color index\n     */\n    drawImage(backdrop) {\n        if (this.canvas) {\n            const outputWidth  = this.canvas.width;\n            const outputHeight = this.canvas.height;\n            \n            const context    = this.context;\n            const offCanvas  = this.offCanvas;\n            const offContext = this.offContext;\n            \n            if (context && offCanvas && offContext) {\n                context.fillStyle = cssColors[backdrop];\n                context.fillRect(0, 0, outputWidth, outputHeight);\n                \n                this.layers.forEach((layer) => {\n                    layer.setFrame();\n                    offContext.putImageData(layer.frame, 0, 0);\n                    context.drawImage(\n                        offCanvas,\n                        0, 0, width, height,\n                        0, 0, outputWidth, outputHeight\n                    );\n                });\n            }\n        }\n    }\n}\n\nexport default VideoOutput;\n","const bufferLength = 367;\nconst buffersCount = 24;\n\n/**\n * An array of short audio buffers continuously reused in a FIFO manner. When ready,\n * an audio buffer can be shifted out and then played by being passed into an\n * `AudioBufferSourceNode`.\n */\nexport class AudioRingBuffer {\n    /**\n     * @param {number} sampleRate\n     */\n    constructor(sampleRate) {\n        /**\n         * @private @readonly\n         * @type {AudioBuffer[]}\n         */\n        this.buffers = new Array(buffersCount).fill(null).map(() => (\n            new AudioBuffer({ length: bufferLength, sampleRate })\n        ));\n\n        /** @private */\n        this.readyBuffer = this.writeBuffer = this.buffers[0];\n        /** @private */\n        this.nextReadyIndex = this.nextWriteIndex = 1;\n\n        /** @private */\n        this.data = this.writeBuffer.getChannelData(0);\n        /** @private */\n        this.index = 0;\n\n        /**\n         * The length in seconds of one audio buffer.\n         * @readonly\n         * @type {number}\n         */\n        this.duration = bufferLength / sampleRate;\n\n        /**\n         * Triggered when a new audio buffer is ready to be shifted out and played.\n         * @type {((buffer:AudioRingBuffer) => void)|undefined}\n         */\n        this.onnewbufferready = undefined;\n\n        /**\n         * Triggered just **_after_** a buffer underrun occurs.\n         * \n         * This should be used for logging, or to take action to prevent *another* such\n         * event from happening, but nothing should be read/written to the buffer at this\n         * time since it happens *while* an audio buffer is being shifted out.\n         * @type {((lag:number) => void)|undefined}\n         */\n        this.onbufferunderrun = undefined;\n        /**\n         * Triggered just **_before_** a buffer overrun occurs.\n         * \n         * This gives the opportunity to prevent it by shifting out one or more audio\n         * buffers to free some space.\n         * @type {((buffer:AudioRingBuffer) => void)|undefined}\n         */\n        this.onbufferoverrun = undefined;\n    }\n\n    //===================================================================================//\n\n    /**\n     * Empties all buffers completely and bring `usage` back to 0%.\n     */\n    reset() {\n        this.readyBuffer = this.writeBuffer = this.buffers[0];\n        this.nextReadyIndex = this.nextWriteIndex = 1;\n\n        this.initChannelData();\n    }\n    /** @private */\n    initChannelData() {\n        this.data = this.writeBuffer.getChannelData(0);\n        this.index = 0;\n    }\n\n    //===================================================================================//\n\n    /**\n     * The length (in samples) of each audio buffer.\n     * @readonly\n     */\n    get length() {\n        return bufferLength;\n    }\n\n    /**\n     * The total number of audio buffers in the queue.\n     * @readonly\n     */\n    get buffersCount() {\n        return buffersCount;\n    }\n    /**\n     * The number of audio buffers that are currently ready to be shifted out of the\n     * queue and played.\n     * @readonly\n     */\n    get readyBuffersCount() {\n        const readyCount = this.nextWriteIndex - this.nextReadyIndex;\n        return (readyCount < 0) ? readyCount + buffersCount : readyCount;\n    }\n\n    /**\n     * The percentage usage of the whole ring buffer.\n     * @readonly\n     */\n    get usage() {\n        return (this.readyBuffersCount + (this.index / bufferLength)) / buffersCount;\n    }\n\n    /**\n     * *True* if there is at least 1 buffer ready to be played.\n     * @readonly\n     */\n    get ready() { return this.nextReadyIndex !== this.nextWriteIndex; }\n    /**\n     * *True* if half of the buffers are ready to be played.\n     * @readonly\n     */\n    get halfFull() { return this.readyBuffersCount >= buffersCount/2; }\n\n    //===================================================================================//\n\n    /**\n     * Get the first *Ready* buffer out of the queue.\n     * \n     * If no buffer is ready yet (buffer underrun), current `writeBuffer` will be\n     * fulfilled with the last received sample (which will result in silence) and then\n     * rotated.\n     * \n     * @returns {AudioBuffer} The first *Ready* buffer\n     */\n    shift() {\n        if (!this.ready) {\n            const index = this.index;\n            const lastSample = index && this.data[index-1];\n            this.data.fill(lastSample, index);\n            this.rotateWriteBuffer();\n            this.data = this.writeBuffer.getChannelData(0);\n            this.data.fill(lastSample, 0, index);\n\n            if (typeof this.onbufferunderrun === 'function')\n                this.onbufferunderrun(((index / bufferLength) - 1) * this.duration);\n        }\n        const currentBuffer = this.readyBuffer;\n\n        this.rotateReadyBuffer();\n\n        return currentBuffer;\n    }\n\n    /**\n     * Appends a sample to the current `writeBuffer`, automatically rotating it when full.\n     * \n     * If the queue becomes full (buffer overrun), `onbufferoverrun` will be called first\n     * (if set), which gives the opportunity to free some space by shifting one or more\n     * *Ready* buffers. Otherwise the whole ring buffer will be cleared except for the\n     * first *Ready* buffer, which will keep its *Ready* state, and writing will continue\n     * on the next one (audio click will occur).\n     * \n     * @param {number} value IEEE754 32-bit linear PCM between -1 and +1\n     */\n    writeSample(value) {\n        this.data[this.index++] = value;\n        if (this.index === bufferLength) {\n            if (this.usage === 1.0) {\n                if (typeof this.onbufferoverrun === 'function')\n                    this.onbufferoverrun(this);\n            }\n            this.rotateWriteBuffer();\n\n            if (this.ready) {\n                this.initChannelData();\n                if (typeof this.onnewbufferready === 'function')\n                    this.onnewbufferready(this);\n            } else {\n                this.rotateWriteBuffer();\n                this.initChannelData();\n            }\n        }\n    }\n\n    //===================================================================================//\n\n    /** @private */\n    rotateWriteBuffer() {\n        let nextWriteIndex = this.nextWriteIndex;\n        this.writeBuffer = this.buffers[nextWriteIndex++];\n        this.nextWriteIndex = (nextWriteIndex < buffersCount) ? nextWriteIndex : 0;\n    }\n    /** @private */\n    rotateReadyBuffer() {\n        let nextReadyIndex = this.nextReadyIndex;\n        this.readyBuffer = this.buffers[nextReadyIndex++];\n        this.nextReadyIndex = (nextReadyIndex < buffersCount) ? nextReadyIndex : 0;\n    }\n}\n\nexport default AudioRingBuffer;\n","import AudioRingBuffer from \"./Audio/AudioRingBuffer.js\";\n\nconst sampleRate = 44100;\nconst threshold = 1/12;\n\n/** @type {AudioContext} */\nlet context;\n\nexport class AudioOutput {\n    constructor() {\n        /** @readonly */\n        this.buffer = new AudioRingBuffer(sampleRate);\n        \n        this.buffer.onbufferunderrun = (lag) => this.decreaseSpeed(lag);\n        this.buffer.onbufferoverrun = (buffer) => {\n            do this.transfer(buffer, this.context);\n            while (!this.healthy);\n        };\n        \n        /** @private */\n        this.gainNode = null;\n        /** @private */\n        this.volumeValue = 1.0;\n        \n        /** @private */\n        this.next = 0.0;\n        /** @private */\n        this.lockedUntil = Infinity;\n        \n        /**\n         * The percentage by which the sample rate should be adjusted to keep the input\n         * and output buffers in sync and prevent buffer [over/under]runs.\n         * \n         * This will never exceed 1.0 (100%).\n         * @type {number}\n         */\n        this.speedAdjustment = 1.0;\n    }\n    \n    //===================================================================================//\n    \n    /**\n     * @readonly\n     * @type {AudioContext}\n     */\n    get context() {\n        if (!context) {\n            context = new AudioContext({ sampleRate });\n            context.suspend();\n        }\n        return context;\n    }\n    \n    /**\n     * @readonly\n     * @type {AudioNode}\n     */\n    get destination() {\n        if (!this.gainNode) {\n            this.gainNode = this.context.createGain();\n            this.gainNode.gain.value = this.volumeValue;\n            this.gainNode.connect(this.context.destination);\n        }\n        return this.gainNode;\n    }\n    \n    //===================================================================================//\n    \n    /**\n     * Output volume between 0.0 and 1.0.\n     * @type {number}\n     */\n    get volume() {\n        return this.volumeValue;\n    }\n    set volume(value) {\n        this.volumeValue = Math.min(1, Math.abs(value));\n        if (this.gainNode)\n            this.gainNode.gain.value = this.volumeValue;\n    }\n    \n    /**\n     * The amount of audio currently in the output buffer (in second).\n     * @type {number}\n     * @readonly\n     */\n    get buffered() {\n        return this.next - this.context.currentTime;\n    }\n    /**\n     * *True* if the output buffer contains enough audio to be considered safe to be\n     * played.\n     * @type {boolean}\n     * @readonly\n     */\n    get healthy() {\n        return this.buffered >= threshold;\n    }\n    \n    /**\n     * Sample rate (in hertz).\n     * @type {number}\n     * @readonly\n     */\n    get sampleRate() {\n        return sampleRate;\n    }\n    \n    //===================================================================================//\n    \n    /**\n     * Initializes the audio context (if not already done) and the input buffer\n     * to begin receiving audio samples via `writeSample()`.\n     * \n     * Playback will start when the input buffer contains enough audio.\n     */\n    start() {\n        const context = this.context;\n        \n        this.lockedUntil = Infinity;\n        \n        this.buffer.reset();\n        this.buffer.onnewbufferready = (buffer) => {\n            if (buffer.halfFull) {\n                buffer.onnewbufferready = (buffer) => {\n                    if (!this.healthy || buffer.halfFull)\n                        this.transfer(buffer, context);\n                };\n                \n                context.resume();\n                \n                this.next = context.currentTime;\n                while (!this.healthy)\n                    this.transfer(buffer, context);\n                this.lockedUntil = this.next;\n            }\n        };\n    }\n    /**\n     * Suspends the audio context, but keeps it initialized for future use.\n     * \n     * Playback will stop when the output buffer is empty.\n     */\n    stop() {\n        setTimeout(() => this.context.suspend(), this.buffered * 1000);\n    }\n    \n    /**\n     * Appends a new sample to the input buffer.\n     * @param {number} value IEEE754 32-bit linear PCM between -1 and +1\n     */\n    writeSample(value) {\n        this.buffer.writeSample(value);\n    }\n    \n    //===================================================================================//\n    \n    /**\n     * Transfers a segment of audio from the input buffer to the output context.\n     * @private\n     * @param {AudioRingBuffer} buffer\n     * @param {AudioContext} context\n     */\n    transfer(buffer, context) {\n        const source = context.createBufferSource();\n        const audioBuffer = buffer.shift();\n        source.buffer = audioBuffer;\n        \n        let next = this.next;\n        let buffered = next - context.currentTime;\n        if (buffered < threshold) {\n            source.onended = () => {\n                if (!this.healthy || buffer.halfFull)\n                    this.transfer(buffer, context);\n            };\n            if (buffered < 0)\n                next = context.currentTime;\n        } else if (buffered > threshold*3) {\n            return;\n        }\n        source.connect(this.destination);\n        source.start(next);\n        this.next = next + audioBuffer.duration;\n        \n        if (buffered > threshold*2)\n            this.increaseSpeed((1 - (threshold*2 / buffered)) / 10);\n    }\n    \n    /**\n     * @private\n     * @param {number} amount A positive number representing the percentage amount by\n     * which the speed will be increased.\n     */\n    increaseSpeed(amount) {\n        if (context.currentTime >= this.lockedUntil) {\n            if (this.speedAdjustment < 1)\n                this.speedAdjustment = Math.min(this.speedAdjustment * (1 + amount), 1);\n            \n            this.lockedUntil = this.next;\n        }\n    }\n    /**\n     * @private\n     * @param {number} amount A negative number representing the percentage amount by\n     * which the speed will be decreased.\n     */\n    decreaseSpeed(amount) {\n        if (context.currentTime >= this.lockedUntil) {\n            this.speedAdjustment *= (1 + amount);\n            \n            this.lockedUntil = this.next;\n        }\n    }\n}\n\nexport default AudioOutput;\n","/**\n * @typedef {import('./NES.js').NES} NES\n * @typedef {(implied?:any) => any} FetchOperandFunc\n * @typedef {FetchOperandFunc} AddressingModeFunc\n * @typedef {(fnFetchOperand:FetchOperandFunc) => void} InstructionFunc\n */\n\nimport { Powered } from './Power.js';\n\n/** Number of cycles by opcode lookup table. */\nconst cyclesLookup = [7,6,2,8,3,3,5,5,3,2,2,2,4,4,6,6, 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n                      6,6,2,8,3,3,5,5,4,2,2,2,4,4,6,6, 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n                      6,6,2,8,3,3,5,5,3,2,2,2,3,4,6,6, 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n                      6,6,2,8,3,3,5,5,4,2,2,2,5,4,6,6, 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n                      2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4, 2,6,2,6,4,4,4,4,2,5,2,5,5,5,5,5,\n                      2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4, 2,5,2,5,4,4,4,4,2,4,2,4,4,4,4,4,\n                      2,6,2,8,3,3,5,5,2,2,2,2,4,4,6,6, 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n                      2,6,3,8,3,3,5,5,2,2,2,2,4,4,6,6, 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7];\n\nexport class CPU extends Powered {\n    /**\n     * @param {NES} bus\n     */\n    constructor(bus) {\n        super();\n        \n        /** @private */\n        this.bus = bus;\n        \n        /** Internal 2kb of RAM, located at `[0x0000-0x07FF]`. */\n        this.ram   = new Uint8Array(0x800);\n        /** Predefined memory page used for the Stack, located at `[0x0100-0x01FF]`. */\n        this.stack = this.ram.subarray(0x100, 0x200);\n        \n        /**\n         * Optimized accessor for the NMI vector `[0xFFFA]`.\n         * @private\n         */\n        this.nmiVector   = () => 0x0000;\n        /**\n         * Optimized accessor for the RESET vector `[0xFFFC]`.\n         * @private\n         */\n        this.resetVector = () => 0x0000;\n        /**\n         * Optimized accessor for the IRQ vector `[0xFFFE]`.\n         * @private\n         */\n        this.irqVector   = () => 0x0000;\n        \n        /**\n         * **Accumulator**\n         * \n         * **A** is byte-wide and along with the *Arithmetic Logic Unit* (**ALU**),\n         * supports using the *Status register* for carrying, overflow detection,\n         * and so on.\n         */\n        this.A = 0x00;\n        /**\n         * **X index**\n         * \n         * **X** is byte-wide and used for several addressing modes. It can be used as\n         * loop counter easily, using `INC`/`DEC` and *Branch* instructions. Not being\n         * the accumulator, it has limited addressing modes when loading and saving.\n         */\n        this.X = 0x00;\n        /**\n         * **Y index**\n         * \n         * **Y** is byte-wide and used for several addressing modes. It can be used as\n         * loop counter easily, using `INC`/`DEC` and *Branch* instructions. Not being\n         * the accumulator, it has limited addressing modes when loading and saving.\n         */\n        this.Y = 0x00;\n        /**\n         * **Status Register**\n         * \n         * `|---7----|---6----|--5--|---4---|---3---|----2----|--1---|---0---|`\n         * `|Negative|oVerflow| - - | *BRK* |Decimal|Interrupt| Zero | Carry |`\n         * \n         * **P** has 6 bits used by the **ALU** but is byte-wide. `PHP`, `PLP`,\n         * *Arithmetic*, *Testing*, and *Branch* instructions can access this register.\n         */\n        this.P = 0x30;\n        /**\n         * **Stack Pointer**\n         * \n         * **S** is byte-wide and can be accessed using *Interrupts*, *Pulls*, *Pushes*,\n         * and *Transfers*. It indexes into a 256 bytes stack at `[0x0100-0x01FF]`.\n         */\n        this.SP = 0x00;\n        /**\n         * **Program Counter**\n         * \n         * **PC** is 2-byte-wide and can be accessed either by CPU's internal fetch logic\n         * increment, by an interrupt (*NMI*, *Reset*, *IRQ/BRQ*), or by using the\n         * `RTS`/`JMP`/`JSR`/ *Branch* instructions.\n         */\n        this.PC = 0x0000;\n        \n        /**\n         * Addressing modes by opcode lookup table.\n         * @type {AddressingModeFunc[]}\n         * @private\n         */\n        this.addressLookup = [\n            this.imp, this.indX, this.imp, this.indX, this.zero,  this.zero,  this.zero,  this.zero,  this.imp, this.imm,  this.imp, this.imm,  this.abs,  this.abs,  this.abs,  this.abs,\n            this.rel, this.indY, this.imp, this.indY, this.zeroX, this.zeroX, this.zeroX, this.zeroX, this.imp, this.absY, this.imp, this.absY, this.absX, this.absX, this.absX, this.absX,\n            this.abs, this.indX, this.imp, this.indX, this.zero,  this.zero,  this.zero,  this.zero,  this.imp, this.imm,  this.imp, this.imm,  this.abs,  this.abs,  this.abs,  this.abs,\n            this.rel, this.indY, this.imp, this.indY, this.zeroX, this.zeroX, this.zeroX, this.zeroX, this.imp, this.absY, this.imp, this.absY, this.absX, this.absX, this.absX, this.absX,\n            this.imp, this.indX, this.imp, this.indX, this.zero,  this.zero,  this.zero,  this.zero,  this.imp, this.imm,  this.imp, this.imm,  this.abs,  this.abs,  this.abs,  this.abs,\n            this.rel, this.indY, this.imp, this.indY, this.zeroX, this.zeroX, this.zeroX, this.zeroX, this.imp, this.absY, this.imp, this.absY, this.absX, this.absX, this.absX, this.absX,\n            this.imp, this.indX, this.imp, this.indX, this.zero,  this.zero,  this.zero,  this.zero,  this.imp, this.imm,  this.imp, this.imm,  this.ind,  this.abs,  this.abs,  this.abs,\n            this.rel, this.indY, this.imp, this.indY, this.zeroX, this.zeroX, this.zeroX, this.zeroX, this.imp, this.absY, this.imp, this.absY, this.absX, this.absX, this.absX, this.absX,\n            this.imm, this.indX, this.imm, this.indX, this.zero,  this.zero,  this.zero,  this.zero,  this.imp, this.imm,  this.imp, this.imm,  this.abs,  this.abs,  this.abs,  this.abs,\n            this.rel, this.indY, this.imp, this.indY, this.zeroX, this.zeroX, this.zeroY, this.zeroY, this.imp, this.absY, this.imp, this.absY, this.absX, this.absX, this.absY, this.absY,\n            this.imm, this.indX, this.imm, this.indX, this.zero,  this.zero,  this.zero,  this.zero,  this.imp, this.imm,  this.imp, this.imm,  this.abs,  this.abs,  this.abs,  this.abs,\n            this.rel, this.indY, this.imp, this.indY, this.zeroX, this.zeroX, this.zeroY, this.zeroY, this.imp, this.absY, this.imp, this.absY, this.absX, this.absX, this.absY, this.absY,\n            this.imm, this.indX, this.imm, this.indX, this.zero,  this.zero,  this.zero,  this.zero,  this.imp, this.imm,  this.imp, this.imm,  this.abs,  this.abs,  this.abs,  this.abs,\n            this.rel, this.indY, this.imp, this.indY, this.zeroX, this.zeroX, this.zeroX, this.zeroX, this.imp, this.absY, this.imp, this.absY, this.absX, this.absX, this.absX, this.absX,\n            this.imm, this.indX, this.imm, this.indX, this.zero,  this.zero,  this.zero,  this.zero,  this.imp, this.imm,  this.imp, this.imm,  this.abs,  this.abs,  this.abs,  this.abs,\n            this.rel, this.indY, this.imp, this.indY, this.zeroX, this.zeroX, this.zeroX, this.zeroX, this.imp, this.absY, this.imp, this.absY, this.absX, this.absX, this.absX, this.absX\n        ].map((fn) => fn.bind(this));\n        \n        /**\n         * Instructions by opcode lookup table.\n         * @type {InstructionFunc[]}\n         * @private\n         */\n        this.instructionLookup = [\n            this.BRK, this.ORA,  this.KIL, this.NOP,  this.NOP,   this.ORA,   this.ASL,   this.NOP,   this.PHP, this.ORA,  this.AXL, this.NOP,  this.NOP,  this.ORA,  this.ASL,  this.NOP,\n            this.BPL, this.ORA,  this.KIL, this.NOP,  this.NOP,   this.ORA,   this.ASL,   this.NOP,   this.CLC, this.ORA,  this.NOP, this.NOP,  this.NOP,  this.ORA,  this.ASL,  this.NOP,\n            this.JSR, this.AND,  this.KIL, this.NOP,  this.BIT,   this.AND,   this.ROL,   this.NOP,   this.PLP, this.AND,  this.RXL, this.NOP,  this.BIT,  this.AND,  this.ROL,  this.NOP,\n            this.BMI, this.AND,  this.KIL, this.NOP,  this.NOP,   this.AND,   this.ROL,   this.NOP,   this.SEC, this.AND,  this.NOP, this.NOP,  this.NOP,  this.AND,  this.ROL,  this.NOP,\n            this.RTI, this.EOR,  this.KIL, this.NOP,  this.NOP,   this.EOR,   this.LSR,   this.NOP,   this.PHA, this.EOR,  this.LXR, this.NOP,  this.JMP,  this.EOR,  this.LSR,  this.NOP,\n            this.BVC, this.EOR,  this.KIL, this.NOP,  this.NOP,   this.EOR,   this.LSR,   this.NOP,   this.CLI, this.EOR,  this.NOP, this.NOP,  this.NOP,  this.EOR,  this.LSR,  this.NOP,\n            this.RTS, this.ADC,  this.KIL, this.NOP,  this.NOP,   this.ADC,   this.ROR,   this.NOP,   this.PLA, this.ADC,  this.RXR, this.NOP,  this.JMP,  this.ADC,  this.ROR,  this.NOP,\n            this.BVS, this.ADC,  this.KIL, this.NOP,  this.NOP,   this.ADC,   this.ROR,   this.NOP,   this.SEI, this.ADC,  this.NOP, this.NOP,  this.NOP,  this.ADC,  this.ROR,  this.NOP,\n            this.NOP, this.STA,  this.NOP, this.NOP,  this.STY,   this.STA,   this.STX,   this.NOP,   this.DEY, this.NOP,  this.TXA, this.NOP,  this.STY,  this.STA,  this.STX,  this.NOP,\n            this.BCC, this.STA,  this.KIL, this.NOP,  this.STY,   this.STA,   this.STX,   this.NOP,   this.TYA, this.STA,  this.TXS, this.NOP,  this.NOP,  this.STA,  this.NOP,  this.NOP,\n            this.LDY, this.LDA,  this.LDX, this.NOP,  this.LDY,   this.LDA,   this.LDX,   this.NOP,   this.TAY, this.LDA,  this.TAX, this.NOP,  this.LDY,  this.LDA,  this.LDX,  this.NOP,\n            this.BCS, this.LDA,  this.KIL, this.NOP,  this.LDY,   this.LDA,   this.LDX,   this.NOP,   this.CLV, this.LDA,  this.TSX, this.NOP,  this.LDY,  this.LDA,  this.LDX,  this.NOP,\n            this.CPY, this.CMP,  this.NOP, this.NOP,  this.CPY,   this.CMP,   this.DEC,   this.NOP,   this.INY, this.CMP,  this.DEX, this.NOP,  this.CPY,  this.CMP,  this.DEC,  this.NOP,\n            this.BNE, this.CMP,  this.KIL, this.NOP,  this.NOP,   this.CMP,   this.DEC,   this.NOP,   this.CLD, this.CMP,  this.NOP, this.NOP,  this.NOP,  this.CMP,  this.DEC,  this.NOP,\n            this.CPX, this.SBC,  this.NOP, this.NOP,  this.CPX,   this.SBC,   this.INC,   this.NOP,   this.INX, this.SBC,  this.NOP, this.NOP,  this.CPX,  this.SBC,  this.INC,  this.NOP,\n            this.BEQ, this.SBC,  this.KIL, this.NOP,  this.NOP,   this.SBC,   this.INC,   this.NOP,   this.SED, this.SBC,  this.NOP, this.NOP,  this.NOP,  this.SBC,  this.INC,  this.NOP\n        ].map((fn) => fn.bind(this));\n        \n        this.cycle = 0;\n        \n        /** @private */\n        this.opcode  = 0x00;\n        /** @private */\n        this.operand = 0x00;\n    }\n    \n    //== Power ==========================================================================//\n    powerOn() {\n        this.cycle = 0;\n        \n        //Interrupt vectors optimizations\n        const cart = this.bus.game.cartridge;\n        this.nmiVector   = () => cart.cpuRead(0xFFFA) + cart.cpuRead(0xFFFB)*256;\n        this.resetVector = () => cart.cpuRead(0xFFFC) + cart.cpuRead(0xFFFD)*256;\n        this.irqVector   = () => cart.cpuRead(0xFFFE) + cart.cpuRead(0xFFFF)*256;\n        \n        //Accumulator\n        this.A = 0x00;\n        //Indexes\n        this.X = 0x00;\n        this.Y = 0x00;\n        //Status register\n        this.P = 0x34; //b00110100\n        //Stack pointer\n        this.SP = 0xFD;\n        //Program counter\n        this.PC = this.resetVector();\n        \n        return super.powerOn();\n    }\n    powerOff() {\n        return super.powerOff();\n    }\n    \n    reset() {\n        this.doReset();\n    }\n    \n    //== Execution ======================================================================//\n    /**\n     * Execute instructions up to a given limit of CPU cycles, the limit being based on\n     * the number of cycle since the beginning of the current frame.\n     * @param {number} limit \n     */\n    doInstructions(limit) {\n        if (this.cycle < limit) {\n            const apu = this.bus.apu;\n            \n            let cycleBefore;\n            do {\n                cycleBefore = this.cycle;\n                this.doInstruction();\n                apu.doCycles(this.cycle - cycleBefore);\n            } while (this.cycle < limit);\n        }\n    }\n    \n    /**\n     * Execute a single instruction.\n     */\n    doInstruction() {\n        const opcode =\n        this.opcode  = this.read(this.PC++);\n        this.operand = this.read(this.PC++);\n        \n        this.instructionLookup[opcode](this.addressLookup[opcode]);\n        \n        this.cycle += cyclesLookup[opcode];\n    }\n    \n    //== Interrupts =====================================================================//\n    doNMI() {\n        this.pushWord(this.PC);\n        this.pushByte(this.P & ~0x10);\n        this.PC = this.nmiVector();\n        this.cycle += 7;\n    }\n    doReset() {\n        this.SP = wrapByte(this.SP+3);\n        this.P |= 0x04;\n        this.PC = this.resetVector();\n        this.cycle += 7;\n    }\n    doIRQ() {\n        if (this.P & 0x04) return;\n        \n        this.pushWord(this.PC);\n        this.pushByte(this.P & ~0x10);\n        this.PC = this.irqVector();\n        this.cycle += 7;\n    }\n    \n    //== Memory access ==================================================================//\n    /**\n     * @param {number} address 16-bit address\n     * @returns {number} 8-bit data\n     */\n    read(address) {\n        if (address < 0x800) {\n            return this.ram[address];\n        } else if (address < 0x2000) {\n            return this.ram[address & 0x7FF];\n        } else if (address < 0x4018) {\n            if (address < 0x4000) {\n                return this.bus.ppu.read(address);\n            } else if (address >= 0x4016) {\n                return this.bus.controllers.read(address);\n            } else {\n                return this.bus.apu.read(address);\n            }\n        } else {\n            return this.bus.game.cartridge.cpuRead(address);\n        }\n    }\n    /**\n     * @param {number} address 16-bit address\n     * @param {number} data 8-bit data\n     */\n    write(address, data) {\n        if (address < 0x800) {\n            this.ram[address] = data;\n        } else if (address < 0x2000) {\n            this.ram[address & 0x7FF] = data;\n        } else if (address < 0x4018) {\n            if (address < 0x4000) {\n                this.bus.ppu.write(address,data);\n            } else if (address === 0x4014) {\n                this.bus.ppu.doDMA(data * 256);\n                \n                if (this.cycle & 1) this.cycle += 513;\n                else this.cycle += 514;\n            } else if (address === 0x4016) {\n                this.bus.controllers.write(address, data);\n            } else {\n                this.bus.apu.write(address, data);\n            }\n        } else {\n            this.bus.game.cartridge.cpuWrite(address, data);\n        }\n    }\n    \n    //== Stack ==========================================================================//\n    /** @param {number} value 8-bit value @private */\n    pushByte(value) {\n        const SP = this.SP;\n        this.stack[SP] = value;\n        this.SP = (SP > 0) ? SP - 1 : 0xFF;\n    }\n    /** @param {number} value 16-bit value @private */\n    pushWord(value) {\n        this.pushByte(value >> 8);\n        this.pushByte(value & 0xFF);\n    }\n    \n    /** @returns {number} 8-bit value @private */\n    pullByte() {\n        return this.stack[this.SP = wrapByte(this.SP + 1)];\n    }\n    /** @returns {number} 16-bit value @private */\n    pullWord() {\n        return this.pullByte() + this.pullByte()*256;\n    }\n    \n    //== Status =========================================================================//\n    get Carry()          { return (this.P & 0x01) > 0; }\n    get Zero()           { return (this.P & 0x02) > 0; }\n    get Interrupt()      { return (this.P & 0x04) > 0; }\n    get Decimal()        { return (this.P & 0x08) > 0; }\n    get Overflow()       { return (this.P & 0x40) > 0; }\n    get Negative()       { return (this.P & 0x80) > 0; }\n    \n    set Carry(value)     { value ? (this.P |= 0x01) : (this.P &= ~0x01); }\n    set Zero(value)      { value ? (this.P |= 0x02) : (this.P &= ~0x02); }\n    set Interrupt(value) { value ? (this.P |= 0x04) : (this.P &= ~0x04); }\n    set Decimal(value)   { value ? (this.P |= 0x08) : (this.P &= ~0x08); }\n    set Overflow(value)  { value ? (this.P |= 0x40) : (this.P &= ~0x40); }\n    set Negative(value)  { value ? (this.P |= 0x80) : (this.P &= ~0x80); }\n    \n    //== Arithmetic Logic Unit ==========================================================//\n    /** @private @param {number} value */\n    ALU(value) {\n        if (value > 0xFF) {\n            this.Carry = true;\n            while (value > 0xFF) value -= 0x100;\n        }\n        \n        this.Zero = (value === 0);\n        \n        if (value < 0) {\n            this.Negative = true;\n            while (value < 0) value += 0x100;\n        } else\n            this.Negative = (value >= 0x80);\n        \n        return value;\n    }\n    \n    //== Addressing Modes ===============================================================//\n    \n    /** Implied\n     * @template {number|boolean} T\n     * @param {T} implied\n     * @private */\n    imp(implied) { this.PC--; return implied; }\n    /** Immediate - `#00`\n     * @private */\n    imm() { return this.PC-1; }\n    /** Relative - `±#00`\n     * @private */\n    rel() { this.cycle++; return signByte(this.operand); }\n    \n    /** Zero Page - `$00`\n     * @private */\n    zero()  { return this.operand; }\n    /** Zero Page indexed X - `$00+X`\n     * @private */\n    zeroX() { return wrapByte(this.operand + this.X); }\n    /** Zero Page indexed Y - `$00+Y`\n     * @private */\n    zeroY() { return wrapByte(this.operand + this.Y); }\n    \n    /** @private */\n    readWord() { return this.operand += this.read(this.PC++)*256; }\n    \n    /** Absolute - `$0000`\n     * @private */\n    abs() { return this.readWord(); }\n    /** Absolute indexed X - `$0000+X`\n     * @private */\n    absX() {\n        if ((this.operand + this.X) > 0xFF) this.cycle++;\n        return this.readWord() + this.X; }\n    /** Absolute indexed Y - `$0000+Y`\n     * @private */\n    absY() {\n        if ((this.operand + this.Y) > 0xFF) this.cycle++;\n        return this.readWord() + this.Y; }\n    \n    /** Indirect - `($0000)`\n     * @private */\n    ind() {\n        const indirect = this.readWord();\n        return this.read(indirect) + this.read(indirect+1)*256; }\n    /** Indirect indexed X - `($00+X)`\n     * @private */\n    indX() {\n        const indirect = wrapByte(this.operand + this.X);\n        return this.read(indirect) + this.read(indirect+1)*256; }\n    /** Indirect indexed Y - `($00)+Y`\n     * @private */\n    indY() {\n        const lowByte  = this.read(this.operand);\n        const highByte = this.read(this.operand+1);\n        if ((lowByte + this.Y) > 0xFF) this.cycle++;\n        return lowByte + highByte*256 + this.Y; }\n    \n    //== OpCodes ========================================================================//\n    \n    //-- Jump, subroutine and interrupt ------------------------------------//\n    \n    /** Interrupt\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    BRK(fnFetchOperand) {\n        this.pushWord(this.PC);\n        this.pushByte(this.P);\n        this.Interrupt = true;\n        this.PC = fnFetchOperand(this.irqVector());\n    }\n    /** Return from Interrupt\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    RTI(fnFetchOperand) {\n        this.P = this.pullByte();\n        this.PC = fnFetchOperand(this.pullWord());\n    }\n    /** Jump to Subroutine\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    JSR(fnFetchOperand) {\n        this.pushWord(this.PC);\n        this.PC = fnFetchOperand();\n    }\n    /** Return from Subroutine\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    RTS(fnFetchOperand) {\n        this.PC = fnFetchOperand(this.pullWord() + 1);\n    }\n    /** Jump to\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    JMP(fnFetchOperand) {\n        this.PC = fnFetchOperand();\n    }\n    \n    //-- Branching ---------------------------------------------------------//\n    \n    /** Branch if Positive\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    BPL(fnFetchOperand) {\n        if (!this.Negative)\n            this.PC += fnFetchOperand();\n    }\n    /** Branch if Negative\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    BMI(fnFetchOperand) {\n        if (this.Negative)\n            this.PC += fnFetchOperand();\n    }\n    /** Branch if oVerflow Clear\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    BVC(fnFetchOperand) {\n        if (!this.Overflow)\n            this.PC += fnFetchOperand();\n    }\n    /** Branch if oVerflow Set\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    BVS(fnFetchOperand) {\n        if (this.Overflow)\n            this.PC += fnFetchOperand();\n    }\n    /** Branch if Carry Clear\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    BCC(fnFetchOperand) {\n        if (!this.Carry)\n            this.PC += fnFetchOperand();\n    }\n    /** Branch if Carry Set\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    BCS(fnFetchOperand) {\n        if (this.Carry)\n            this.PC += fnFetchOperand();\n    }\n    /** Branch if Not Equal\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    BNE(fnFetchOperand) {\n        if (!this.Zero)\n            this.PC += fnFetchOperand();\n    }\n    /** Branch if Equal\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    BEQ(fnFetchOperand) {\n        if (this.Zero)\n            this.PC += fnFetchOperand();\n    }\n    \n    //-- Stack -------------------------------------------------------------//\n    \n    /** Push Accumulator\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    PHA(fnFetchOperand) { this.pushByte(fnFetchOperand(this.A)); }\n    /** Push Processor Status\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    PHP(fnFetchOperand) { this.pushByte(fnFetchOperand(this.P)); }\n    /** Pull Accumulator\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    PLA(fnFetchOperand) { this.A = this.ALU(fnFetchOperand(this.pullByte())); }\n    /** Pull Processor Status\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    PLP(fnFetchOperand) { this.P = fnFetchOperand(this.pullByte()); }\n    \n    //-- Status flags ------------------------------------------------------//\n    \n    /** Clear Carry\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    CLC(fnFetchOperand) { fnFetchOperand(this.Carry = false); }\n    /** Clear Decimal\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    CLD(fnFetchOperand) { fnFetchOperand(this.Decimal = false); }\n    /** Clear Interrupt\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    CLI(fnFetchOperand) { fnFetchOperand(this.Interrupt = false); }\n    /** Clear Overflow\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    CLV(fnFetchOperand) { fnFetchOperand(this.Overflow = false); }\n    \n    /** Set Carry\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    SEC(fnFetchOperand) { fnFetchOperand(this.Carry = true); }\n    /** Set Decimal\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    SED(fnFetchOperand) { fnFetchOperand(this.Decimal = true); }\n    /** Set Interrupt\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    SEI(fnFetchOperand) { fnFetchOperand(this.Interrupt = true); }\n    \n    //-- Register transfert ------------------------------------------------//\n    \n    /** Transfert A to X\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    TAX(fnFetchOperand) { fnFetchOperand(this.X = this.ALU(this.A)); }\n    /** Transfert X to A\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    TXA(fnFetchOperand) { fnFetchOperand(this.A = this.ALU(this.X)); }\n    /** Transfert A to Y\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    TAY(fnFetchOperand) { fnFetchOperand(this.Y = this.ALU(this.A)); }\n    /** Transfert Y to A\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    TYA(fnFetchOperand) { fnFetchOperand(this.A = this.ALU(this.Y)); }\n    /** Transfert SP to X\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    TSX(fnFetchOperand) { fnFetchOperand(this.X = this.ALU(this.SP)); }\n    /** Transfert X to SP\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    TXS(fnFetchOperand) { fnFetchOperand(this.SP = this.X); }\n    \n    //-- Move operations ---------------------------------------------------//\n    \n    /** Load Accumulator\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    LDA(fnFetchOperand) { this.A = this.ALU(this.read(fnFetchOperand())); }\n    /** Load X\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    LDX(fnFetchOperand) { this.X = this.ALU(this.read(fnFetchOperand())); }\n    /** Load Y\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    LDY(fnFetchOperand) { this.Y = this.ALU(this.read(fnFetchOperand())); }\n    \n    /** Store Accumulator\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    STA(fnFetchOperand) { this.write(fnFetchOperand(), this.A); }\n    /** Store X\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    STX(fnFetchOperand) { this.write(fnFetchOperand(), this.X); }\n    /** Store Y\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    STY(fnFetchOperand) { this.write(fnFetchOperand(), this.Y); }\n    \n    //-- Arithmetic operations ---------------------------------------------//\n    \n    /** Add with Carry\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    ADC(fnFetchOperand) { this.add(this.A, this.read(fnFetchOperand())); }\n    /** Subtract with Carry\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    SBC(fnFetchOperand) { this.add(this.A, 0xFF-this.read(fnFetchOperand())); }\n    \n    /**\n     * @param {number} reg\n     * @param {number} operand\n     * @private\n     */\n    add(reg, operand) {\n        const alu = reg + operand + (this.Carry ? 1 : 0);\n        this.Carry = false;\n        this.Overflow = ((reg^alu) & (operand^alu) & 0x80) > 0;\n        this.A = this.ALU(alu);\n    }\n    \n    /** Arithmetic Shift Left\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    ASL(fnFetchOperand) {\n        const address = fnFetchOperand();\n        const operand = this.read(address);\n        this.write(address, this.ALU(operand * 2));\n        this.Carry = (operand >= 0x80);\n    }\n    /** Arithmetic Shift Left (implied)\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    AXL(fnFetchOperand) {\n        const operand = fnFetchOperand(this.A);\n        this.A = this.ALU(operand * 2);\n        this.Carry = (operand >= 0x80);\n    }\n    \n    /** Logical Shift Right\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    LSR(fnFetchOperand) {\n        const address = fnFetchOperand();\n        const operand = this.read(address);\n        this.write(address, this.ALU(operand >>> 1));\n        this.Carry = (operand & 0x01) > 0;\n    }\n    /** Logical Shift Right (implied)\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    LXR(fnFetchOperand) {\n        const operand = fnFetchOperand(this.A);\n        this.A = this.ALU(operand >>> 1);\n        this.Carry = (operand & 0x01) > 0;\n    }\n    \n    /** Rotate Left\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    ROL(fnFetchOperand) {\n        const carry = (this.Carry ? 0x01 : 0x00);\n        const address = fnFetchOperand();\n        const operand = this.read(address);\n        this.write(address, this.ALU((operand * 2) + carry));\n        this.Carry = (operand >= 0x80);\n    }\n    /** Rotate Left (implied)\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    RXL(fnFetchOperand) {\n        const carry = (this.Carry ? 0x01 : 0x00);\n        const operand = fnFetchOperand(this.A);\n        this.A = this.ALU((operand * 2) + carry);\n        this.Carry = (operand >= 0x80);\n    }\n    \n    /** Rotate Right\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    ROR(fnFetchOperand) {\n        const carry = (this.Carry ? 0x80 : 0x00);\n        const address = fnFetchOperand();\n        const operand = this.read(address);\n        this.write(address, this.ALU((operand >>> 1) + carry));\n        this.Carry = (operand & 0x01) > 0;\n    }\n    /** Rotate Right (implied)\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    RXR(fnFetchOperand) {\n        const carry = (this.Carry ? 0x80 : 0x00);\n        const operand = fnFetchOperand(this.A);\n        this.A = this.ALU((operand >>> 1) + carry);\n        this.Carry = (operand & 0x01) > 0;\n    }\n    \n    /** Increment memory\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    INC(fnFetchOperand) {\n        const address = fnFetchOperand();\n        this.write(address, this.ALU(this.read(address) + 1));\n    }\n    /** Decrement memory\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    DEC(fnFetchOperand) {\n        const address = fnFetchOperand();\n        this.write(address, this.ALU(this.read(address) - 1));\n    }\n    /** Increment X\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    INX(fnFetchOperand) { this.X = this.ALU(fnFetchOperand(this.X) + 1); }\n    /** Decrement X\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    DEX(fnFetchOperand) { this.X = this.ALU(fnFetchOperand(this.X) - 1); }\n    /** Increment Y\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    INY(fnFetchOperand) { this.Y = this.ALU(fnFetchOperand(this.Y) + 1); }\n    /** Decrement Y\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    DEY(fnFetchOperand) { this.Y = this.ALU(fnFetchOperand(this.Y) - 1); }\n    \n    //-- Test operations ---------------------------------------------------//\n    \n    /** Bit test\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    BIT(fnFetchOperand) {\n        const operand = this.read(fnFetchOperand());\n        if (operand >= 0x80) {\n            this.Negative = true;\n            this.Overflow = (operand >= 0xC0);\n        } else {\n            this.Negative = false;\n            this.Overflow = (operand >= 0x40);\n        }\n        this.Zero = !(this.A & operand);\n    }\n    \n    /** Compare with Accumulator\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    CMP(fnFetchOperand) { this.compare(this.A, this.read(fnFetchOperand())); }\n    /** Compare with X\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    CPX(fnFetchOperand) { this.compare(this.X, this.read(fnFetchOperand())); }\n    /** Compare with Y\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    CPY(fnFetchOperand) { this.compare(this.Y, this.read(fnFetchOperand())); }\n    \n    /**\n     * @param {number} reg\n     * @param {number} operand\n     * @private */\n    compare(reg, operand) {\n        this.ALU(reg + (0x100-operand));\n        this.Carry = (reg >= operand);\n    }\n    \n    //-- Logical operations ------------------------------------------------//\n    \n    /** Logical OR\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    ORA(fnFetchOperand) { this.A = this.ALU(this.A | this.read(fnFetchOperand())); }\n    /** Logical AND\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    AND(fnFetchOperand) { this.A = this.ALU(this.A & this.read(fnFetchOperand())); }\n    /** Exclusive OR\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    EOR(fnFetchOperand) { this.A = this.ALU(this.A ^ this.read(fnFetchOperand())); }\n    \n    //-- Misc --------------------------------------------------------------//\n    \n    /** No-Op\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    NOP(fnFetchOperand) { fnFetchOperand(); }\n    /** Fault\n     * @param {FetchOperandFunc} fnFetchOperand\n     * @private */\n    KIL(fnFetchOperand) { fnFetchOperand(); this.doReset(); }\n}\n\n/**\n * Helper function to convert signed bytes to javascript's native numbers\n * @param {number} value\n */\nfunction signByte(value) { return value>0x7F ? value-0x100 : value; }\n/**\n * Helper function to simulate binary overflow\n * @param {number} value\n */\nfunction wrapByte(value) { return value>0xFF ? value-0x100 : value; }\n\nexport default CPU;","import TimerUnit from \"./TimerUnit.js\";\n\n/**\n * With the least significant bit set, the remaining bits select a linear length\n * (with the exception of the 0 entry).\n * Otherwise, we get note lengths based on a base length of 12 (MSB set) or 10 (MSB clear).\n */\nconst lengths = [\n    10, 254, 20,  2, 40,  4, 80,  6, 160,  8, 60, 10, 14, 12, 26, 14,\n    12,  16, 24, 18, 48, 20, 96, 22, 192, 24, 72, 26, 16, 28, 32, 30,\n];\n\n/**\n * The length counter provides automatic duration control for the waveform channels.\n * \n * Once loaded with a value, it can optionally count down (when the halt flag is clear)\n * and once it reaches zero, the corresponding channel is silenced.\n */\nexport class LengthCounter extends TimerUnit {\n    constructor() {\n        super();\n        \n        /** @private */\n        this.disabled = true;\n        /** @private */\n        this.lengthCounter = 0;\n        /** @protected */\n        this.lengthCounterHalt = false;\n    }\n    \n    reset() {\n        super.reset();\n        \n        this.enabled = false;\n        this.length = 0;\n    }\n    \n    //===================================================================================//\n    /** @type {boolean} */\n    get enabled() {\n        return this.lengthCounter > 0;\n    }\n    set enabled(value) {\n        if ((this.disabled = !value))\n            this.lengthCounter = 0;\n    }\n    \n    //== Registers ======================================================================//\n    /** @type {number} */\n    get length() {\n        return this.lengthCounter;\n    }\n    set length(value) {\n        if (!this.disabled)\n            this.lengthCounter = lengths[(value & 0xF8) >>> 3];\n    }\n    \n    //== Execution ======================================================================//\n    doHalf() {\n        if (this.lengthCounter > 0 && !this.lengthCounterHalt)\n            this.lengthCounter--;\n    }\n}\n\nexport default LengthCounter;\n\n/*\nLinear length values:\n1 1111 (1F) => 30\n1 1101 (1D) => 28\n1 1011 (1B) => 26\n1 1001 (19) => 24\n1 0111 (17) => 22\n1 0101 (15) => 20\n1 0011 (13) => 18\n1 0001 (11) => 16\n0 1111 (0F) => 14\n0 1101 (0D) => 12\n0 1011 (0B) => 10\n0 1001 (09) => 8\n0 0111 (07) => 6\n0 0101 (05) => 4\n0 0011 (03) => 2\n0 0001 (01) => 254\n\nNotes with base length 12 (4/4 at 75 bpm):\n1 1110 (1E) => 32  (96 times 1/3, quarter note triplet)\n1 1100 (1C) => 16  (48 times 1/3, eighth note triplet)\n1 1010 (1A) => 72  (48 times 1 1/2, dotted quarter)\n1 1000 (18) => 192 (Whole note)\n1 0110 (16) => 96  (Half note)\n1 0100 (14) => 48  (Quarter note)\n1 0010 (12) => 24  (Eighth note)\n1 0000 (10) => 12  (Sixteenth)\n\nNotes with base length 10 (4/4 at 90 bpm, with relative durations being the same as above):\n0 1110 (0E) => 26  (Approx. 80 times 1/3, quarter note triplet)\n0 1100 (0C) => 14  (Approx. 40 times 1/3, eighth note triplet)\n0 1010 (0A) => 60  (40 times 1 1/2, dotted quarter)\n0 1000 (08) => 160 (Whole note)\n0 0110 (06) => 80  (Half note)\n0 0100 (04) => 40  (Quarter note)\n0 0010 (02) => 20  (Eighth note)\n0 0000 (00) => 10  (Sixteenth)\n*/\n","/**\n * The timer is used in each of the channels to control the sound frequency.\n */\nexport class TimerUnit {\n    constructor() {\n        this.timerCycle  = 0;\n        this.timerPeriod = 0;\n    }\n    \n    reset() {\n        this.timer = 0;\n        this.timerCycle = 0;\n    }\n    \n    //== Registers ======================================================================//\n    /** @type {number} */\n    get timer() {\n        return this.timerPeriod;\n    }\n    set timer(value) {\n        const timerPeriod = this.timerPeriod;\n        if (timerPeriod > 0xFF)\n            this.timerPeriod = (timerPeriod & 0x700) + value;\n        else\n            this.timerPeriod = value;\n    }\n}\n\nexport default TimerUnit;\n","import LengthCounter from \"./LengthCounter.js\";\n\n/**\n * The envelope generator controls the volume in one of two ways:\n * \n * It can generate a decreasing saw envelope with optional looping, or it can generate a\n * constant volume that a more sophisticated software envelope generator can manipulate.\n */\nexport class EnvelopeGenerator extends LengthCounter {\n    constructor() {\n        super();\n        \n        this.constantVolume = 0;\n        \n        this.envelopeEnabled = true;\n        this.envelopeReset   = false;\n        this.envelopeCycle   = 0;\n        this.envelopePeriod  = 0;\n        this.envelopeVolume  = 0;\n        this.envelopeLoop    = false;\n    }\n    \n    reset() {\n        super.reset();\n        \n        this.volume = 0;\n        this.envelopeCycle  = 0;\n        this.envelopeVolume = 0;\n    }\n    \n    //== Registers ======================================================================//\n    /** @type {number} */\n    get volume() {\n        return this.envelopeEnabled ? this.envelopeVolume : this.constantVolume;\n    }\n    set volume(value) {\n        if (value > 0x0F) {\n            this.lengthCounterHalt =\n            this.envelopeLoop      = (value & 0x20) !== 0;\n            this.envelopeEnabled   = (value & 0x10) === 0;\n            this.envelopePeriod    =\n            this.constantVolume    = (value & 0x0F);\n        } else {\n            this.lengthCounterHalt = false;\n            this.envelopeLoop      = false;\n            this.envelopeEnabled   = true;\n            this.envelopePeriod    = value;\n            this.constantVolume    = value;\n        }\n    }\n    \n    /** @type {number} */\n    get length() {\n        return super.length;\n    }\n    set length(value) {\n        this.envelopeReset = true;\n        \n        super.length = value;\n    }\n    \n    //== Execution ======================================================================//\n    doQuarter() {\n        if (this.envelopeReset) {\n            this.envelopeCycle  = this.envelopePeriod;\n            this.envelopeVolume = 0xF;\n            this.envelopeReset  = false;\n        } else if (this.envelopeCycle > 0) {\n            this.envelopeCycle--;\n        } else {\n            this.envelopeCycle = this.envelopePeriod;\n            if (this.envelopeVolume > 0) {\n                this.envelopeVolume--;\n            } else if (this.envelopeLoop) {\n                this.envelopeVolume = 0xF;\n            }\n        }\n    }\n}\n\nexport default EnvelopeGenerator;\n","import LengthCounter from './LengthCounter.js';\n\n/**\n * The linear counter is an extra duration timer of higher accuracy than the length\n * counter.\n */\nexport class LinearCounter extends LengthCounter {\n    constructor() {\n        super();\n        \n        this.linearCounter        = 0;\n        this.linearCounterMax     = 0;\n        this.linearCounterReset   = false;\n        this.linearCounterControl = false;\n    }\n    \n    reset() {\n        super.reset();\n        \n        this.counter = 0;\n        this.linearCounter = 0;\n    }\n    \n    //== Registers ======================================================================//\n    /** @type {number} */\n    get counter() {\n        return this.linearCounter;\n    }\n    set counter(value) {\n        if (value >= 0x80) {\n            this.lengthCounterHalt    = true;\n            this.linearCounterControl = true;\n            this.linearCounterMax     = (value - 0x80);\n        } else {\n            this.lengthCounterHalt    = false;\n            this.linearCounterControl = false;\n            this.linearCounterMax     = value;\n        }\n    }\n    \n    /** @type {number} */\n    get length() {\n        return super.length;\n    }\n    set length(value) {\n        this.linearCounterReset = true;\n        \n        super.length = value;\n    }\n    \n    //== Execution ======================================================================//\n    doQuarter() {\n        if (this.linearCounterReset) {\n            this.linearCounter = this.linearCounterMax;\n        } else if (this.linearCounter > 0) {\n            this.linearCounter--;\n        }\n        \n        if (!this.linearCounterControl)\n            this.linearCounterReset = false;\n    }\n}\n\nexport default LinearCounter;\n","import EnvelopeGenerator from \"./EnvelopeGenerator.js\";\n\n/**\n * The sweep unit can be made to periodically adjust a Pulse channel's period up or down.\n */\nexport class SweepUnit extends EnvelopeGenerator {\n    /**\n     * @param {number} negateMode\n     */\n    constructor(negateMode) {\n        super();\n        \n        /** @private */\n        this.negateMode = negateMode;\n        \n        this.sweepEnabled = false;\n        this.sweepReset   = false;\n        this.sweepCycle   = 0;\n        this.sweepPeriod  = 0;\n        this.sweepNegate  = false;\n        this.sweepShift   = 0;\n    }\n    \n    reset() {\n        super.reset();\n        \n        this.sweep = 0;\n        this.sweepCycle = 0;\n    }\n    \n    //== Registers ======================================================================//\n    /** @type {number} */\n    get sweep() {\n        const timer = this.timer;\n        const sweep = timer >>> this.sweepShift;\n        return timer + (this.sweepNegate ? ((this.negateMode === 1) ? ~sweep : -sweep) : sweep);\n    }\n    set sweep(value) {\n        this.sweepEnabled = (value & 0x80) !== 0;\n        this.sweepPeriod  = (value & 0x70) >>> 4;\n        this.sweepNegate  = (value & 0x08) !== 0;\n        this.sweepShift   = (value & 0x07);\n        this.sweepReset   = true;\n    }\n    \n    //== Execution ======================================================================//\n    doHalf() {\n        if (this.sweepCycle > 0) {\n            this.sweepCycle--;\n        } else {\n            if (this.sweepEnabled && this.sweepShift) {\n                if (this.timer >= 0x008 && this.sweep < 0x800)\n                    this.timerPeriod = this.sweep;\n            }\n            this.sweepCycle = this.sweepPeriod;\n        }\n        if (this.sweepReset) {\n            this.sweepCycle = this.sweepPeriod;\n            this.sweepReset = false;\n        }\n        \n        super.doHalf();\n    }\n}\n\nexport default SweepUnit;\n","import { SweepUnit } from \"./Units/index.js\";\n\n/** Duty cycle sequences lookup */\nconst dutySequences = [\n    [0, 0, 0, 0, 0, 0, 0, 1],\n    [0, 0, 0, 0, 0, 0, 1, 1],\n    [0, 0, 0, 0, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 0, 0],\n];\n\n/**\n * Pulse channels generate a square wave with variable duty.\n */\nexport class PulseChannel extends SweepUnit {\n    /**\n     * @param {1|2} id The behavior of the two pulse channels differs in the effect\n     * of the negate mode of their sweep units\n     */\n    constructor(id) {\n        super(id);\n        \n        /** @private */\n        this.dutyCycle = 0;\n        /** @private */\n        this.duty = [0,0,0,0,0,0,0,0];\n    }\n    \n    //== Registers ======================================================================//\n    /** @type {number} */\n    get volume() {\n        return super.volume;\n    }\n    set volume(value) {\n        if (value > 0x3F) {\n            this.duty = dutySequences[(value & 0xC0) >>> 6];\n        } else {\n            this.duty = dutySequences[0];\n        }\n        super.volume = value;\n    }\n    \n    /** @type {number} */\n    get length() {\n        return super.length;\n    }\n    set length(value) {\n        this.dutyCycle = 0;\n        \n        this.timerPeriod = (this.timerPeriod & 0x0FF) | ((value & 0x07) << 8);\n        \n        super.length = value;\n    }\n    \n    //== Registers access ===============================================================//\n    /**\n     * @param {number} address 16-bit address between 0x4000-0x4007\n     * @param {number} data 8-bit data\n     */\n    write(address, data) {\n        switch (address) {\n        case 0x4000: case 0x4004: this.volume = data; break;\n        case 0x4001: case 0x4005: this.sweep  = data; break;\n        case 0x4002: case 0x4006: this.timer  = data; break;\n        case 0x4003: case 0x4007: this.length = data; break;\n        }\n    }\n    \n    //== Execution ======================================================================//\n    doCycle() {\n        if (--this.timerCycle <= 0) {\n            this.timerCycle = (this.timerPeriod + 1);\n            \n            this.dutyCycle++;\n            if (this.dutyCycle >= 8)\n                this.dutyCycle = 0;\n        }\n    }\n    \n    //== Output =========================================================================//\n    /**\n     * 4-bit output value\n     * @type {number}\n     */\n    get output() {\n        if (this.enabled && this.timer >= 0x008 && this.sweep < 0x800) {\n            return this.volume * this.duty[this.dutyCycle];\n        } else {\n            return 0;\n        }\n    }\n}\n\nexport default PulseChannel;\n","import { LinearCounter } from './Units/index.js';\n\n/** Output values lookup */\nconst values = [\n    15, 14, 13, 12, 11, 10, 9, 8, 7, 6,  5,  4,  3,  2,  1,  0,\n    0,  1,  2,  3,  4,  5,  6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n];\n\n/**\n * Triangle channel generates a pseudo-triangle wave.\n */\nexport class TriangleChannel extends LinearCounter {\n    constructor() {\n        super();\n        \n        /** @private */\n        this.phase = 0;\n    }\n    \n    reset() {\n        super.reset();\n        \n        this.phase = 0;\n    }\n    \n    //== Registers ======================================================================//\n    /** @type {number} */\n    get length() {\n        return super.length;\n    }\n    set length(value) {\n        this.timerPeriod = (this.timerPeriod & 0x0FF) | ((value & 0x07) << 8);\n        \n        super.length = value;\n    }\n    \n    //== Registers access ===============================================================//\n    /**\n     * @param {number} address 16-bit address between 0x4008-0x400B\n     * @param {number} data 8-bit data\n     */\n    write(address, data) {\n        switch (address) {\n        case 0x4008: this.counter = data; break;\n        case 0x400A: this.timer   = data; break;\n        case 0x400B: this.length  = data; break;\n        }\n    }\n    \n    //== Execution ======================================================================//\n    doCycle() {\n        this.timerCycle -= 2;\n        if (this.timerCycle <= 0) {\n            this.timerCycle = (this.timer + 1);\n            \n            if (this.length && this.counter && this.timer > 3) {\n                const phase = this.phase + 1;\n                if (phase < 32)\n                    this.phase = phase;\n                else\n                    this.phase = 0;\n            }\n        }\n    }\n    \n    //== Output =========================================================================//\n    /**\n     * 4-bit output value\n     * @type {number}\n     */\n    get output() {\n        return values[this.phase];\n    }\n}\n\nexport default TriangleChannel;\n","import { EnvelopeGenerator } from './Units/index.js';\n\n/** Timer period lookup */\nconst timerPeriods = [ // fixed to NTSC for now\n    4, 8, 16, 32, 64, 96, 128, 160, 202, 254, 380, 508, 762, 1016, 2034, 4068\n];\n\n/**\n * Noise channel generates pseudo-random 1-bit noise at 16 different frequencies.\n */\nexport class NoiseChannel extends EnvelopeGenerator {\n    constructor() {\n        super();\n        \n        this.timerMode = false;\n        \n        /** @private */\n        this.shiftRegister = 1;\n    }\n    \n    //== Registers ======================================================================//\n    \n    /** @type {number} */\n    get timer() {\n        return this.timerPeriod;\n    }\n    set timer(value) {\n        if (value > 0x0F) {\n            this.timerMode   = (value >= 0x80);\n            this.timerPeriod = timerPeriods[value & 0x0F];\n        } else {\n            this.timerMode   = false;\n            this.timerPeriod = timerPeriods[value];\n        }\n    }\n    \n    //== Registers access ===============================================================//\n    /**\n     * @param {number} address 16-bit address between 0x400C-0x400F\n     * @param {number} data 8-bit data\n     */\n    write(address, data) {\n        switch (address) {\n        case 0x400C: this.volume = data; break;\n        case 0x400E: this.timer  = data; break;\n        case 0x400F: this.length = data; break;\n        }\n    }\n    \n    //== Execution ======================================================================//\n    doCycle() {\n        if (--this.timerCycle <= 0) {\n            this.timerCycle = (this.timerPeriod + 1);\n            \n            const shiftRegister = this.shiftRegister;\n            let feedback = (shiftRegister & 1);\n            if (this.timerMode)\n                feedback ^= ((shiftRegister >>> 6) & 1);\n            else\n                feedback ^= ((shiftRegister >>> 1) & 1);\n            \n            this.shiftRegister = (shiftRegister >>> 1) | (feedback << 14);\n        }\n    }\n    \n    //== Output =========================================================================//\n    /**\n     * 4-bit output value\n     * @type {number}\n     */\n    get output() {\n        if (this.enabled && !(this.shiftRegister & 1)) {\n            return this.volume;\n        } else {\n            return 0;\n        }\n    }\n}\n\nexport default NoiseChannel;\n","/** Timer period lookup */\nconst timerPeriods = [ // fixed to NTSC for now\n    428, 380, 340, 320, 286, 254, 226, 214, 190, 160, 142, 128, 106, 84, 72, 54\n];\n\n/**\n * Delta modulation channel outputs a 7-bit PCM signal.\n */\nexport class DMC {\n    /**\n     * @param {import('../NES.js').NES} bus\n     */\n    constructor(bus) {\n        /** @private */\n        this.bus = bus;\n        \n        this.timerCycle  = 0;\n        this.timerPeriod = timerPeriods[0];\n        \n        /** A negative value means empty */\n        this.sampleBuffer  = -1;\n        this.sampleAddress = 0xC000;\n        this.sampleLength  = 1;\n        this.sampleLeft    = 0;\n        this.sampleLoop    = false;\n        \n        /** A negative value means empty */\n        this.shiftRegister      = -1;\n        this.shiftRegisterCycle = 0;\n        \n        this.irqEnabled = false;\n        this.irq        = false;\n        \n        /**\n         * 7-bit output value\n         * @type {number}\n         */\n        this.output = 0;\n    }\n    \n    reset() {\n        this.timerCycle = 0;\n        \n        this.enabled = false;\n        this.rate    = 0;\n        this.load    = 0;\n        this.address = 0;\n        this.length  = 0;\n    }\n    \n    //===================================================================================//\n    /** @type {boolean} */\n    get enabled() {\n        return this.sampleLeft > 0;\n    }\n    set enabled(value) {\n        if (value) {\n            if (this.sampleLeft === 0)\n                this.sampleLeft = this.sampleLength;\n        } else {\n            this.sampleLeft = 0;\n        }\n        this.irq = false;\n    }\n    \n    //== Interrupt ======================================================================//\n    /** @private */\n    doIRQ() {\n        this.irq = true;\n        this.bus.cpu.doIRQ();\n    }\n    \n    //== Registers ======================================================================//\n    /** @type {number} */\n    get rate() {\n        return this.timerPeriod;\n    }\n    set rate(value) {\n        if (value > 0x0F) {\n            this.irqEnabled  = (value & 0x80) !== 0;\n            this.sampleLoop  = (value & 0x40) !== 0;\n            this.timerPeriod = timerPeriods[value & 0x0F];\n        } else {\n            this.irqEnabled  = false;\n            this.sampleLoop  = false;\n            this.timerPeriod = timerPeriods[value];\n        }\n        \n        if (!this.irqEnabled)\n            this.irq = false;\n    }\n    \n    /** @type {number} */\n    get load() {\n        return this.output;\n    }\n    set load(value) {\n        if (value >= 0x80)\n            this.output = value - 0x80;\n        else\n            this.output = value;\n    }\n    \n    /** @type {number} */\n    get address() {\n        return this.sampleAddress;\n    }\n    set address(value) {\n        this.sampleAddress = 0xC000 + (value * 64);\n    }\n    \n    /** @type {number} */\n    get length() {\n        return this.sampleLength;\n    }\n    set length(value) {\n        this.sampleLength = (value * 16) + 1;\n    }\n    \n    //== Registers access ===============================================================//\n    /**\n     * @param {number} address 16-bit address between 0x4010-0x4013\n     * @param {number} data 8-bit data\n     */\n    write(address, data) {\n        switch (address) {\n        case 0x4010: this.rate    = data; break;\n        case 0x4011: this.load    = data; break;\n        case 0x4012: this.address = data; break;\n        case 0x4013: this.length  = data; break;\n        }\n    }\n    \n    //== Execution ======================================================================//\n    doCycle() {\n        const timerCycle = this.timerCycle - 2;\n        if (timerCycle <= 0) {\n            this.timerCycle = this.timerPeriod;\n            this.updateSampleBuffer();\n            this.updateShiftRegister();\n            this.updateOutput();\n        } else {\n            this.timerCycle = timerCycle;\n        }\n    }\n    \n    /** @private */\n    updateSampleBuffer() {\n        if (this.sampleBuffer < 0 && this.enabled) {\n            let sampleLeft = this.sampleLeft;\n            let sampleLength = this.sampleLength;\n            \n            const index = sampleLength - sampleLeft;\n            this.sampleBuffer = this.bus.cpu.read(this.sampleAddress + index);\n            \n            if (--sampleLeft > 0) {\n                this.sampleLeft = sampleLeft;\n            } else if (this.sampleLoop) {\n                this.sampleLeft = sampleLength;\n            } else {\n                this.sampleLeft = 0;\n                \n                if (this.irqEnabled)\n                    this.doIRQ();\n            }\n        }\n    }\n    \n    /** @private */\n    updateShiftRegister() {\n        if (--this.shiftRegisterCycle <= 0) {\n            this.shiftRegisterCycle = 8;\n            this.shiftRegister = this.sampleBuffer;\n            this.sampleBuffer = -1;\n        }\n    }\n    \n    /** @private */\n    updateOutput() {\n        const shiftRegister = this.shiftRegister;\n        if (shiftRegister >= 0) {\n            const output = this.output;\n            \n            if (shiftRegister & 1) {\n                if (output <= 125)\n                    this.output = output + 2;\n            } else {\n                if (output >= 2)\n                    this.output = output - 2;\n            }\n            \n            this.shiftRegister = shiftRegister >>> 1;\n        }\n    }\n}\n\nexport default DMC;\n","/** @typedef {import('./NES.js').NES} NES */\n\nimport { Powered } from './Power.js';\nimport {\n    PulseChannel,\n    TriangleChannel,\n    NoiseChannel,\n    DMC\n} from './Audio/index.js';\n\nconst cyclesFrequency = 1786830 / 2;\n\nconst FOURSTEP = 0x00;\nconst FIVESTEP = 0x80;\n\nexport class APU extends Powered {\n    /**\n     * @param {NES} bus\n     */\n    constructor(bus) {\n        super();\n        \n        /** @private */\n        this.bus = bus;\n        \n        /** Pulse Channel 1 */\n        this.pulse1   = new PulseChannel(1);\n        /** Pulse Channel 2 */\n        this.pulse2   = new PulseChannel(2);\n        /** Triangle Channel */\n        this.triangle = new TriangleChannel;\n        /** Noise Channel */\n        this.noise    = new NoiseChannel;\n        /** Delta Modulation Channel */\n        this.dmc      = new DMC(bus);\n        \n        this.status = 0;\n        \n        /** If IRQ is disabled at the moment */\n        this.irqDisabled = false;\n        /** If an IRQ has happened. This is cleared after reading 0x4015 */\n        this.irq         = false;\n        \n        /** @private */\n        this.counterMode = FOURSTEP;\n        \n        /** @private */\n        this.toggle = true;\n        this.cycle  = 0;\n        \n        /** @private */\n        this.resetDelay = 0;\n        \n        /** @private */\n        this.cyclesPerSample = 0;\n        /** @private */\n        this.cyclesUntilSample = Infinity;\n    }\n    \n    //===================================================================================//\n    \n    powerOn() {\n        this.bus.audio.start();\n        \n        this.cyclesPerSample   = cyclesFrequency / this.bus.audio.sampleRate;\n        this.cyclesUntilSample = this.cyclesPerSample * this.bus.audio.speedAdjustment;\n        \n        return super.powerOn();\n    }\n    powerOff() {\n        this.bus.audio.stop();\n        \n        return super.powerOff();\n    }\n    \n    reset() {\n        this.pulse1.reset();\n        this.pulse2.reset();\n        this.triangle.reset();\n        this.noise.reset();\n        this.dmc.reset();\n        \n        this.counter = 0;\n        \n        this.irq = false;\n    }\n    \n    //== Interrupt ======================================================================//\n    /** @private */\n    doIRQ() {\n        this.irq = true;\n        this.bus.cpu.doIRQ();\n    }\n    \n    //== Registers ======================================================================//\n    /**\n     * 0x4015 Status register\n     * @type {number}\n     * @private\n     */\n    get status() {\n        let value = (this.pulse1.enabled   ? 0x01 : 0) +\n                    (this.pulse2.enabled   ? 0x02 : 0) +\n                    (this.triangle.enabled ? 0x04 : 0) +\n                    (this.noise.enabled    ? 0x08 : 0) +\n                    (this.dmc.enabled      ? 0x10 : 0) +\n                    (this.dmc.irq          ? 0x80 : 0) +\n                    (this.irq              ? 0x40 : 0);\n        this.irq     = false;\n        \n        return value;\n    }\n    /** @private */\n    set status(value) {\n        if (value) {\n            this.pulse1.enabled   = !!(value & 0x01);\n            this.pulse2.enabled   = !!(value & 0x02);\n            this.triangle.enabled = !!(value & 0x04);\n            this.noise.enabled    = !!(value & 0x08);\n            this.dmc.enabled      = !!(value & 0x10);\n        } else {\n            this.pulse1.enabled   = false;\n            this.pulse2.enabled   = false;\n            this.triangle.enabled = false;\n            this.noise.enabled    = false;\n            this.dmc.enabled      = false;\n        }\n    }\n    \n    /**\n     * 0x4017 Frame counter\n     * @type {number}\n     * @private\n     */\n    get counter() {\n        return this.counterMode;\n    }\n    /** @private */\n    set counter(value) {\n        if (value) {\n            if (value >= 0x80) {\n                this.counterMode = FIVESTEP;\n                this.irqDisabled = (value >= 0xC0);\n                this.doQuarter();\n                this.doHalf();\n            } else {\n                this.counterMode = FOURSTEP;\n                this.irqDisabled = (value >= 0x40);\n            }\n            \n            if (this.irqDisabled)\n                this.irq = false;\n        } else {\n            this.counterMode = FOURSTEP;\n            this.irqDisabled = false;\n        }\n        this.resetDelay = 2;\n    }\n    \n    /** @readonly @type {boolean} */\n    get fourStepCounterMode() {\n        return this.counterMode === FOURSTEP;\n    }\n    /** @readonly @type {boolean} */\n    get fiveStepCounterMode() {\n        return this.counterMode === FIVESTEP;\n    }\n    \n    //== Registers access ===============================================================//\n    /**\n     * @param {number} address 16-bit address\n     * @returns {number}\n     */\n    read(address) {\n        if (address === 0x4015)\n            return this.status;\n        else\n            return 0;\n    }\n    /**\n     * @param {number} address 16-bit address between 0x4000-0x4017\n     * @param {number} data 8-bit data\n     */\n    write(address, data) {\n        if (address <= 0x4003)\n            this.pulse1.write(address, data);\n        else if (address <= 0x4007)\n            this.pulse2.write(address, data);\n        else if (address <= 0x400B)\n            this.triangle.write(address, data);\n        else if (address <= 0x400F)\n            this.noise.write(address, data);\n        else if (address <= 0x4013)\n            this.dmc.write(address, data);\n        else if (address === 0x4015)\n            this.status = data;\n        else if (address === 0x4017)\n            this.counter = data;\n    }\n    \n    //== Execution ======================================================================//\n    /**\n     * @param {number} count The number of (CPU) cycles to execute\n     */\n    doCycles(count) {\n        while (count--) {\n            if ((this.toggle = !this.toggle)) {\n                if (this.resetDelay > 0) {\n                    if (--this.resetDelay === 0)\n                        this.cycle = 0;\n                }\n                this.doCycle();\n            }\n        }\n    }\n    \n    doCycle() {\n        const cycle = this.cycle++;\n        if (cycle <= 7457) {\n            if (cycle === 7457) {\n                this.doQuarter();\n            }\n        } else if (cycle <= 14914) {\n            if (cycle === 14914) {\n                this.doQuarter();\n                this.doHalf();\n            }\n        } else if (cycle <= 22371) {\n            if (cycle === 22371) {\n                this.doQuarter();\n            }\n        } else if (cycle >= 29828) {\n            if (cycle === 29828 && this.fourStepCounterMode) {\n                this.doQuarter();\n                this.doHalf();\n                \n                if (!this.irqDisabled)\n                    this.doIRQ();\n                \n                this.cycle = 0;\n            } else if (cycle === 37281) {\n                this.doQuarter();\n                this.doHalf();\n                \n                this.cycle = 0;\n            }\n        }\n        this.pulse1.doCycle();\n        this.pulse2.doCycle();\n        this.triangle.doCycle();\n        this.noise.doCycle();\n        this.dmc.doCycle();\n        \n        if (--this.cyclesUntilSample <= 0) {\n            this.doSample();\n            this.cyclesUntilSample += this.cyclesPerSample * this.bus.audio.speedAdjustment;\n        }\n    }\n    \n    doQuarter() {\n        this.pulse1.doQuarter();\n        this.pulse2.doQuarter();\n        this.triangle.doQuarter();\n        this.noise.doQuarter();\n    }\n    \n    doHalf() {\n        this.pulse1.doHalf();\n        this.pulse2.doHalf();\n        this.triangle.doHalf();\n        this.noise.doHalf();\n    }\n    \n    //== Output =========================================================================//\n    /** @private */\n    doSample() {\n        const pulses = this.pulse1.output + this.pulse2.output;\n        const others = 3*this.triangle.output + 2*this.noise.output + this.dmc.output;\n        \n        this.bus.audio.writeSample(pulsesSamples[pulses] + othersSamples[others]);\n    }\n}\n\nconst pulsesSamples = new Float32Array(31);\nfor (let i = 0; i < 31; i++ ) {\n    pulsesSamples[i] = 95.52 / (8128.0 / i + 100);\n}\nconst othersSamples = new Float32Array(203);\nfor (let i = 0; i < 203; i++ ) {\n    othersSamples[i] = 163.67 / (24329.0 / i + 100);\n}\n\nexport default APU;\n","/** @typedef {import('./NES.js').NES} NES */\n\nimport { Powered } from './Power.js';\n\nexport class PPU extends Powered {\n    /**\n     * @param {NES} bus\n     */\n    constructor(bus) {\n        super();\n        \n        /** @private */\n        this.bus = bus;\n        \n        this.ntsc = true;\n        \n        /** Internal Video RAM (or Character Internal RAM (CI-RAM) )\n         * @type {[Uint8Array, Uint8Array]} */\n        this.vram = [new Uint8Array(0x400), new Uint8Array(0x400)];\n        \n        /** Internal Palette memory (2x 16-bytes)\n         * @type {[Uint8Array, Uint8Array]} */\n        this.palette = [new Uint8Array(4*4), new Uint8Array(4*4)];\n        \n        //-----------------------------------------------------------------------//\n        /** @type {1|32} */\n        this.addressIncrement = 1;\n        /** @type {0x0000 | 0x1000} */\n        this.sprPatternTable  = 0x0000;\n        /** @type {0x0000 | 0x1000} */\n        this.bkgPatternTable  = 0x0000;\n        this.sprite8x16       = false;\n        this.nmiEnabled       = false;\n        \n        /** @type {8|16} @private */\n        this.spriteHeight     = 8;\n        \n        this.grayscale        = false;\n        this.showLeftMostBkg  = false;\n        this.showLeftMostSpr  = false;\n        this.showBackground   = false;\n        this.showSprites      = false;\n        this.emphasizeRed     = false;\n        this.emphasizeGreen   = false;\n        this.emphasizeBlue    = false;\n        \n        /** @private */\n        this.renderingEnabled = false;\n        \n        /**\n         * Set when a *Sprite Overflow* occurs,\n         * and cleared after *V-Blank*. */\n        this.spriteOverflow   = false;\n        /**\n         * Set when *Sprite-0 hit* occurs,\n         * and cleared after *V-Blank*. */\n        this.sprite0Hit       = false;\n        /**\n         * Set when *V-Blank* occurs,\n         * and cleared after *V-Blank*, or by reading *$2002*. */\n        this.vblank           = false;\n        \n        /** Object Attribute Memory (256-bytes) */\n        this.oamPrimary       = new Uint8Array(64*4);\n        /** 8-bit wide - For accessing primary OAM through *$2004* and *DMA*. */\n        this.oamAddress       = 0x00;\n        \n        /**\n         * Internal buffer for Sprite rendering, can hold up to 8 sprites worth\n         * of metadata (32-bytes).\n         * @private */\n        this.oamSecondary     = new Uint8Array(8*4);\n        /** 5-bit wide - Used internally to access secondary OAM buffer.\n         * @private */\n        this.oamIndex         = 0x00;\n        \n        /** 3-bit wide */\n        this.fineScrollX      = 0x0;\n        /** 3-bit wide */\n        this.fineScrollY      = 0x0;\n        \n        /** @private */\n        this.writeToggle      = false;\n        \n        /** 16-bit wide */\n        this.addressBus       = 0x0000;\n        /**\n         * 16-bit wide - Used internally to allow atomic modifications of the\n         * 16-bit address bus.\n         * @private */\n        this.addressBuffer    = 0x0000;\n        \n        /**\n         * 8-bit wide - Used internally when accessing external data.\n         * @private */\n        this.readBuffer       = 0x00;\n        //-----------------------------------------------------------------------//\n        \n        //Buffers\n        /** @private */ this.bkgPixelsBuffer = new Uint32Array(16);\n        /** @private */ this.sprPixelsBuffer = new Uint32Array(8);\n        \n        //Layers\n        /** @private */ this.bkgLayer = this.bus.video.bkgLayer;\n        /** @private */ this.sprLayer = this.bus.video.sprBeforeLayer;\n        \n        //Used for Sprite0 hit detection\n        /** @private */ this.sprite0Layer = new Uint32Array(264);\n        /** @private */ this.sprite0      = false;\n    }\n    \n    //== Power ==========================================================================//\n    powerOn() {\n        this.control       = 0x00;   //$2000 Control\n        this.mask          = 0x00;   //$2001 Mask\n        this.sprite0Hit    = false;  //$2002 Status\n        this.OAMAddress    = 0x00;   //$2003 OAM address\n        this.fineScrollX   = 0x0;    //$2005 Scroll\n        this.fineScrollY   = 0x0;\n        this.addressBus    = 0x0000; //$2006 Address\n        this.addressBuffer = 0x0000;\n        this.readBuffer    = 0x00;   //$2007 Data\n        \n        this.writeToggle   = false;\n        \n        this.ntsc = (this.bus.game.metadata.tvSystem === \"NTSC\");\n        \n        this.bus.video.start();\n        \n        return super.powerOn();\n    }\n    powerOff() {\n        this.bus.video.stop();\n        \n        return super.powerOff();\n    }\n    \n    reset() {\n        this.control     = 0x00; //$2000 Control\n        this.mask        = 0x00; //$2001 Mask\n        this.fineScrollX = 0x0;  //$2005 Scroll\n        this.fineScrollY = 0x0;\n        this.readBuffer  = 0x00; //$2007 Data\n        \n        this.writeToggle = false;\n    }\n    \n    //== Vertical Blank =================================================================//\n    doVBlank() {\n        this.vblank = true;\n        if (this.nmiEnabled) this.bus.cpu.doNMI();\n    }\n    endVBlank() {\n        this.spriteOverflow = false;\n        this.sprite0Hit = false;\n        this.vblank = false;\n    }\n    \n    //== DMA ============================================================================//\n    /**\n     * Transfer 256-bytes from CPU memory at given address directly to OAM data.\n     * @param {number} address 16-bit address\n     */\n    doDMA(address) {\n        const cpu = this.bus.cpu;\n        for(let count = 0; count < 256; count++)\n            this.OAMData = cpu.read(address++);\n    }\n    \n    //== Registers ======================================================================//\n    /**\n     * 0x2000 Control\n     * @param {number} value 8-bit value\n     * @private\n     */\n    set control(value) {\n        this.addressBuffer &= ~0x0C00; // b1111.0011.1111.1111\n        if (value) {\n            this.addressBuffer |= (value & 0x3)<<10;\n            \n            this.addressIncrement = (value & 0x04) ? 32 : 1;\n            this.sprPatternTable =  (value & 0x08) ? 0x1000 : 0x0000;\n            this.bkgPatternTable =  (value & 0x10) ? 0x1000 : 0x0000;\n            this.sprite8x16 =     !!(value & 0x20);\n            this.nmiEnabled =     !!(value & 0x80);\n        } else {\n            this.addressIncrement = 1;\n            this.sprPatternTable = 0x0000;\n            this.bkgPatternTable = 0x0000;\n            this.sprite8x16 = false;\n            this.nmiEnabled = false;\n        }\n        this.spriteHeight = this.sprite8x16 ? 16 : 8;\n    }\n    \n    /**\n     * 0x2001 Mask\n     * @param {number} value 8-bit value\n     * @private\n     */\n    set mask(value) {\n        if (value) {\n            this.grayscale       = !!(value & 0x01);\n            this.showLeftMostBkg = !!(value & 0x02);\n            this.showLeftMostSpr = !!(value & 0x04);\n            this.showBackground  = !!(value & 0x08);\n            this.showSprites     = !!(value & 0x10);\n            this.emphasizeRed    = !!(value & (this.ntsc ? 0x20 : 0x40));\n            this.emphasizeGreen  = !!(value & (this.ntsc ? 0x40 : 0x20));\n            this.emphasizeBlue   = !!(value & 0x80);\n            \n            this.renderingEnabled = !!(value & 0x18);\n        } else {\n            this.grayscale       = false;\n            this.showLeftMostBkg = false;\n            this.showLeftMostSpr = false;\n            this.showBackground  = false;\n            this.showSprites     = false;\n            this.emphasizeRed    = false;\n            this.emphasizeGreen  = false;\n            this.emphasizeBlue   = false;\n            \n            this.renderingEnabled = false;\n        }\n    }\n    \n    /**\n     * 0x2002 Status\n     * \n     * Reading this register is not idempotent as it resets *V-Blank* afterward.\n     * @type {number} 8-bit value\n     * @private\n     */\n    get status() {\n        let value = (this.spriteOverflow ? 0x20 : 0) +\n                    (this.sprite0Hit ? 0x40 : 0) +\n                    (this.vblank ? 0x80 : 0);\n        this.vblank = false;\n        this.writeToggle = false;\n        \n        return value;\n    }\n    \n    /**\n     * 0x2003 OAM address\n     * @param {number} value 8-bit value\n     * @private\n     */\n    set OAMAddress(value) {\n        this.oamAddress = value;\n    }\n    \n    /**\n     * 0x2004 OAM data\n     * \n     * Writing to this register automatically increments OAM address.\n     * @type {number} 8-bit value\n     * @private\n     */\n    get OAMData() {\n        return this.oamPrimary[this.oamAddress];\n    }\n    /** @private */\n    set OAMData(value) {\n        this.oamPrimary[this.oamAddress++] = value;\n        if (this.oamAddress > 0xFF) this.oamAddress = 0x00;\n    }\n    \n    /**\n     * 0x2005 Scroll\n     * @param {number} value 8-bit value\n     * @private\n     */\n    set scroll(value) {\n        const toggle = this.writeToggle;\n        \n        let addressBuffer = this.addressBuffer;\n        if (toggle) {\n            // Vertical scroll\n            addressBuffer &= 0x0C1F; // b0000.1100.0001.1111\n            addressBuffer |= ((value & 0x07) << 12);\n            addressBuffer |= ((value & 0xF8) << 2);\n            \n            this.fineScrollY = value & 0x07;\n        } else {\n            // Horizontal scroll\n            addressBuffer &= 0x7FE0; // b0111.1111.1110.0000\n            addressBuffer |= (value >>> 3);\n            \n            this.fineScrollX = value & 0x07;\n        }\n        this.addressBuffer = addressBuffer;\n        \n        this.writeToggle = !toggle;\n    }\n    \n    /**\n     * 0x2006 Address\n     * @param {number} value 8-bit value\n     * @private\n     */\n    set address(value) {\n        const toggle = this.writeToggle;\n        \n        if (toggle) {\n            this.addressBuffer = (this.addressBuffer & 0xff00) | value;\n            this.addressBus = this.addressBuffer;\n        } else {\n            value = (value & 0x3f) << 8;\n            this.addressBuffer = (this.addressBuffer & 0x00ff) | value;\n        }\n        \n        this.writeToggle = !toggle;\n    }\n    \n    /**\n     * 0x2007 Data\n     * \n     * Reading or writing to this register automatically increments the address\n     * bus by the amount set in *$2000*.\n     * @type {number} 8-bit value\n     * @private\n     */\n    get data() {\n        const address = this.addressBus;\n        \n        let value;\n        if (address >= 0x3F00)\n            value = this.readPalette(address);\n        else\n            value = this.readBuffer;\n        \n        this.readBuffer = this.readData(address);\n        this.addressBus = address + this.addressIncrement;\n        \n        return value;\n    }\n    /** @private */\n    set data(value) {\n        const address = this.addressBus;\n        if (address >= 0x3F00)\n            this.writePalette(address, value);\n        else\n            this.writeData(address, value);\n        \n        this.addressBus = address + this.addressIncrement;\n    }\n    \n    //== Registers access ===============================================================//\n    /**\n     * @param {number} address 16-bit address\n     * @returns {number} 8-bit data\n     */\n    read(address) {\n        if (address > 0x2007) address &= 0x2007;\n        switch (address) {\n        case 0x2002: return this.status;\n        case 0x2004: return this.OAMData;\n        case 0x2007: return this.data;\n        default:     return 0x00;\n        }\n    }\n    /**\n     * @param {number} address 16-bit address\n     * @param {number} data 8-bit data\n     */\n    write(address, data) {\n        if (address > 0x2007) address &= 0x2007;\n        switch (address) {\n        case 0x2000: this.control    = data; break;\n        case 0x2001: this.mask       = data; break;\n        case 0x2003: this.OAMAddress = data; break;\n        case 0x2004: this.OAMData    = data; break;\n        case 0x2005: this.scroll     = data; break;\n        case 0x2006: this.address    = data; break;\n        case 0x2007: this.data       = data; break;\n        }\n    }\n    \n    //== Data ===========================================================================//\n    /**\n     * @param {number} address 16-bit address\n     * @returns {number} 8-bit data\n     * @private\n     */\n    readData(address) {\n        const cartridge = this.bus.game.cartridge;\n        if (cartridge.ciramEnabled(address))\n            return this.vram[cartridge.ciramA10(address)][address & 0x3FF];\n        else\n            return cartridge.ppuRead(address);\n    }\n    /**\n     * @param {number} address 16-bit address\n     * @param {number} data 8-bit data\n     * @private\n     */\n    writeData(address, data) {\n        const cartridge = this.bus.game.cartridge;\n        if (cartridge.ciramEnabled(address))\n            this.vram[cartridge.ciramA10(address)][address & 0x3FF] = data;\n        else\n            cartridge.ppuWrite(address, data);\n    }\n    \n    //== Palettes =======================================================================//\n    /** The first color of background palette\n     * @type {number} 6-bit color index */\n    get backdrop() { return this.palette[0][0]; }\n    \n    /** Background palette (4x 4-bytes)*/\n    get bkgPalette() { return this.palette[0]; }\n    /** Sprite palette (4x 4-bytes) */\n    get sprPalette() { return this.palette[1]; }\n    \n    /**\n     * @param {number} address 16-bit address\n     * @returns {number} 6-bit color index\n     * @private\n     */\n    readPalette(address) {\n        if (address & 0x3)\n            return this.palette[(address & 0x10) >>> 4][address & 0x0F];\n        else\n            return this.backdrop;\n    }\n    /**\n     * @param {number} address 16-bit address\n     * @param {number} data 6-bit color index\n     * @private\n     */\n    writePalette(address, data) {\n        if (data > 0x3F) data &= 0x3F;\n        if (address & 0x3)\n            this.palette[(address & 0x10) >>> 4][address & 0x0F] = data;\n        else\n            this.bkgPalette[address & 0x0F] = data;\n    }\n    \n    //== Scrolling ======================================================================//\n    incrementX() {\n        if (!this.renderingEnabled) return;\n        \n        let addressBus = this.addressBus;\n        if ((addressBus & 0x001F) === 31) {\n            addressBus &= 0x7FE0; // b0111.1111.1110.0000\n            addressBus ^= 0x0400; // b0000.0100.0000.0000\n        } else {\n            addressBus++;\n        }\n        this.addressBus = addressBus;\n    }\n    incrementY() {\n        if (!this.renderingEnabled) return;\n        \n        let addressBus = this.addressBus;\n        if (addressBus < 0x7000) {\n            addressBus += 0x1000;\n            this.fineScrollY++;\n        } else {\n            addressBus -= 0x7000; \n            \n            const coarseY = (addressBus & 0x03E0);\n            if (coarseY === 0x03A0) { // 29 << 5\n                addressBus &= 0x0C1F;\n                addressBus ^= 0x0800;\n            } else\n            if (coarseY === 0x03E0)   // 31 << 5\n                addressBus &= 0xFC1F;\n            else\n                addressBus += 0x0020;\n            \n            this.fineScrollY = addressBus >>> 12;\n        }\n        this.addressBus = addressBus;\n    }\n    \n    resetX() {\n        if (!this.renderingEnabled) return;\n        \n        let addressBus = this.addressBus;            //  _yyy.nnYY.YYYX.XXXX\n        addressBus &= 0x7BE0;                        // b0111.1011.1110.0000\n        addressBus |= (this.addressBuffer & 0x041F); // b0000.0100.0001.1111\n        this.addressBus = addressBus;\n    }\n    resetY() {\n        if (!this.renderingEnabled) return;\n        \n        let addressBus = this.addressBus;            //  _yyy.nnYY.YYYX.XXXX\n        addressBus &= 0x041F;                        // b0000.0100.0001.1111\n        addressBus |= (this.addressBuffer & 0x7BE0); // b0111.1011.1110.0000\n        this.addressBus = addressBus;\n        \n        this.fineScrollY = addressBus >>> 12;\n    }\n    \n    //== Background =====================================================================//\n    /**\n     * @param {number} bus 16-bit address bus\n     * @returns {number} 8-bit pattern index\n     * @private\n     */\n    fetchNameTable(bus) {\n        const address = 0x2000 + (bus & 0x0FFF);\n        return this.readData(address);\n    }\n    /**\n     * @param {number} bus 16-bit address bus\n     * @returns {number} 2-bit palette index\n     * @private\n     */\n    fetchAttributeTable(bus) {\n        const address = 0x23C0 | (bus & 0x0C00) | (bus>>>4 & 0x0038) | (bus>>>2 & 0x0007);\n        let offset = 0;\n        if (bus & 0x0002) offset += 2;\n        if (bus & 0x0040) offset += 4;\n        return (this.readData(address) >>> offset) & 0x3;\n    }\n    /**\n     * @param {number} patternIndex 8-bit pattern index\n     * @param {number} row 3-bit fine Y-Scroll value\n     * @returns {number} 16-bit pattern\n     * @private\n     */\n    fetchBkgPatternTable(patternIndex, row) {\n        const address = this.bkgPatternTable + patternIndex*16 + row;\n        return this.readData(address)*256 + this.readData(address+8);\n    }\n    \n    /**\n     * @param {number} pattern 16-bit pattern\n     * @param {number} paletteIndex 2-bit palette index\n     * @private\n     */\n    fillBkgPixelsBuffer(pattern, paletteIndex) {\n        this.bkgPixelsBuffer.copyWithin(0, 8);\n        const target = this.bkgPixelsBuffer.subarray(8, 16);\n        \n        if (pattern) {\n            const colors = this.bus.video.colors;\n            const palette = paletteIndex * 4;\n            \n            for (let index = 0; index < 8; index++) {\n                const color = interpretPattern(pattern, index, false);\n                target[index] = color ? colors[this.bkgPalette[palette + color]] : 0;\n            }\n        } else {\n            target.fill(0);\n        }\n    }\n    \n    /** Fetch the next tile and fill the buffer. */\n    fetchTile() {\n        if (!this.showBackground) return;\n\n        const addressBus = this.addressBus;\n        \n        const patternIndex = this.fetchNameTable(addressBus);\n        const paletteIndex = this.fetchAttributeTable(addressBus);\n        \n        const pattern = this.fetchBkgPatternTable(patternIndex, this.fineScrollY);\n        \n        this.fillBkgPixelsBuffer(pattern, paletteIndex);\n    }\n    \n    /** Garbage fetch of a tile. */\n    fetchNullTile() {\n        if (!this.showBackground) return;\n        \n        const addressBus = this.addressBus;\n        \n        const patternIndex = this.fetchNameTable(addressBus);\n        this.fetchAttributeTable(addressBus);\n        this.fetchBkgPatternTable(patternIndex, this.fineScrollY);\n    }\n    /** Garbage fetch of 2 pattern indexes. */\n    fetchNullNTs() {\n        if (!this.showBackground) return;\n        \n        const addressBus = this.addressBus;\n        this.fetchNameTable(addressBus);\n        this.fetchNameTable(addressBus);\n    }\n    \n    /**\n     * Draw 8 pixels from the buffer, according to fine X scrolling, to the screen\n     * at given position.\n     * @param {number} dot\n     * @param {number} scanline\n     */\n    renderTile(dot, scanline) {\n        if (!this.showBackground) return;\n        \n        const offset = this.fineScrollX;\n        const pixels = this.bkgPixelsBuffer.subarray(offset, offset+8);\n        \n        if (!this.sprite0Hit) {\n            const sprite0Y = this.oamPrimary[0];\n            if ((sprite0Y < scanline+8) && (sprite0Y+8 > scanline)) {\n                const sprite0X = this.oamPrimary[3];\n                if ((sprite0X < dot+8) && (sprite0X+8 > dot)) {\n                    this.sprite0Hit = this.sprite0Layer.subarray(dot, dot+8).some(\n                        (pixel, i) => (pixel && pixels[i])\n                    );\n                }\n            }\n        }\n        \n        this.bkgLayer.writePixels(dot, scanline, pixels);\n    }\n    \n    //== Sprites ========================================================================//\n    clearSecondaryOAM() {\n        this.oamSecondary.fill(0xFF);\n        this.oamIndex = 0;\n    }\n    \n    /** @param {number} scanline */\n    evaluateSprites(scanline) {\n        const spritesList = this.oamPrimary;\n        const sprites     = this.oamSecondary;\n        \n        const height = this.spriteHeight;\n        \n        let y = 0, top = 0, bottom = 0;\n        while (this.oamAddress < 256) {\n            y = spritesList[this.oamAddress];\n            \n            top    = y + height;\n            bottom = y;\n            \n            if (this.oamIndex < 32) {\n                sprites[this.oamIndex] = y;\n                \n                if (scanline >= bottom && scanline < top) {\n                    if (this.oamAddress === 0) this.sprite0 = true;\n                    \n                    for (let i=1; i<4; i++)\n                        sprites[this.oamIndex+i] = spritesList[this.oamAddress+i];\n                    \n                    this.oamIndex += 4;\n                }\n            } else {\n                if (scanline >= bottom && scanline < top) {\n                    this.spriteOverflow = true;\n                    break;\n                }\n            }\n            this.oamAddress += 4;\n        }\n        this.oamIndex = 0;\n    }\n    \n    /**\n     * @param {number} patternIndex 8-bit pattern index\n     * @param {number} row 3-bit sprite row\n     * @returns {number} 16-bit pattern\n     * @private \n     */\n    fetchSprPatternTable(patternIndex, row) {\n        let offset = this.sprPatternTable;\n        if (this.sprite8x16) {\n            if (patternIndex & 0x1) {\n                offset = 0x1000;\n                patternIndex &= 0xFE;\n            } else {\n                offset = 0x0000;\n            }\n        }\n        const address = offset + patternIndex*16 + row;\n        return this.readData(address)*256 + this.readData(address+8);\n    }\n    \n    /**\n     * @param {number} pattern 16-bit pattern\n     * @param {number} paletteIndex 2-bit palette index\n     * @param {boolean} flip Is pattern flipped horizontally ?\n     * @returns {Uint32Array} The 8-pixels sprite buffer\n     * @private\n     */\n    fillSprPixelsBuffer(pattern, paletteIndex, flip) {\n        const target = this.sprPixelsBuffer;\n        \n        if (pattern) {\n            const colors = this.bus.video.colors;\n            const palette = paletteIndex * 4;\n            \n            for (let index = 0; index < 8; index++) {\n                const color = interpretPattern(pattern, index, flip);\n                target[index] = color ? colors[this.sprPalette[palette + color]] : 0;\n            }\n        } else {\n            target.fill(0);\n        }\n        return target;\n    }\n    \n    /**\n     * Fetch the next sprite and process it for the next scanline.\n     * @param {number} scanline\n     */\n    fetchSprite(scanline) {\n        if (!this.showSprites) return;\n        \n        const addressBus = this.addressBus;   //\n        this.fetchNameTable(addressBus);      // Garbage fetch\n        this.fetchAttributeTable(addressBus); //\n        \n        this.oamAddress = 0x00;\n        \n        const sprites = this.oamSecondary;\n        \n        const y          = sprites[this.oamIndex++];\n        let patternIndex = sprites[this.oamIndex++];\n        let attributes   = sprites[this.oamIndex++];\n        const x          = sprites[this.oamIndex++];\n        \n        let row = scanline - y;\n        // Vertical Flip\n        if (attributes >= 0x80) {\n            row = this.spriteHeight - row - 1;\n            attributes -= 0x80;\n        }\n        \n        let flip = false;\n        // Horizontal Flip\n        if (attributes >= 0x40) {\n            flip = true;\n            attributes -= 0x40;\n        }\n        \n        // Behind Background\n        if (attributes >= 0x20) {\n            this.sprLayer = this.bus.video.sprBehindLayer;\n            attributes -= 0x20;\n        } else\n            this.sprLayer = this.bus.video.sprBeforeLayer;\n        \n        if (attributes > 0x03)\n            attributes &= 0x03;\n        \n        // 8x16 Sprites\n        if (row >= 8) {\n            row -= 8;\n            patternIndex++;\n        }\n        \n        const pattern = this.fetchSprPatternTable(patternIndex, row);\n        const pixels  = this.fillSprPixelsBuffer(pattern, attributes, flip);\n        \n        if (this.sprite0) {\n            this.sprite0Layer.set(pixels, x);\n            this.sprite0 = false;\n        }\n        \n        this.sprLayer.writePixels(x, scanline+1, pixels);\n    }\n    \n    /** Garbage fetch of a sprite. */\n    fetchNullSprite() {\n        if (!this.showSprites) return;\n        \n        const addressBus = this.addressBus;\n        this.fetchNameTable(addressBus);\n        this.fetchAttributeTable(addressBus);\n        \n        this.fetchSprPatternTable(0x00, 0);\n    }\n    \n    //== Output =========================================================================//\n    printFrame() {\n        this.bus.video.drawImage(this.backdrop);\n    }\n}\n\n/** @type {Readonly<Record<number, number>>} */\nconst bitplaneLookup = Object.freeze({\n    0x0000: 0,\n    0x0100: 1,\n    0x8000: 1,\n    0x0001: 2,\n    0x0080: 2,\n    0x0101: 3,\n    0x8080: 3,\n});\n\n/**\n * Extract a single pixel from the given *pattern*.\n * @param {number} pattern 16-bit pattern\n * @param {number} index The index of the pixel to extract\n * @param {boolean} flip Is pattern flipped horizontally ?\n * @returns {number} 2-bit color index\n */\nfunction interpretPattern(pattern, index, flip = false) {\n    if (flip)\n        return bitplaneLookup[(pattern >> index) & 0x0101];\n    else\n        return bitplaneLookup[(pattern << index) & 0x8080];\n}\n\nexport default PPU;\n","/**\n * @typedef {import('./NES.js').NES} NES\n * @typedef {import('./CPU.js').CPU} CPU\n * @typedef {import('./PPU.js').PPU} PPU\n */\n\nimport { Powered } from './Power.js';\n\nclass Stats extends Powered {\n    constructor() {\n        super();\n        \n        /** Number of Frames properly rendered Per Second. */\n        this.fps = 60;\n        /** Emulation performance in percentage of the real hardware speed. */\n        this.performance = 1.0;\n        \n        let frameTimeThisSecond = 0.0;\n        let framesThisSecond = 0;\n        let fps = 60;\n        \n        const update = () => {\n            this.performance = 1000 / frameTimeThisSecond;\n            this.fps = fps;\n            \n            frameTimeThisSecond = 0.0;\n            framesThisSecond = 0;\n            fps = 60;\n        };\n        \n        /** @param {number} startTime @protected */\n        this.addFrame = (startTime) => {\n            frameTimeThisSecond += (performance.now() - startTime);\n            \n            if (++framesThisSecond >= fps)\n                update();\n        };\n        /** @protected */\n        this.dropFrame = () => {\n            if (--fps <= framesThisSecond)\n                update();\n        };\n    }\n}\n\nconst frameTime = 1000/60;\n\nconst renderLines = 240;\nconst vblankStart = 241;\nconst vblankEnd   = 261;\n\nconst cyclesPerScanline = 341/3;\nconst cyclesPerFrame    = (341*261 + 340.5)/3;\n\nconst cyclesBeforeVBlankStart = vblankStart * cyclesPerScanline;\nconst cyclesBeforeVBlankEnd   = vblankEnd * cyclesPerScanline;\n\nexport class Engine extends Stats {\n    /**\n     * @param {NES} bus\n     */\n    constructor(bus) {\n        super();\n        \n        /** @private */\n        this.bus = bus;\n        \n        /** @private */ this.firstLoop = this.firstLoop.bind(this);\n        /** @private */ this.mainLoop  = this.mainLoop.bind(this);\n        \n        /** @private */\n        this.runningLoop = 0;\n        /** @private */\n        this.lastTime = 0;\n        \n        this.isPaused = false;\n    }\n    \n    //=======================================================================================//\n    \n    powerOn() {\n        this.coldBoot();\n        \n        this.isPaused = false;\n        return super.powerOn();\n    }\n    powerOff() {\n        cancelAnimationFrame(this.runningLoop);\n        this.runningLoop = 0;\n        \n        this.isPaused = false;\n        return super.powerOff();\n    }\n    \n    pause() {\n        if (this.isPaused) {\n            this.runningLoop = requestAnimationFrame(this.firstLoop);\n            this.isPaused = false;\n        } else {\n            cancelAnimationFrame(this.runningLoop);\n            this.runningLoop = 0;\n            this.isPaused = this.isPowered;\n        }\n        return this.isPaused;\n    }\n    \n    //=======================================================================================//\n    \n    /** @private */\n    coldBoot() {\n        this.doBoot(this.bus.cpu, this.bus.ppu);\n        \n        this.runningLoop = requestAnimationFrame(this.firstLoop);\n    }\n    \n    /**\n     * @type {FrameRequestCallback}\n     * @private */\n    firstLoop(time) {\n        this.runningLoop = requestAnimationFrame(this.mainLoop);\n        \n        this.lastTime = time;\n        \n        this.doFrame(this.bus.cpu, this.bus.ppu);\n        \n        this.addFrame(time);\n    }\n    \n    /**\n     * @type {FrameRequestCallback}\n     * @private */\n    mainLoop(time) {\n        this.runningLoop = requestAnimationFrame(this.mainLoop);\n        \n        let delta = (time - this.lastTime);\n        this.lastTime = time;\n        \n        if (delta > 1000) {\n            this.pause();\n            return;\n        }\n        \n        while ((delta -= frameTime) >= frameTime) {\n            this.skipFrame(this.bus.cpu, this.bus.ppu);\n            this.dropFrame();\n        }\n        this.doFrame(this.bus.cpu, this.bus.ppu);\n        \n        this.addFrame(time);\n    }\n    \n    //=======================================================================================//\n    \n    /**\n     * @param {CPU} cpu\n     * @param {PPU} ppu\n     * @private\n     */\n    doBoot(cpu, ppu) {\n        cpu.doInstructions(2279); // 1.275ms after boot\n        ppu.vblank = true;\n        cpu.doInstructions(4757); // 2.662ms after boot\n        ppu.vblank = true;\n        \n        this.doVBlank(cpu, ppu);\n        this.doPreRenderLine(cpu, ppu);\n        \n        cpu.cycle -= cyclesPerFrame;\n    }\n    \n    /**\n     * @param {CPU} cpu\n     * @param {PPU} ppu\n     * @private\n     */\n    doFrame(cpu, ppu) {\n        for (let scanline = 0; scanline < renderLines; scanline++)\n            this.doScanline(cpu, ppu, scanline);\n        \n        ppu.printFrame();\n        \n        this.doVBlank(cpu, ppu);\n        this.doPreRenderLine(cpu, ppu);\n        \n        cpu.cycle -= cyclesPerFrame;\n    }\n    \n    /**\n     * @param {CPU} cpu\n     * @param {PPU} ppu\n     * @private\n     */\n    skipFrame(cpu, ppu) {\n        this.doVBlank(cpu, ppu);\n        cpu.doInstructions(cyclesPerFrame);\n        \n        cpu.cycle -= cyclesPerFrame;\n    }\n    \n    //=======================================================================================//\n    \n    /**\n     * Vertical blanking lines (241-260).\n     * The VBlank flag of the PPU is set at scanline 241, where the VBlank NMI also occurs.\n     * @param {CPU} cpu\n     * @param {PPU} ppu\n     * @private\n     */\n    doVBlank(cpu, ppu) {\n        cpu.doInstructions(cyclesBeforeVBlankStart);\n        ppu.doVBlank();\n        cpu.doInstructions(cyclesBeforeVBlankEnd);\n        ppu.endVBlank();\n    }\n    \n    /**\n     * This is a visible scanline, which also processes the graphics to be displayed on\n     * the screen.\n     * @param {CPU} cpu\n     * @param {PPU} ppu\n     * @param {number} scanline\n     * @private\n     */\n    doScanline(cpu, ppu, scanline) {\n        const cyclesBeforeScanline = scanline*cyclesPerScanline;\n        \n        let dot = 0;\n        \n        // Background (and sprites evaluation)\n        ppu.clearSecondaryOAM();\n        while (dot < 64) {\n            cpu.doInstructions(cyclesBeforeScanline + dot/3);\n            ppu.renderTile(dot, scanline);\n            ppu.fetchTile();\n            ppu.incrementX();\n            dot += 8;\n        }\n        ppu.evaluateSprites(scanline);\n        while (dot < 248) {\n            cpu.doInstructions(cyclesBeforeScanline + dot/3);\n            ppu.renderTile(dot, scanline);\n            ppu.fetchTile();\n            ppu.incrementX();\n            dot += 8;\n        }\n        \n        // HBlank\n        cpu.doInstructions(cyclesBeforeScanline + dot/3);\n        ppu.renderTile(dot, scanline);\n        ppu.fetchNullTile();\n        ppu.incrementX();\n        ppu.incrementY();\n        ppu.resetX();\n        dot += 8;\n        \n        // Sprites\n        while (dot < 320) {\n            cpu.doInstructions(cyclesBeforeScanline + dot/3);\n            ppu.fetchSprite(scanline);\n            dot += 8;\n        }\n        \n        // First 2 tiles of next scanline\n        while (dot < 336) {\n            cpu.doInstructions(cyclesBeforeScanline + dot/3);\n            ppu.fetchTile();\n            ppu.incrementX();\n            dot += 8;\n        }\n        \n        // Garbage fetches\n        cpu.doInstructions(cyclesBeforeScanline + dot/3);\n        ppu.fetchNullNTs();\n        dot += 4.5;\n        \n        cpu.doInstructions(cyclesBeforeScanline + dot/3);\n    }\n    \n    /**\n     * This is a dummy scanline, whose sole purpose is to fill the shift registers with\n     * the data for the first two tiles of the next scanline. Although no pixels are\n     * rendered for this scanline, the PPU still makes the same memory accesses it would\n     * for a regular scanline.\n     * @param {CPU} cpu\n     * @param {PPU} ppu\n     * @private\n     */\n    doPreRenderLine(cpu, ppu) {\n        const scanline = 261;\n        const cyclesBeforeScanline = scanline*cyclesPerScanline;\n        \n        let dot = 0;\n        \n        // Background\n        while (dot < 248) {\n            cpu.doInstructions(cyclesBeforeScanline + dot/3);\n            ppu.fetchNullTile();\n            ppu.incrementX();\n            dot += 8;\n        }\n        \n        // HBlank\n        cpu.doInstructions(cyclesBeforeScanline + dot/3);\n        ppu.fetchNullTile();\n        ppu.incrementX();\n        ppu.incrementY();\n        ppu.resetX();\n        dot += 8;\n        \n        // Sprites\n        while (dot < 280) {\n            cpu.doInstructions(cyclesBeforeScanline + dot/3);\n            ppu.fetchNullSprite();\n            dot += 8;\n        }\n        while (dot < 304) {\n            cpu.doInstructions(cyclesBeforeScanline + dot/3);\n            ppu.fetchNullSprite();\n            ppu.resetY();\n            dot += 8;\n        }\n        while (dot < 320) {\n            cpu.doInstructions(cyclesBeforeScanline + dot/3);\n            ppu.fetchNullSprite();\n            dot += 8;\n        }\n        \n        // First 2 tiles of next frame\n        while (dot < 336) {\n            cpu.doInstructions(cyclesBeforeScanline + dot/3);\n            ppu.fetchTile();\n            ppu.incrementX();\n            dot += 8;\n        }\n        \n        // Garbage fetches\n        cpu.doInstructions(cyclesBeforeScanline + dot/3);\n        ppu.fetchNullNTs();\n        dot += 4.5;\n        \n        cpu.doInstructions(cyclesBeforeScanline + dot/3);\n    }\n}\n\nexport default Engine;\n","import Power from './Power.js';\n\nimport CartConnector from './CartConnector.js';\nimport CtrlConnector from './CtrlConnector.js';\nimport VideoOutput from './VideoOutput.js';\nimport AudioOutput from './AudioOutput.js';\nimport CPU from './CPU.js';\nimport APU from './APU.js';\nimport PPU from './PPU.js';\nimport Engine from './Engine.js';\n\nexport class NES extends Power {\n    constructor() {\n        super();\n        \n        this.game        = new CartConnector;\n        this.controllers = new CtrlConnector;\n        this.video       = new VideoOutput;\n        this.audio       = new AudioOutput;\n        \n        this.cpu = new CPU(this);\n        this.apu = new APU(this);\n        this.ppu = new PPU(this);\n        this.engine = new Engine(this);\n    }\n    \n    /**\n     * The state of the front red LED.\n     * @readonly\n     */\n    get frontLED() {\n        return this.isPowered ? this.engine.isPaused ? \"paused\" : \"on\" : \"off\";\n    }\n}\n\nexport default NES;\n","import NES from './NES.js';\n\nimport * as Devices from './Controllers/Devices/index.js';\n\nexport { NES, Devices };\nexport default { NES, Devices };\n"],"names":["Powered","constructor","this","isPowered","powerOn","powerOff","reset","Power","super","buttons","Buttons","subDevices","getSubDevices","forEach","device","propertyNames","Object","getOwnPropertyNames","filter","name","map","pressPower","pressReset","Header","data","loaded","format","valid","mapperNumber","mapperName","supported","PRGROMByteLength","CHRROMByteLength","horiMirroring","vertMirroring","battery","trainer","consoleType","PRGRAMByteLength","CHRRAMByteLength","PRGNVRAMByteLength","CHRNVRAMByteLength","parse","byteLength","PRGROMBANKSIZE","CHRROMBANKSIZE","Cartridge","PRGRAM","Uint8Array","CHRRAM","PRGROM","firstPRGBank","lastPRGBank","PRGBank","CHRROM","firstCHRBank","secondCHRBank","CHRBank","load","header","offset","set","numPRGBank","bank","push","length","numCHRBank","cpuRead","address","cpuWrite","ppuRead","ppuWrite","ciramA10","ciramEnabled","mapperNames","freeze","constructors","mirroring","PRGBankMode","CHRBankMode","buffer","index","control","value","CHR0","CHR1","PRG","write","Mapper","create","number","INESHeader","DataView","getUint32","byte4","getUint8","byte5","getROMByteLength","byte6","byte7","byte9","parseV2","parseV1","byte10","getRAMByteLength","byte11","bankSize","lsb","msb","shiftCount","UNIFHeader","CONSOLE_TYPE","TV_SYSTEM","NTSC","PAL","SECAM","Metadata","tvSystem","mapper","scrolling","SRAM","misc","warnings","errors","warn","message","error","parseFilename","filename","countryCodes","exec","search","replace","trim","toUpperCase","slice","serialize","CartConnector","file","metadata","cartridge","Promise","resolve","reject","size","reader","FileReader","onabort","DOMException","onerror","Error","onload","result","readAsArrayBuffer","then","signature","catch","unload","types","EMPTY","JOYPAD","ZAPPER","devices","NONE","KEYBOARD","MOUSE","Controller","strobing","type","empty","present","read","strobe","BUTTONS","a","b","select","start","up","down","left","right","Joypad","states","seal","Array","fill","buttonHandlers","v","i","pressed","shift","undefined","getButtonHandler","pressButton","pressDown","KEYS","Backspace","Tab","Enter","Shift","Ctrl","Alt","Pause","Escape","Space","End","Home","Left","Up","Right","Down","Insert","Delete","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","Multiply","Add","Subtract","Divide","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","opts","keyHandlers","assignedKeys","assignKeys","window","addEventListener","e","pressKey","keys","entries","button","key","assignKey","buttonName","keyName","handler","keyCode","event","keyDown","which","preventDefault","getAssignedKey","CtrlConnector","controllers","insert","controller","port","remove","bit0","pxlColors","Uint32Array","VideoBuffer","width","height","frame","ImageData","image","setFrame","writePixels","x","y","values","cssColors","Colors","VideoOutput","canvas","context","layers","sprBehindLayer","bkgLayer","sprBeforeLayer","offCanvas","offContext","scheduled","connect","output","nodeName","TypeError","disconnect","disconnected","connected","getContext","alpha","imageSmoothingEnabled","document","createElement","stop","cancelAnimationFrame","colors","drawImage","backdrop","outputWidth","outputHeight","fillStyle","fillRect","layer","putImageData","bufferLength","buffersCount","AudioRingBuffer","sampleRate","buffers","AudioBuffer","readyBuffer","writeBuffer","nextReadyIndex","nextWriteIndex","getChannelData","duration","onnewbufferready","onbufferunderrun","onbufferoverrun","initChannelData","readyBuffersCount","readyCount","usage","ready","halfFull","lastSample","rotateWriteBuffer","currentBuffer","rotateReadyBuffer","writeSample","threshold","AudioOutput","lag","decreaseSpeed","transfer","healthy","gainNode","volumeValue","next","lockedUntil","Infinity","speedAdjustment","AudioContext","suspend","destination","createGain","gain","volume","Math","min","abs","buffered","currentTime","resume","setTimeout","source","createBufferSource","audioBuffer","onended","increaseSpeed","amount","cyclesLookup","CPU","bus","ram","stack","subarray","nmiVector","resetVector","irqVector","SP","PC","addressLookup","imp","indX","zero","imm","rel","indY","zeroX","absY","absX","ind","zeroY","fn","bind","instructionLookup","BRK","ORA","KIL","NOP","ASL","PHP","AXL","BPL","CLC","JSR","AND","BIT","ROL","PLP","RXL","BMI","SEC","RTI","EOR","LSR","PHA","LXR","JMP","BVC","CLI","RTS","ADC","ROR","PLA","RXR","BVS","SEI","STA","STY","STX","DEY","TXA","BCC","TYA","TXS","LDY","LDA","LDX","TAY","TAX","BCS","CLV","TSX","CPY","CMP","DEC","INY","DEX","BNE","CLD","CPX","SBC","INC","INX","BEQ","SED","cycle","opcode","operand","cart","game","doReset","doInstructions","limit","apu","cycleBefore","doInstruction","doCycles","doNMI","pushWord","pushByte","wrapByte","doIRQ","ppu","doDMA","pullByte","pullWord","Carry","Zero","Interrupt","Decimal","Overflow","Negative","ALU","implied","readWord","indirect","lowByte","highByte","fnFetchOperand","add","reg","alu","carry","compare","lengths","LengthCounter","timerCycle","timerPeriod","timer","disabled","lengthCounter","lengthCounterHalt","enabled","doHalf","EnvelopeGenerator","constantVolume","envelopeEnabled","envelopeReset","envelopeCycle","envelopePeriod","envelopeVolume","envelopeLoop","doQuarter","LinearCounter","linearCounter","linearCounterMax","linearCounterReset","linearCounterControl","counter","SweepUnit","negateMode","sweepEnabled","sweepReset","sweepCycle","sweepPeriod","sweepNegate","sweepShift","sweep","dutySequences","PulseChannel","id","dutyCycle","duty","doCycle","TriangleChannel","phase","timerPeriods","NoiseChannel","timerMode","shiftRegister","feedback","DMC","sampleBuffer","sampleAddress","sampleLength","sampleLeft","sampleLoop","shiftRegisterCycle","irqEnabled","irq","rate","cpu","updateSampleBuffer","updateShiftRegister","updateOutput","APU","pulse1","pulse2","triangle","noise","dmc","status","irqDisabled","counterMode","toggle","resetDelay","cyclesPerSample","cyclesUntilSample","audio","fourStepCounterMode","fiveStepCounterMode","count","doSample","pulses","others","pulsesSamples","othersSamples","Float32Array","PPU","ntsc","vram","palette","addressIncrement","sprPatternTable","bkgPatternTable","sprite8x16","nmiEnabled","spriteHeight","grayscale","showLeftMostBkg","showLeftMostSpr","showBackground","showSprites","emphasizeRed","emphasizeGreen","emphasizeBlue","renderingEnabled","spriteOverflow","sprite0Hit","vblank","oamPrimary","oamAddress","oamSecondary","oamIndex","fineScrollX","fineScrollY","writeToggle","addressBus","addressBuffer","readBuffer","bkgPixelsBuffer","sprPixelsBuffer","video","sprLayer","sprite0Layer","sprite0","mask","OAMAddress","doVBlank","endVBlank","OAMData","scroll","readPalette","readData","writePalette","writeData","bkgPalette","sprPalette","incrementX","incrementY","coarseY","resetX","resetY","fetchNameTable","fetchAttributeTable","fetchBkgPatternTable","patternIndex","row","fillBkgPixelsBuffer","pattern","paletteIndex","copyWithin","target","color","interpretPattern","fetchTile","fetchNullTile","fetchNullNTs","renderTile","dot","scanline","pixels","sprite0Y","sprite0X","some","pixel","clearSecondaryOAM","evaluateSprites","spritesList","sprites","top","bottom","fetchSprPatternTable","fillSprPixelsBuffer","flip","fetchSprite","attributes","fetchNullSprite","printFrame","bitplaneLookup","Stats","fps","performance","frameTimeThisSecond","framesThisSecond","update","addFrame","startTime","now","dropFrame","frameTime","cyclesPerScanline","cyclesPerFrame","Engine","firstLoop","mainLoop","runningLoop","lastTime","isPaused","coldBoot","pause","requestAnimationFrame","doBoot","time","doFrame","delta","skipFrame","doPreRenderLine","doScanline","vblankStart","vblankEnd","cyclesBeforeScanline","NES","engine","frontLED","Devices"],"mappings":"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"}