{"version":3,"file":"nestled.umd.min.js","sources":["../src/Audio/Channel.js","../src/Audio/PulseChannel.js","../src/Audio/TriangleChannel.js","../src/Audio/NoiseChannel.js","../src/Audio/DMC.js","../src/APU.js","../src/CPU.js","../src/Video/Colors.js","../src/Video/VideoBuffer.js","../src/PPU.js","../src/Engine.js","../src/Cartridges/FileFormats/Header.js","../src/Cartridges/Cartridge.js","../src/Cartridges/Mappers/NROM.js","../src/Cartridges/Mappers/index.js","../src/Cartridges/Mapper.js","../src/Cartridges/Mappers/MMC1.js","../src/Cartridges/FileFormats/INES.js","../src/Cartridges/FileFormats/UNIF.js","../src/Cartridges/Metadata.js","../src/CartConnector.js","../src/Controllers/Controller.js","../src/Controllers/Joypad.js","../src/Controllers/Devices/Keyboard.js","../src/CtrlConnector.js","../src/VideoOutput.js","../src/Audio/AudioRingBuffer.js","../src/AudioOutput.js","../src/NES.js"],"sourcesContent":["const lengths = [\n    10, 254, 20,  2, 40,  4, 80,  6, 160,  8, 60, 10, 14, 12, 26, 14,\n    12,  16, 24, 18, 48, 20, 96, 22, 192, 24, 72, 26, 16, 28, 32, 30,\n];\n\nexport class Channel {\n    constructor() {\n        this.enabled = false;\n        \n        this.lengthCounter     = 0;\n        this.lengthCounterHalt = false;\n    }\n    \n    reset() {\n        this.enabled = false;\n        \n        this.length  = 0;\n    }\n    \n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(value) {\n        if (!value)\n            this.lengthCounter = 0;\n        this._enabled = value;\n    }\n    \n    //== Registers ==================================================//\n    get length() {\n        return this.lengthCounter;\n    }\n    set length(value) {\n        if (this.enabled)\n            this.lengthCounter = lengths[(value & 0xF8) >>> 3];\n    }\n    \n    updateLength() {\n        if (this.lengthCounter > 0 && !this.lengthCounterHalt)\n            this.lengthCounter--;\n    }\n}\n\nexport default Channel;\n","import Channel from './Channel.js';\n\nconst duties = [\n    [0, 0, 0, 0, 0, 0, 0, 1],\n    [0, 0, 0, 0, 0, 0, 1, 1],\n    [0, 0, 0, 0, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 0, 0],\n];\n\nexport class PulseChannel extends Channel {\n    constructor(id) {\n        super();\n        \n        this.id = id;\n        \n        this.constantVolume = 0;\n        \n        this.envelopeEnabled = true;\n        this.envelopeReset   = false;\n        this.envelopeCycle   = 0;\n        this.envelopePeriod  = 0;\n        this.envelopeVolume  = 0;\n        this.envelopeLoop    = false;\n        \n        this.dutyCycle = 0;\n        this.duty      = 0;\n        \n        this.sweepEnabled = false;\n        this.sweepReset   = false;\n        this.sweepCycle   = 0;\n        this.sweepPeriod  = 0;\n        this.sweepNegate  = false;\n        this.sweepShift   = 0;\n        \n        this.timerCycle  = 0;\n        this.timerPeriod = 0;\n    }\n    \n    reset() {\n        super.reset();\n        \n        this.envelopeCycle  = 0;\n        this.envelopeVolume = 0;\n        \n        this.sweepCycle = 0;\n        \n        this.timerCycle = 0;\n        \n        this.volume = 0;\n        this.sweep  = 0;\n        this.timer  = 0;\n    }\n    \n    //== Registers ==================================================//\n    get volume() {\n        let volume = this.envelopeEnabled ? this.envelopeVolume : this.constantVolume;\n        return volume * this.duty[this.dutyCycle];\n    }\n    set volume(value) {\n        this.duty = duties[(value & 0xC0) >>> 6];\n        \n        if (value > 0x0F) {\n            this.lengthCounterHalt = (value & 0x20) !== 0;\n            this.envelopeEnabled   = (value & 0x10) === 0;\n            this.constantVolume    = (value & 0x0F);\n        } else {\n            this.lengthCounterHalt = false;\n            this.envelopeEnabled   = true;\n            this.constantVolume    = value;\n        }\n        \n        this.envelopePeriod   = this.constantVolume;\n        this.envelopeLoop     = this.lengthCounterHalt;\n    }\n    \n    get sweep() {\n        let sweep = this.timerPeriod >>> this.sweepShift;\n        return this.sweepNegate ? ((this.id === 1) ? ~sweep : -sweep) : sweep;\n    }\n    set sweep(value) {\n        this.sweepEnabled = (value & 0x80) !== 0;\n        this.sweepPeriod  = (value & 0x70) >>> 4;\n        this.sweepNegate  = (value & 0x08) !== 0;\n        this.sweepShift   = (value & 0x07);\n        this.sweepReset   = true;\n    }\n    \n    get timer() {\n        return this.timerPeriod;\n    }\n    set timer(value) {\n        this.timerPeriod = (this.timerPeriod & 0x700) + value;\n    }\n    \n    get length() {\n        return super.length;\n    }\n    set length(value) {\n        this.dutyCycle = 0;\n        this.envelopeReset = true;\n        \n        this.timerPeriod = (this.timerPeriod & 0x0FF) | ((value & 0x07) << 8);\n        \n        super.length = value;\n    }\n    \n    //== Registers access ===========================================//\n    writeRegister(address, data) {\n        switch (address) {\n        case 0x4000: case 0x4004: this.volume = data; break;\n        case 0x4001: case 0x4005: this.sweep  = data; break;\n        case 0x4002: case 0x4006: this.timer  = data; break;\n        case 0x4003: case 0x4007: this.length = data; break;\n        }\n    }\n    \n    //== Execution ==================================================//\n    doCycle() {\n        if (--this.timerCycle <= 0) {\n            this.timerCycle = (this.timerPeriod + 1);\n            \n            this.dutyCycle++;\n            if (this.dutyCycle >= 0x8)\n                this.dutyCycle -= 0x8;\n        }\n    }\n    \n    doQuarter() {\n        if (this.envelopeReset) {\n            this.envelopeCycle  = this.envelopePeriod;\n            this.envelopeVolume = 0xF;\n            this.envelopeReset  = false;\n        } else if (this.envelopeCycle > 0) {\n            this.envelopeCycle--;\n        } else {\n            this.envelopeCycle = this.envelopePeriod;\n            if (this.envelopeVolume > 0) {\n                this.envelopeVolume--;\n            } else if (this.envelopeLoop) {\n                this.envelopeVolume = 0xF;\n            }\n        }\n    }\n    \n    doHalf() {\n        if (this.sweepCycle > 0) {\n            this.sweepCycle--;\n        } else {\n            if (this.sweepEnabled && this.sweepShift) {\n                let timer = this.timer;\n                if (timer >= 0x008 && timer+this.sweep < 0x800)\n                    this.timerPeriod += this.sweep;\n            }\n            this.sweepCycle = this.sweepPeriod;\n        }\n        if (this.sweepReset) {\n            this.sweepCycle = this.sweepPeriod;\n            this.sweepReset = false;\n        }\n        \n        this.updateLength();\n    }\n    \n    //== Output =====================================================//\n    get output() {\n        if (this.length > 0 && this.timer >= 0x008 && this.timer+this.sweep < 0x800) {\n            return this.volume;\n        } else {\n            return 0;\n        }\n    }\n}\n\nexport default PulseChannel;\n","import Channel from './Channel.js';\n\nconst duty = [\n    0,  1,  2,  3,  4,  5,  6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n    15, 14, 13, 12, 11, 10, 9, 8, 7, 6,  5,  4,  3,  2,  1,  0,\n];\n\nexport class TriangleChannel extends Channel {\n    constructor() {\n        super();\n        \n        this.dutyCycle = 0;\n        \n        this.linearCounter      = 0;\n        this.linearCounterMax   = 0;\n        this.linearCounterReset = false;\n        \n        this.timerCycle  = 0;\n        this.timerPeriod = 0;\n    }\n    \n    reset() {\n        super.reset();\n        \n        this.dutyPosition  = 0;\n        this.linearCounter = 0;\n        \n        this.timerCycle    = 0;\n        \n        this.counter = 0;\n        this.timer   = 0;\n    }\n    \n    //== Registers ==================================================//\n    set counter(value) {\n        if (value >= 0x80) {\n            this.lengthCounterHalt = true;\n            this.linearCounterMax  = (value - 0x80);\n        } else {\n            this.lengthCounterHalt = false;\n            this.linearCounterMax  = value;\n        }\n        this.linearCounterControl = this.lengthCounterHalt;\n    }\n    \n    get timer() {\n        return this.timerPeriod;\n    }\n    set timer(value) {\n        this.timerPeriod = (this.timerPeriod & 0x700) + value;\n    }\n    \n    get length() {\n        return super.length;\n    }\n    set length(value) {\n        this.linearCounterReset = true;\n        \n        this.timerPeriod = (this.timerPeriod & 0x0FF) | ((value & 0x07) << 8);\n        \n        super.length = value;\n    }\n    \n    //== Registers access ===========================================//\n    writeRegister(address, data) {\n        switch (address) {\n        case 0x4008: this.counter = data; break;\n        case 0x400A: this.timer   = data; break;\n        case 0x400B: this.length  = data; break;\n        }\n    }\n    \n    //== Execution ==================================================//\n    doCycle() {\n        this.timerCycle -= 2;\n        if (this.timerCycle <= 0) {\n            this.timerCycle = (this.timerPeriod + 1);\n            \n            if (this.lengthCounter && this.linearCounter && this.timerPeriod > 3) {\n                this.dutyCycle++;\n                if (this.dutyCycle >= 0x20)\n                    this.dutyCycle -= 0x20;\n            }\n        }\n    }\n    \n    doQuarter() {\n        if (this.linearCounterReset) {\n            this.linearCounter = this.linearCounterMax;\n        } else if (this.linearCounter > 0) {\n            this.linearCounter--;\n        }\n        \n        if (!this.linearCounterControl)\n            this.linearCounterReset = false;\n    }\n    \n    doHalf() {\n        this.updateLength();\n    }\n    \n    //== Output =====================================================//\n    get output() {\n        return duty[this.dutyCycle];\n    }\n}\n\nexport default TriangleChannel;\n","import Channel from './Channel.js';\n\nconst timerPeriods = [ // fixed to NTSC for now\n    4, 8, 16, 32, 64, 96, 128, 160, 202, 254, 380, 508, 762, 1016, 2034, 4068\n];\n\nexport class NoiseChannel extends Channel {\n    constructor() {\n        super();\n        \n        this.constantVolume = 0;\n        \n        this.envelopeEnabled = true;\n        this.envelopeReset   = false;\n        this.envelopeCycle   = 0;\n        this.envelopePeriod  = 0;\n        this.envelopeVolume  = 0;\n        this.envelopeLoop    = false;\n        \n        this.timerMode   = false;\n        this.timerCycle  = 0;\n        this.timerPeriod = 0;\n        \n        this.shiftRegister = 1;\n    }\n    \n    reset() {\n        super.reset();\n        \n        this.envelopeCycle  = 0;\n        this.envelopeVolume = 0;\n        \n        this.timerCycle    = 0;\n        \n        this.shiftRegister = 1;\n        \n        this.volume = 0;\n        this.timer  = 0;\n    }\n    \n    //== Registers ==================================================//\n    get volume() {\n        return this.envelopeEnabled ? this.envelopeVolume : this.constantVolume;\n    }\n    set volume(value) {\n        if (value > 0x0F) {\n            this.lengthCounterHalt = (value & 0x20) !== 0;\n            this.envelopeEnabled   = (value & 0x10) === 0;\n            this.constantVolume    = (value & 0x0F);\n        } else {\n            this.lengthCounterHalt = false;\n            this.envelopeEnabled   = true;\n            this.constantVolume    = value;\n        }\n        \n        this.envelopeLoop   = this.lengthCounterHalt;\n        this.envelopePeriod = this.constantVolume;\n    }\n    \n    get timer() {\n        return this.timerPeriod;\n    }\n    set timer(value) {\n        if (value > 0x0F) {\n            this.timerMode   = (value >= 0x80);\n            this.timerPeriod = timerPeriods[value & 0x0F];\n        } else {\n            this.timerMode   = false;\n            this.timerPeriod = timerPeriods[value];\n        }\n    }\n    \n    get length() {\n        return super.length;\n    }\n    set length(value) {\n        this.envelopeReset = true;\n        \n        super.length = value;\n    }\n    \n    //== Registers access ===========================================//\n    writeRegister(address, data) {\n        switch (address) {\n        case 0x400C: this.volume = data; break;\n        case 0x400E: this.timer  = data; break;\n        case 0x400F: this.length = data; break;\n        }\n    }\n    \n    //== Execution ==================================================//\n    doCycle() {\n        if (--this.timerCycle <= 0) {\n            this.timerCycle = this.timerPeriod;\n            \n            let feedback = (this.shiftRegister & 1);\n            if (this.timerMode)\n                feedback ^= ((this.shiftRegister >>> 6) & 1);\n            else\n                feedback ^= ((this.shiftRegister >>> 1) & 1);\n            \n            this.shiftRegister = (this.shiftRegister >>> 1) | (feedback << 14);\n        }\n    }\n    \n    doQuarter() {\n        if (this.envelopeReset) {\n            this.envelopeCycle  = this.envelopePeriod;\n            this.envelopeVolume = 0xF;\n            this.envelopeReset  = false;\n        } else if (this.envelopeCycle > 0) {\n            this.envelopeCycle--;\n        } else {\n            this.envelopeCycle = this.envelopePeriod;\n            if (this.envelopeVolume > 0) {\n                this.envelopeVolume--;\n            } else if (this.envelopeLoop) {\n                this.envelopeVolume = 0xF;\n            }\n        }\n    }\n    \n    doHalf() {\n        this.updateLength();\n    }\n    \n    //== Output =====================================================//\n    get output() {\n        if (this.length > 0 && !(this.shiftRegister & 1)) {\n            return this.volume;\n        } else {\n            return 0;\n        }\n    }\n}\n\nexport default NoiseChannel;\n","const timerPeriods = [ // fixed to NTSC for now\n    428, 380, 340, 320, 286, 254, 226, 214, 190, 160, 142, 128, 106, 84, 72, 54\n];\n\nexport class DMC {\n    constructor(cpu) {\n        this.cpu = cpu;\n        \n        this.enabled = false;\n        \n        this.cycle  = 0;\n        this.output = 0;\n        \n        this.timerCycle  = 0;\n        this.timerPeriod = 0;\n        \n        this.sampleAddress = 0;\n        this.sampleLength  = 0;\n        this.sampleIndex   = 0;\n        this.sampleLeft    = 0;\n        this.sampleLoop    = false;\n        this.sampleBuffer  = -1;\n        \n        this.shiftRegister     = -1;\n        this.shiftRegisterBits = 0;\n        \n        this.irqEnabled = false;\n        this.irq        = false;\n    }\n    \n    reset() {\n        this.cycle = 0;\n        \n        this.timerCycle = 0;\n        \n        this.sampleBuffer = -1;\n        \n        this.shiftRegister     = -1;\n        this.shiftRegisterBits = 0;\n        \n        this.rate    = 0;\n        this.load    = 0;\n        this.address = 0;\n        this.length  = 0;\n    }\n    \n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(value) {\n        if (value) {\n            if (this.sampleLeft === 0) {\n                this.sampleIndex = 0;\n                this.sampleLeft  = this.sampleLength;\n            }\n        } else {\n            this.sampleLeft = 0;\n        }\n        this.irq = false;\n        \n        this._enabled = value;\n    }\n    \n    //== Interrupt ==================================================//\n    doIRQ() {\n        this.irq = true;\n        if (this.irqEnabled)\n            this.cpu.doIRQ();\n    }\n    \n    //== Registers ==================================================//\n    get rate() {\n        return this.timerPeriod;\n    }\n    set rate(value) {\n        if (value >= 0x40) {\n            this.irqEnabled  = (value & 0x80) !== 0;\n            this.sampleLoop  = (value & 0x40) !== 0;\n            this.timerPeriod = timerPeriods[value & 0x0F];\n        } else {\n            this.irqEnabled = false;\n            this.sampleLoop = false;\n            if (value > 0x0F)\n                this.timerPeriod = timerPeriods[value & 0x0F];\n            else\n                this.timerPeriod = timerPeriods[value];\n        }\n        \n        if (!this.irqEnabled)\n            this.irq = false;\n    }\n    \n    get load() {\n        return this.output;\n    }\n    set load(value) {\n        if (value >= 0x80) value -= 0x80;\n        this.output = value;\n    }\n    \n    get address() {\n        return this.sampleAddress;\n    }\n    set address(value) {\n        this.sampleAddress = 0xC000 + (value * 64);\n    }\n    \n    get length() {\n        return this.sampleLength;\n    }\n    set length(value) {\n        this.sampleLength = (value * 16) + 1;\n    }\n    \n    //== Registers access ===========================================//\n    writeRegister(address, data) {\n        switch (address) {\n        case 0x4010: this.rate    = data; break;\n        case 0x4011: this.load    = data; break;\n        case 0x4012: this.address = data; break;\n        case 0x4013: this.length  = data; break;\n        }\n    }\n    \n    //== Execution ==================================================//\n    doCycle() {\n        if (this.cycle > 0) {\n            this.cycle--;\n        }\n        if (--this.timerCycle <= 0) {\n            this.timerCycle = this.timerPeriod;\n            this.updateSampleBuffer();\n            this.updateShiftRegister();\n            this.updateOutput();\n        }\n    }\n    \n    updateSampleBuffer() {\n        if (this.sampleBuffer < 0 && this.sampleLeft > 0) {\n            this.sampleBuffer = this.cpu.read(this.sampleAddress + this.sampleIndex++);\n            this.cycle = 4;\n            \n            if (--this.sampleLeft <= 0) {\n                if (this.sampleLoop) {\n                    this.sampleIndex = 0;\n                    this.sampleLeft = this.sampleLength;\n                } else if (this.irqEnabled) {\n                    this.doIRQ();\n                }\n            }\n        }\n    }\n    \n    updateShiftRegister() {\n        if (--this.shiftRegisterBits <= 0) {\n            this.shiftRegisterBits = 8;\n            this.shiftRegister = this.sampleBuffer;\n            this.sampleBuffer = -1;\n        }\n    }\n    \n    updateOutput() {\n        if (this.shiftRegister >= 0) {\n            if (this.shiftRegister & 1) {\n                if (this.output <= 125) {\n                    this.output += 2;\n                }\n            } else if (this.output >= 2) {\n                this.output -= 2;\n            }\n            this.shiftRegister >>>= 1;\n        }\n    }\n}\n\nexport default DMC;\n","import {\n    PulseChannel,\n    TriangleChannel,\n    NoiseChannel,\n    DMC\n} from './Audio/index.js';\n\nconst cyclesFrequency = 1786830 / 2;\n\nexport class APU {\n    constructor(cpu) {\n        this.bus = cpu.bus;\n        this.cpu = cpu;\n        \n        this.pulse1   = new PulseChannel(1);\n        this.pulse2   = new PulseChannel(2);\n        this.triangle = new TriangleChannel;\n        this.noise    = new NoiseChannel;\n        this.dmc      = new DMC(cpu);\n        \n        this.cyclesPerSample   = 0;\n        this.cyclesUntilSample = Infinity;\n        \n        this.irqDisabled = false;\n        this.irq         = false;\n        \n        this.status  = null;\n        this.counter = null;\n        \n        this.toggle = false;\n        this.cycle  = 0;\n    }\n    \n    powerOn() {\n        this.bus.audioOutput.start();\n        \n        this.cyclesPerSample   = cyclesFrequency / this.bus.audioOutput.sampleRate;\n        this.cyclesUntilSample = this.cyclesPerSample * this.bus.audioOutput.speedAdjustment;\n    }\n    powerOff() {\n        this.bus.audioOutput.stop();\n    }\n    \n    reset() {\n        this.pulse1.reset();\n        this.pulse2.reset();\n        this.triangle.reset();\n        this.noise.reset();\n        this.dmc.reset();\n        \n        this.counter = 0;\n        this.irq     = false;\n    }\n    \n    //== Interrupt ==================================================//\n    doIRQ() {\n        this.irq = true;\n        this.cpu.doIRQ();\n    }\n    \n    //== Registers ==================================================//\n    //= 0x4015 Status =//\n    get status() {\n        let value = (this.pulse1.length   && 0x01) +\n                    (this.pulse2.length   && 0x02) +\n                    (this.triangle.length && 0x04) +\n                    (this.noise.length    && 0x08) +\n                    (this.dmc.sampleLeft  && 0x10) +\n                    (this.dmc.irq         && 0x80) +\n                    (this.irq             && 0x40);\n        this.dmc.irq = false;\n        this.irq     = false;\n        \n        return value;\n    }\n    set status(value) {\n        if (value !== null) {\n            this.pulse1.enabled   = !!(value & 0x01);\n            this.pulse2.enabled   = !!(value & 0x02);\n            this.triangle.enabled = !!(value & 0x04);\n            this.noise.enabled    = !!(value & 0x08);\n            this.dmc.enabled      = !!(value & 0x10);\n        } else {\n            this.pulse1.enabled   = false;\n            this.pulse2.enabled   = false;\n            this.triangle.enabled = false;\n            this.noise.enabled    = false;\n            this.dmc.enabled      = false;\n        }\n    }\n    \n    //= 0x4017 Frame counter =//\n    set counter(value) {\n        if (value !== null) {\n            if (value >= 0x80) {\n                this.counterMode = 1;\n                this.irqDisabled = (value >= 0xC0);\n            } else {\n                this.counterMode = 0;\n                this.irqDisabled = (value >= 0x40);\n            }\n            \n            if (this.irqDisabled)\n                this.irq = false;\n            \n            this.resetDelay = this.toggle ? 3 : 4;\n            \n            if (this.counterMode === 1) {\n                this.doQuarter();\n                this.doHalf();\n            }\n        } else {\n            this.counterMode = 0;\n            this.irqDisabled = false;\n            this.resetDelay = 0;\n        }\n    }\n    \n    //== Registers access ===========================================//\n    readRegister(address) {\n        if (address === 0x4015)\n            return this.status;\n        else\n            return 0;\n    }\n    writeRegister(address, data) {\n        if (address <= 0x4003)\n            this.pulse1.writeRegister(address, data);\n        else if (address <= 0x4007)\n            this.pulse2.writeRegister(address, data);\n        else if (address <= 0x400B)\n            this.triangle.writeRegister(address, data);\n        else if (address <= 0x400F)\n            this.noise.writeRegister(address, data);\n        else if (address <= 0x4013)\n            this.dmc.writeRegister(address, data);\n        else if (address === 0x4015)\n            this.status = data;\n        else if (address === 0x4017)\n            this.counter = data;\n    }\n    \n    //== Execution ==================================================//\n    doCycles(count) {\n        while (count--) {\n            if ((this.toggle = !this.toggle)) {\n                if (this.resetDelay > 0) {\n                    if (--this.resetDelay === 0)\n                        this.cycle = 0;\n                }\n                this.doCycle();\n            }\n        }\n    }\n    \n    doCycle() {\n        let cycle = this.cycle++;\n        if (cycle <= 7457) {\n            if (cycle === 7457) {\n                this.doQuarter();\n            }\n        } else if (cycle <= 14914) {\n            if (cycle === 14914) {\n                this.doQuarter();\n                this.doHalf();\n            }\n        } else if (cycle <= 22371) {\n            if (cycle === 22371) {\n                this.doQuarter();\n            }\n        } else if (cycle >= 29828) {\n            if (cycle === 29828 && this.counterMode === 0) {\n                this.doQuarter();\n                this.doHalf();\n                \n                if (!this.irqDisabled)\n                    this.doIRQ();\n                \n                this.cycle = 0;\n            } else if (cycle === 37281) {\n                this.doQuarter();\n                this.doHalf();\n                \n                this.cycle = 0;\n            }\n        }\n        this.pulse1.doCycle();\n        this.pulse2.doCycle();\n        this.triangle.doCycle();\n        this.noise.doCycle();\n        this.dmc.doCycle();\n        \n        if (--this.cyclesUntilSample <= 0) {\n            this.doSample();\n            this.cyclesUntilSample += this.cyclesPerSample * this.bus.audioOutput.speedAdjustment;\n        }\n    }\n    \n    doQuarter() {\n        this.pulse1.doQuarter();\n        this.pulse2.doQuarter();\n        this.triangle.doQuarter();\n        this.noise.doQuarter();\n    }\n    \n    doHalf() {\n        this.pulse1.doHalf();\n        this.pulse2.doHalf();\n        this.triangle.doHalf();\n        this.noise.doHalf();\n    }\n    \n    //== Output =====================================================//\n    doSample() {\n        let pulses = this.pulse1.output + this.pulse2.output;\n        let others = 3*this.triangle.output + 2*this.noise.output + this.dmc.output;\n        \n        this.bus.audioOutput.writeSample(pulsesSamples[pulses] + othersSamples[others]);\n    }\n}\n\nconst pulsesSamples = new Float32Array(31);\nfor (let i = 0; i < 31; i++ ) {\n    pulsesSamples[i] = 95.52 / (8128.0 / i + 100);\n}\nconst othersSamples = new Float32Array(203);\nfor (let i = 0; i < 203; i++ ) {\n    othersSamples[i] = 163.67 / (24329.0 / i + 100);\n}\n\nexport default APU;\n","import APU from './APU.js';\n\nconst cyclesLookup = [7,6,2,8,3,3,5,5,3,2,2,2,4,4,6,6, 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n                      6,6,2,8,3,3,5,5,4,2,2,2,4,4,6,6, 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n                      6,6,2,8,3,3,5,5,3,2,2,2,3,4,6,6, 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n                      6,6,2,8,3,3,5,5,4,2,2,2,5,4,6,6, 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n                      2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4, 2,6,2,6,4,4,4,4,2,5,2,5,5,5,5,5,\n                      2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4, 2,5,2,5,4,4,4,4,2,4,2,4,4,4,4,4,\n                      2,6,2,8,3,3,5,5,2,2,2,2,4,4,6,6, 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,\n                      2,6,3,8,3,3,5,5,2,2,2,2,4,4,6,6, 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7];\n\n//Helper function to convert signed bytes to javascript's native numbers\nfunction signByte(value) { return value>0x7F ? value-0x100 : value; }\n//Helper function to simulate binary overflow\nfunction wrapByte(value) { return value>0xFF ? value-0x100 : value; }\n\nexport class CPU {\n    constructor(nes) {\n        this.bus = nes;\n        \n        this.cycle = -1;\n        this.cycleOffset = -1;\n        \n        this.apu = new APU(this);\n        \n        this.ram   = new Uint8Array(0x800);\n        this.stack = this.ram.subarray(0x100, 0x200);\n        \n        this.nmiVector   = () => 0x0000;\n        this.resetVector = () => 0x0000;\n        this.irqVector   = () => 0x0000;\n        \n        this.A = 0xFF;\n        this.X = 0xFF;\n        this.Y = 0xFF;\n        this.P = 0xFF;\n        this.SP = 0xFF;\n        this.PC = 0xFFFF;\n        \n        //Addressing modes lookup table\n        this.addressLookup = [\n            this.imp, this.indX, this.imp, this.indX, this.zero,  this.zero,  this.zero,  this.zero,  this.imp, this.imm,  this.imp, this.imm,  this.abs,  this.abs,  this.abs,  this.abs,\n            this.rel, this.indY, this.imp, this.indY, this.zeroX, this.zeroX, this.zeroX, this.zeroX, this.imp, this.absY, this.imp, this.absY, this.absX, this.absX, this.absX, this.absX,\n            this.abs, this.indX, this.imp, this.indX, this.zero,  this.zero,  this.zero,  this.zero,  this.imp, this.imm,  this.imp, this.imm,  this.abs,  this.abs,  this.abs,  this.abs,\n            this.rel, this.indY, this.imp, this.indY, this.zeroX, this.zeroX, this.zeroX, this.zeroX, this.imp, this.absY, this.imp, this.absY, this.absX, this.absX, this.absX, this.absX,\n            this.imp, this.indX, this.imp, this.indX, this.zero,  this.zero,  this.zero,  this.zero,  this.imp, this.imm,  this.imp, this.imm,  this.abs,  this.abs,  this.abs,  this.abs,\n            this.rel, this.indY, this.imp, this.indY, this.zeroX, this.zeroX, this.zeroX, this.zeroX, this.imp, this.absY, this.imp, this.absY, this.absX, this.absX, this.absX, this.absX,\n            this.imp, this.indX, this.imp, this.indX, this.zero,  this.zero,  this.zero,  this.zero,  this.imp, this.imm,  this.imp, this.imm,  this.ind,  this.abs,  this.abs,  this.abs,\n            this.rel, this.indY, this.imp, this.indY, this.zeroX, this.zeroX, this.zeroX, this.zeroX, this.imp, this.absY, this.imp, this.absY, this.absX, this.absX, this.absX, this.absX,\n            this.imm, this.indX, this.imm, this.indX, this.zero,  this.zero,  this.zero,  this.zero,  this.imp, this.imm,  this.imp, this.imm,  this.abs,  this.abs,  this.abs,  this.abs,\n            this.rel, this.indY, this.imp, this.indY, this.zeroX, this.zeroX, this.zeroY, this.zeroY, this.imp, this.absY, this.imp, this.absY, this.absX, this.absX, this.absY, this.absY,\n            this.imm, this.indX, this.imm, this.indX, this.zero,  this.zero,  this.zero,  this.zero,  this.imp, this.imm,  this.imp, this.imm,  this.abs,  this.abs,  this.abs,  this.abs,\n            this.rel, this.indY, this.imp, this.indY, this.zeroX, this.zeroX, this.zeroY, this.zeroY, this.imp, this.absY, this.imp, this.absY, this.absX, this.absX, this.absY, this.absY,\n            this.imm, this.indX, this.imm, this.indX, this.zero,  this.zero,  this.zero,  this.zero,  this.imp, this.imm,  this.imp, this.imm,  this.abs,  this.abs,  this.abs,  this.abs,\n            this.rel, this.indY, this.imp, this.indY, this.zeroX, this.zeroX, this.zeroX, this.zeroX, this.imp, this.absY, this.imp, this.absY, this.absX, this.absX, this.absX, this.absX,\n            this.imm, this.indX, this.imm, this.indX, this.zero,  this.zero,  this.zero,  this.zero,  this.imp, this.imm,  this.imp, this.imm,  this.abs,  this.abs,  this.abs,  this.abs,\n            this.rel, this.indY, this.imp, this.indY, this.zeroX, this.zeroX, this.zeroX, this.zeroX, this.imp, this.absY, this.imp, this.absY, this.absX, this.absX, this.absX, this.absX\n        ].map((fn) => fn.bind(this));\n        \n        //Instructions lookup table\n        this.instructionLookup = [\n            this.BRK, this.ORA, this.KIL, this.NOP, this.NOP, this.ORA, this.ASL, this.NOP, this.PHP, this.ORA, this.ASL, this.NOP, this.NOP, this.ORA, this.ASL, this.NOP,\n            this.BPL, this.ORA, this.KIL, this.NOP, this.NOP, this.ORA, this.ASL, this.NOP, this.CLC, this.ORA, this.NOP, this.NOP, this.NOP, this.ORA, this.ASL, this.NOP,\n            this.JSR, this.AND, this.KIL, this.NOP, this.BIT, this.AND, this.ROL, this.NOP, this.PLP, this.AND, this.ROL, this.NOP, this.BIT, this.AND, this.ROL, this.NOP,\n            this.BMI, this.AND, this.KIL, this.NOP, this.NOP, this.AND, this.ROL, this.NOP, this.SEC, this.AND, this.NOP, this.NOP, this.NOP, this.AND, this.ROL, this.NOP,\n            this.RTI, this.EOR, this.KIL, this.NOP, this.NOP, this.EOR, this.LSR, this.NOP, this.PHA, this.EOR, this.LSR, this.NOP, this.JMP, this.EOR, this.LSR, this.NOP,\n            this.BVC, this.EOR, this.KIL, this.NOP, this.NOP, this.EOR, this.LSR, this.NOP, this.CLI, this.EOR, this.NOP, this.NOP, this.NOP, this.EOR, this.LSR, this.NOP,\n            this.RTS, this.ADC, this.KIL, this.NOP, this.NOP, this.ADC, this.ROR, this.NOP, this.PLA, this.ADC, this.ROR, this.NOP, this.JMP, this.ADC, this.ROR, this.NOP,\n            this.BVS, this.ADC, this.KIL, this.NOP, this.NOP, this.ADC, this.ROR, this.NOP, this.SEI, this.ADC, this.NOP, this.NOP, this.NOP, this.ADC, this.ROR, this.NOP,\n            this.NOP, this.STA, this.NOP, this.NOP, this.STY, this.STA, this.STX, this.NOP, this.DEY, this.NOP, this.TXA, this.NOP, this.STY, this.STA, this.STX, this.NOP,\n            this.BCC, this.STA, this.KIL, this.NOP, this.STY, this.STA, this.STX, this.NOP, this.TYA, this.STA, this.TXS, this.NOP, this.NOP, this.STA, this.NOP, this.NOP,\n            this.LDY, this.LDA, this.LDX, this.NOP, this.LDY, this.LDA, this.LDX, this.NOP, this.TAY, this.LDA, this.TAX, this.NOP, this.LDY, this.LDA, this.LDX, this.NOP,\n            this.BCS, this.LDA, this.KIL, this.NOP, this.LDY, this.LDA, this.LDX, this.NOP, this.CLV, this.LDA, this.TSX, this.NOP, this.LDY, this.LDA, this.LDX, this.NOP,\n            this.CPY, this.CMP, this.NOP, this.NOP, this.CPY, this.CMP, this.DEC, this.NOP, this.INY, this.CMP, this.DEX, this.NOP, this.CPY, this.CMP, this.DEC, this.NOP,\n            this.BNE, this.CMP, this.KIL, this.NOP, this.NOP, this.CMP, this.DEC, this.NOP, this.CLD, this.CMP, this.NOP, this.NOP, this.NOP, this.CMP, this.DEC, this.NOP,\n            this.CPX, this.SBC, this.NOP, this.NOP, this.CPX, this.SBC, this.INC, this.NOP, this.INX, this.SBC, this.NOP, this.NOP, this.CPX, this.SBC, this.INC, this.NOP,\n            this.BEQ, this.SBC, this.KIL, this.NOP, this.NOP, this.SBC, this.INC, this.NOP, this.SED, this.SBC, this.NOP, this.NOP, this.NOP, this.SBC, this.INC, this.NOP\n        ].map((fn) => fn.bind(this));\n        \n        this.isPowered = false;\n    }\n    \n    powerOn() {\n        this.cycle = 0;\n        this.cycleOffset = 0;\n        \n        //Bus access optimizations\n        this.ppu   = this.bus.ppu;\n        this.ctrl1 = this.bus.ctrlConnector.controllers[0];\n        this.ctrl2 = this.bus.ctrlConnector.controllers[1];\n        this.cart  = this.bus.cartConnector.cartridge;\n        \n        //Interrupt vector optimizations\n        let cart = this.bus.cartConnector.cartridge;\n        this.nmiVector   = () => cart.cpuRead(0xFFFA) + cart.cpuRead(0xFFFB)*256;\n        this.resetVector = () => cart.cpuRead(0xFFFC) + cart.cpuRead(0xFFFD)*256;\n        this.irqVector   = () => cart.cpuRead(0xFFFE) + cart.cpuRead(0xFFFF)*256;\n        \n        //Accumulator\n        this.A = 0;\n        //Indexes\n        this.X = 0;\n        this.Y = 0;\n        //Status register: Negative|oVerflow|---|*BRK*|Decimal|Interrupt|Zero|Carry\n        this.P = 0x34; //b00110100\n        //Stack pointer\n        this.SP = 0xFD;\n        //Program counter\n        this.PC = this.resetVector();\n        \n        this.apu.powerOn();\n        \n        this.isPowered = true;\n    }\n    powerOff() {\n        this.apu.powerOff();\n        \n        this.isPowered = false;\n    }\n    \n    reset() {\n        this.apu.reset();\n        this.doReset();\n    }\n    \n    //== Execution ==================================================//\n    doInstructions(limit = 0) {\n        limit += this.cycleOffset;\n        while (this.cycle <= limit) {\n            let cycles = this.doInstruction();\n            this.apu.doCycles(cycles);\n        }\n    }\n    \n    doInstruction() {\n        this.opcode  = this.read(this.PC++);\n        this.operand = this.read(this.PC++);\n        \n        const cycle = this.cycle;\n        \n        this.instructionLookup[this.opcode](\n            (implied) => this.addressLookup[this.opcode](implied)\n        );\n        this.cycle += cyclesLookup[this.opcode];\n        \n        return this.cycle - cycle;\n    }\n    \n    //== Interrupts =================================================//\n    doNMI() {\n        this.pushWord(this.PC);\n        this.pushByte(this.P & ~0x10);\n        this.PC = this.nmiVector();\n        this.cycle += 7;\n    }\n    doReset() {\n        this.SP = this.SP+3;\n        this.Interrupt = false;\n        this.PC = this.resetVector();\n        this.cycle += 7;\n    }\n    doIRQ() {\n        if (this.Interrupt) return;\n        \n        this.pushWord(this.PC);\n        this.pushByte(this.P & ~0x10);\n        this.PC = this.irqVector();\n        this.cycle += 7;\n    }\n    \n    //== Memory access ==============================================//\n    read(address) {\n        if (address < 0x800) {\n            return this.ram[address];\n        } else if (address < 0x2000) {\n            return this.ram[address & 0x7FF];\n        } else if (address < 0x4018) {\n            if (address < 0x4000){\n                return this.ppu.readRegister(address);\n            } else if (address === 0x4016) {\n                return (address >>> 8) | this.ctrl1.read();\n            } else if (address === 0x4017) {\n                return (address >>> 8) | this.ctrl2.read();\n            } else {\n                return this.apu.readRegister(address);\n            }\n        } else {\n            return this.cart.cpuRead(address);\n        }\n    }\n    write(address, data) {\n        if (address < 0x800) {\n            this.ram[address] = data;\n        } else if (address < 0x2000) {\n            this.ram[address & 0x7FF] = data;\n        } else if (address < 0x4018) {\n            if (address < 0x4000) {\n                this.ppu.writeRegister(address,data);\n            } else if (address === 0x4014) {\n                let dmaAddress = data * 256;\n                for(let count = 0; count < 256; count++)\n                    this.ppu.OAMData = this.read(dmaAddress++);\n                \n                if (this.cycle & 1) this.cycle += 513;\n                else this.cycle += 514;\n            } else if (address === 0x4016) {\n                this.ctrl1.write(data);\n                this.ctrl2.write(data);\n            } else {\n                this.apu.writeRegister(address, data);\n            }\n        } else {\n            this.cart.cpuWrite(address, data);\n        }\n    }\n    \n    //== Stack ======================================================//\n    get SP()      { return this._SP; }\n    set SP(value) { this._SP = wrapByte(value); }\n    \n    pushByte(value) {\n        this.stack[this.SP--] = value;\n    }\n    pushWord(value) {\n        this.pushByte(value >> 8);\n        this.pushByte(value & 0xFF);\n    }\n    \n    pullByte() {\n        this.SP++;\n        return this.stack[this.SP];\n    }\n    pullWord() {\n        return this.pullByte() + this.pullByte()*256;\n    }\n    \n    //== Status =====================================================//\n    get Carry()          { return this.P & 0x01; }\n    get Zero()           { return this.P & 0x02; }\n    get Interrupt()      { return this.P & 0x04; }\n    get Decimal()        { return this.P & 0x08; }\n    get Overflow()       { return this.P & 0x40; }\n    get Negative()       { return this.P & 0x80; }\n    \n    set Carry(value)     { (value ? (this.P |= 0x01) : this.P &= ~0x01); }\n    set Zero(value)      { (value ? (this.P |= 0x02) : this.P &= ~0x02); }\n    set Interrupt(value) { (value ? (this.P |= 0x04) : this.P &= ~0x04); }\n    set Decimal(value)   { (value ? (this.P |= 0x08) : this.P &= ~0x08); }\n    set Overflow(value)  { (value ? (this.P |= 0x40) : this.P &= ~0x40); }\n    set Negative(value)  { (value ? (this.P |= 0x80) : this.P &= ~0x80); }\n    \n    //== Registers ==================================================//\n    get A() { return this._A; }\n    get X() { return this._X; }\n    get Y() { return this._Y; }\n    \n    set A(value) { this._A = this.ALU(value); }\n    set X(value) { this._X = this.ALU(value); }\n    set Y(value) { this._Y = this.ALU(value); }\n    \n    ALU(value) {\n        if (value > 0xFF) {\n            this.Carry = true;\n            while (value > 0xFF) value -= 0x100;\n        }\n        \n        this.Zero = (value === 0);\n        \n        if (value < 0) {\n            this.Negative = true;\n            while (value < 0) value += 0x100;\n        } else\n            this.Negative = (value >= 0x80);\n        \n        return value;\n    }\n    \n    //== Addressing Modes ===========================================//\n    \n    imp(implied) { this.PC--; return implied; }                   //Implied\n    imm() { return this.PC-1; }                                   //Immediate - #00\n    rel() { this.cycle++; return signByte(this.operand); }        //Relative - ±#00\n    \n    zero()  { return this.operand; }                              //Zero Page - $00\n    zeroX() { return wrapByte(this.operand + this.X); }           //Zero Page indexed X - $00+X\n    zeroY() { return wrapByte(this.operand + this.Y); }           //Zero Page indexed Y - $00+Y\n    \n    readWord() { return this.operand += this.read(this.PC++)*256; }\n    \n    abs() {\n        return this.readWord(); }                                 //Absolute - $0000\n    absX() {\n        if ((this.operand + this.X) > 0xFF) this.cycle++;\n        return this.readWord() + this.X; }                        //Absolute indexed X - $0000+X\n    absY() {\n        if ((this.operand + this.Y) > 0xFF) this.cycle++;\n        return this.readWord() + this.Y; }                        //Absolute indexed Y - $0000+Y\n    \n    ind() {\n        let indirect = this.readWord();\n        return this.read(indirect) + this.read(indirect+1)*256; } //Indirect - ($0000)\n    indX() {\n        let indirect = wrapByte(this.operand + this.X);\n        return this.read(indirect) + this.read(indirect+1)*256; } //Indirect indexed X - ($00+X)\n    indY() {\n        let indirect = this.read(this.operand) + this.read(this.operand+1)*256;\n        if ((wrapByte(indirect) + this.Y) > 0xFF) this.cycle++;\n        return indirect + this.Y; }                               //Indirect indexed Y - ($00)+Y\n    \n    //== OpCodes ====================================================//\n    \n    // Jump, subroutine and interrupt\n    BRK(fnFetchOperand) { //Interrupt\n        this.pushWord(this.PC);\n        this.pushByte(this.P);\n        this.Interrupt = true;\n        this.PC = fnFetchOperand(this.irqVector());\n    }\n    RTI(fnFetchOperand) { //Return from Interrupt\n        this.P = this.pullByte();\n        this.PC = fnFetchOperand(this.pullWord());\n    }\n    JSR(fnFetchOperand) { //Jump to Subroutine\n        this.pushWord(this.PC);\n        this.PC = fnFetchOperand();\n    }\n    RTS(fnFetchOperand) { //Return from Subroutine\n        this.PC = fnFetchOperand(this.pullWord() + 1);\n    }\n    JMP(fnFetchOperand) { //Jump to\n        this.PC = fnFetchOperand();\n    }\n    \n    // Branching\n    BPL(fnFetchOperand) { //Branch if Positive\n        if (!this.Negative)\n            this.PC += fnFetchOperand();\n    }\n    BMI(fnFetchOperand) { //Branch if Negative\n        if (this.Negative)\n            this.PC += fnFetchOperand();\n    }\n    BVC(fnFetchOperand) { //Branch if oVerflow Clear\n        if (!this.Overflow)\n            this.PC += fnFetchOperand();\n    }\n    BVS(fnFetchOperand) { //Branch if oVerflow Set\n        if (this.Overflow)\n            this.PC += fnFetchOperand();\n    }\n    BCC(fnFetchOperand) { //Branch if Carry Clear\n        if (!this.Carry)\n            this.PC += fnFetchOperand();\n    }\n    BCS(fnFetchOperand) { //Branch if Carry Set\n        if (this.Carry)\n            this.PC += fnFetchOperand();\n    }\n    BNE(fnFetchOperand) { //Branch if Not Equal\n        if (!this.Zero)\n            this.PC += fnFetchOperand();\n    }\n    BEQ(fnFetchOperand) { //Branch if Equal\n        if (this.Zero)\n            this.PC += fnFetchOperand();\n    }\n    \n    // Stack\n    PHA(fnFetchOperand) { this.pushByte(fnFetchOperand(this.A)); } //Push Accumulator\n    PHP(fnFetchOperand) { this.pushByte(fnFetchOperand(this.P)); } //Push Processor Status\n    PLA(fnFetchOperand) { this.A = fnFetchOperand(this.pullByte()); } //Pull Accumulator\n    PLP(fnFetchOperand) { this.P = fnFetchOperand(this.pullByte()); } //Pull Processor Status\n    \n    // Status flags\n    CLC(fnFetchOperand) { fnFetchOperand(this.Carry = false); }\n    CLD(fnFetchOperand) { fnFetchOperand(this.Decimal = false); }\n    CLI(fnFetchOperand) { fnFetchOperand(this.Interrupt = false); }\n    CLV(fnFetchOperand) { fnFetchOperand(this.Overflow = false); }\n    \n    SEC(fnFetchOperand) { fnFetchOperand(this.Carry = true); }\n    SED(fnFetchOperand) { fnFetchOperand(this.Decimal = true); }\n    SEI(fnFetchOperand) { fnFetchOperand(this.Interrupt = true); }\n    \n    // Register transfert\n    TAX(fnFetchOperand) { fnFetchOperand(this.X = this.A); }  //Transfert A to X\n    TXA(fnFetchOperand) { fnFetchOperand(this.A = this.X); }  //Transfert X to A\n    TAY(fnFetchOperand) { fnFetchOperand(this.Y = this.A); }  //Transfert A to Y\n    TYA(fnFetchOperand) { fnFetchOperand(this.A = this.Y); }  //Transfert Y to A\n    TSX(fnFetchOperand) { fnFetchOperand(this.X = this.SP); } //Transfert SP to X\n    TXS(fnFetchOperand) { fnFetchOperand(this.SP = this.X); } //Transfert X to SP\n    \n    // Move operations\n    LDA(fnFetchOperand) { this.A = this.read(fnFetchOperand()); } //Load Accumulator\n    LDX(fnFetchOperand) { this.X = this.read(fnFetchOperand()); } //Load X\n    LDY(fnFetchOperand) { this.Y = this.read(fnFetchOperand()); } //Load Y\n    STA(fnFetchOperand) { this.write(fnFetchOperand(), this.A); } //Store Accumulator\n    STX(fnFetchOperand) { this.write(fnFetchOperand(), this.X); } //Store X\n    STY(fnFetchOperand) { this.write(fnFetchOperand(), this.Y); } //Store Y\n    \n    // Arithmetic operations\n    ADC(fnFetchOperand) { this.add(this.A, this.read(fnFetchOperand()));      } //Add with Carry\n    SBC(fnFetchOperand) { this.add(this.A, 0xFF-this.read(fnFetchOperand())); } //Subtract with Carry\n    add(reg, operand) {\n        let alu = reg + operand + this.Carry;\n        this.Carry = false;\n        this.Overflow = (reg^alu) & (operand^alu) & 0x80;\n        this.A = alu;\n    }\n    \n    ASL(fnFetchOperand) { //Arithmetic Shift Left\n        let operand;\n        if (this.opcode === 0x0A) { //Opcode $0A is implied\n            operand = fnFetchOperand(this.A);\n            this.A = operand * 2;\n        } else {\n            let address = fnFetchOperand();\n            operand = this.read(address);\n            this.write(address, this.ALU(operand * 2));\n        }\n        this.Carry = (operand & 0x80);\n    }\n    LSR(fnFetchOperand) { //Logical Shift Right\n        let operand;\n        if (this.opcode === 0x4A) { //Opcode $4A is implied\n            operand = fnFetchOperand(this.A);\n            this.A = operand >>> 1;\n        } else {\n            let address = fnFetchOperand();\n            operand = this.read(address);\n            this.write(address, this.ALU(operand >>> 1));\n        }\n        this.Carry = (operand & 0x01);\n    }\n    ROL(fnFetchOperand) { //Rotate Left\n        let operand;\n        if (this.opcode === 0x2A) { //Opcode $2A is implied\n            operand = fnFetchOperand(this.A);\n            this.A = operand * 2 + this.Carry;\n        } else {\n            let address = fnFetchOperand();\n            operand = this.read(address);\n            this.write(address, this.ALU(operand * 2 + this.Carry));\n        }\n        this.Carry = (operand & 0x80);\n    }\n    ROR(fnFetchOperand) { //Rotate Right\n        let operand;\n        if (this.opcode === 0x6A) { //Opcode $6A is implied\n            operand = fnFetchOperand(this.A);\n            this.A = (operand >>> 1) + this.Carry*128;\n        } else {\n            let address = fnFetchOperand();\n            operand = this.read(address);\n            this.write(address, this.ALU((operand >>> 1) + this.Carry*128));\n        }\n        this.Carry = (operand & 0x01);\n    }\n    \n    INC(fnFetchOperand) { //Increment memory\n        let address = fnFetchOperand();\n        this.write(address, this.ALU(this.read(address) + 1));\n    }\n    DEC(fnFetchOperand) { //Decrement memory\n        let address = fnFetchOperand();\n        this.write(address, this.ALU(this.read(address) - 1));\n    }\n    INX(fnFetchOperand) { this.X = fnFetchOperand(this.X) + 1; } //Increment X\n    DEX(fnFetchOperand) { this.X = fnFetchOperand(this.X) - 1; } //Decrement X\n    INY(fnFetchOperand) { this.Y = fnFetchOperand(this.Y) + 1; } //Increment Y\n    DEY(fnFetchOperand) { this.Y = fnFetchOperand(this.Y) - 1; } //Decrement Y\n    \n    BIT(fnFetchOperand) { //Bit test\n        let operand = this.read(fnFetchOperand());\n        this.Negative = (operand >= 0x80);\n        if (this.Negative) {\n            this.Overflow = (operand >= 0xC0);\n        } else {\n            this.Overflow = (operand >= 0x40);\n        }\n        this.Zero = !(this.A & operand);\n    }\n    \n    CMP(fnFetchOperand) { this.compare(this.A, this.read(fnFetchOperand())); } //Compare with Accumulator\n    CPX(fnFetchOperand) { this.compare(this.X, this.read(fnFetchOperand())); } //Compare with X\n    CPY(fnFetchOperand) { this.compare(this.Y, this.read(fnFetchOperand())); } //Compare with Y\n    compare(reg, operand) {\n        this.ALU(reg + (0x100-operand));\n        this.Carry = (reg >= operand);\n    }\n    \n    // Logical operations\n    ORA(fnFetchOperand) { this.A = this.A | this.read(fnFetchOperand()); } //Logical OR\n    AND(fnFetchOperand) { this.A = this.A & this.read(fnFetchOperand()); } //Logical AND\n    EOR(fnFetchOperand) { this.A = this.A ^ this.read(fnFetchOperand()); } //Exclusive OR\n    \n    // Others\n    NOP(fnFetchOperand) { fnFetchOperand(); }\n    KIL(fnFetchOperand) { this.doReset(); } // eslint-disable-line no-unused-vars\n}\n \nexport default CPU;","export const pxlColors = new Uint32Array([\n    0xFF545454, 0xFF741E00, 0xFF901008, 0xFF880030, 0xFF640044, 0xFF30005C, 0xFF000454, 0xFF00183C,\n    0xFF002A20, 0xFF003A08, 0xFF004000, 0xFF003C00, 0xFF3C3200, 0xFF000000, 0xFF000000, 0xFF000000,\n    0xFF989698, 0xFFC44C08, 0xFFEC3230, 0xFFE41E5C, 0xFFB01488, 0xFF6414A0, 0xFF202298, 0xFF003C78,\n    0xFF005A54, 0xFF007228, 0xFF007C08, 0xFF287600, 0xFF786600, 0xFF000000, 0xFF000000, 0xFF000000,\n    0xFFECEEEC, 0xFFEC9A4C, 0xFFEC7C78, 0xFFEC62B0, 0xFFEC54E4, 0xFFB458EC, 0xFF646AEC, 0xFF2088D4,\n    0xFF00AAA0, 0xFF00C474, 0xFF20D04C, 0xFF6CCC38, 0xFFCCB438, 0xFF3C3C3C, 0xFF000000, 0xFF000000,\n    0xFFECEEEC, 0xFFECCCA8, 0xFFECBCBC, 0xFFECB2D4, 0xFFECAEEC, 0xFFD4AEEC, 0xFFB0B4EC, 0xFF90C4E4,\n    0xFF78D2CC, 0xFF78DEB4, 0xFF90E2A8, 0xFFB4E298, 0xFFE4D6A0, 0xFFA0A2A0, 0xFF000000, 0xFF000000\n]);\nexport const cssColors = [\n    '#545454', '#001E74', '#081090', '#300088', '#440064', '#5C0030', '#540400', '#3C1800',\n    '#202A00', '#083A00', '#004000', '#003C00', '#00323C', '#000000', '#000000', '#000000',\n    '#989698', '#084CC4', '#3032EC', '#5C1EE4', '#8814B0', '#A01464', '#982220', '#783C00',\n    '#545A00', '#287200', '#087C00', '#007628', '#006678', '#000000', '#000000', '#000000',\n    '#ECEEEC', '#4C9AEC', '#787CEC', '#B062EC', '#E454EC', '#EC58B4', '#EC6A64', '#D48820',\n    '#A0AA00', '#74C400', '#4CD020', '#38CC6C', '#38B4CC', '#3C3C3C', '#000000', '#000000',\n    '#ECEEEC', '#A8CCEC', '#BCBCEC', '#D4B2EC', '#ECAEEC', '#ECAED4', '#ECB4B0', '#E4C490',\n    '#CCD278', '#B4DE78', '#A8E290', '#98E2B4', '#A0D6E4', '#A0A2A0', '#000000', '#000000'\n];\n","export class VideoBuffer {\n    constructor(width, height) {\n        this.width  = width;\n        this.height = height;\n        \n        this.createNewBuffer();\n    }\n    \n    createNewBuffer() {\n        if (typeof ImageData === 'function') {\n            this.image = new ImageData(this.width, this.height);\n            this.data  = new Uint32Array(this.image.data.buffer);\n        } else {\n            this.image = null;\n            this.data  = new Uint32Array(this.width * this.height);\n        }\n    }\n    \n    //===============================================================//\n    writePixels(x, y, values) {\n        this.data.set(values, y*this.width + x);\n    }\n    \n    getFrame() {\n        let frame = this.image;\n        this.createNewBuffer();\n        return frame;\n    }\n}\n\nexport default VideoBuffer;\n","import { VideoBuffer, Colors } from './Video/index.js';\nconst { pxlColors, cssColors } = Colors;\n\nconst bitplaneLookup = {\n    0:     0, // 0x0000\n    32768: 1, // 0x8000\n    128:   2, // 0x0080\n    32896: 3, // 0x8080\n};\n\nexport class PPU {\n    constructor(nes) {\n        this.bus = nes;\n        \n        this.vblank = false;\n        \n        //Internal Video RAM (or Character Internal RAM (CI-RAM) )\n        this.vram = new Uint8Array(0x800);\n        this.vramBank = [this.vram.subarray(0x000, 0x400), this.vram.subarray(0x400, 0x800)];\n        \n        //Object Attribute Memory\n        this.oamPrimary   = new Uint8Array(64*4);\n        this.oamSecondary = new Uint8Array(8*4);\n        this.oamAddress = 0; //For accessing primary OAM through $2004 and DMA\n        this.oamIndex   = 0; //For internal access to secondary OAM\n        \n        //Palettes\n        this.palette = [new Uint8Array(4*4), new Uint8Array(4*4)];\n        \n        //Buffers\n        this.bkgPixelsBuffer = new Uint32Array(16);\n        this.sprPixelsBuffer = new Uint32Array(8);\n        \n        //Layers\n        this.bkgLayer        = new VideoBuffer(264, 256);\n        this.sprBehindLayer  = new VideoBuffer(264, 256);\n        this.sprInFrontLayer = new VideoBuffer(264, 256);\n        this.sprLayer        = this.sprInFrontLayer;\n        \n        //Used for Sprite0 hit detection\n        this.sprite0Layer = new Uint32Array(264);\n        \n        this.isPowered = false;\n    }\n    \n    powerOn() {\n        this.control    = null; //$2000 Control\n        this.mask       = null; //$2001 Mask\n        this.status     = null; //$2002 Status\n        this.OAMAddress = null; //$2003 OAM address\n        this.oamPrimary.fill(0);//$2004 OAM data\n        this.scroll     = null; //$2005 Scroll\n        this.address    = null; //$2006 Address\n        this.data       = null; //$2007 Data\n        \n        this.ntsc = (this.bus.cartConnector.metadata.tvSystem === \"NTSC\");\n        \n        //Bus access optimizations\n        this.cpu    = this.bus.cpu;\n        this.cart   = this.bus.cartConnector.cartridge;\n        this.output = this.bus.videoOutput;\n        \n        this.output.addLayer(this.sprBehindLayer);\n        this.output.addLayer(this.bkgLayer);\n        this.output.addLayer(this.sprInFrontLayer);\n        this.output.start();\n        \n        this.isPowered = true;\n    }\n    powerOff() {\n        this.output.stop();\n        \n        this.isPowered = false;\n    }\n    \n    reset() {\n        this.control = null; //$2000 Control Register\n        this.mask    = null; //$2001 Mask Register\n        this.scroll  = null; //$2005 Scroll Register\n        this.data    = null; //$2007 Data Register\n    }\n    \n    //== Vertical Blank =============================================//\n    doVBlank() {\n        this.vblank = true;\n        if (this.nmiEnabled) this.cpu.doNMI();\n    }\n    endVBlank() {\n        this.status = null;\n    }\n    \n    //== Registers ==================================================//\n    //= 0x2000 Control =//\n    set control(value) {\n        if (value !== null) {\n            this.addressBuffer &= ~0x0C00; // b1111.0011.1111.1111\n            this.addressBuffer |= (value & 0x3)<<10;\n            \n            this.addressIncrement = (value & 0x04) ? 32 : 1;\n            this.sprPatternTable =  (value & 0x08) ? 0x1000 : 0x0000;\n            this.bkgPatternTable =  (value & 0x10) ? 0x1000 : 0x0000;\n            this.sprite8x16 =     !!(value & 0x20);\n            this.nmiEnabled =     !!(value & 0x80);\n        } else {\n            this.addressIncrement = 1;     //[1,32]\n            this.sprPatternTable = 0x0000; //[0x0000,0x1000]\n            this.bkgPatternTable = 0x0000; //[0x0000,0x1000]\n            this.sprite8x16 = false;\n            this.nmiEnabled = false;\n        }\n        this.spriteHeight = this.sprite8x16 ? 16 : 8;\n    }\n    \n    //= 0x2001 Mask =//\n    set mask(value) {\n        if (value) {\n            this.grayscale       = !!(value & 0x01);\n            this.showLeftMostBkg = !!(value & 0x02);\n            this.showLeftMostSpr = !!(value & 0x04);\n            this.showBackground  = !!(value & 0x08);\n            this.showSprites     = !!(value & 0x10);\n            this.emphasizeRed    = !!(value & (this.ntsc ? 0x20 : 0x40));\n            this.emphasizeGreen  = !!(value & (this.ntsc ? 0x40 : 0x20));\n            this.emphasizeBlue   = !!(value & 0x80);\n            \n            this.renderingEnabled = !!(value & 0x18);\n        } else {\n            this.grayscale       = false;\n            this.showLeftMostBkg = false;\n            this.showLeftMostSpr = false;\n            this.showBackground  = false;\n            this.showSprites     = false;\n            this.emphasizeRed    = false;\n            this.emphasizeGreen  = false;\n            this.emphasizeBlue   = false;\n            \n            this.renderingEnabled = false;\n        }\n    }\n        \n    //= 0x2002 Status =//\n    get status() {\n        let value = (this.spriteOverflow && 0x20) |\n                    (this.sprite0Hit && 0x40) |\n                    (this.vblank && 0x80);\n        this.vblank = false;\n        this.writeToggle = false;\n        \n        return value;\n    }\n    set status(value) {\n        this.spriteOverflow = false;\n        this.sprite0Hit = false;\n        this.sprite0 = false;\n        this.vblank = false;\n    }\n    \n    //= 0x2003 OAM address =//\n    set OAMAddress(value) {\n        this.oamAddress = value || 0x00;\n    }\n    \n    //= 0x2004 OAM data =//\n    get OAMData() {\n        return this.oamPrimary[this.oamAddress];\n    }\n    set OAMData(value) {\n        this.oamPrimary[this.oamAddress++] = value;\n        if (this.oamAddress > 0xFF) this.oamAddress = 0x00;\n    }\n    \n    //= 0x2005 Scroll =//\n    set scroll(value) {\n        if (value !== null) {\n            let toggle = this.writeToggle;\n            let addressBuffer = this.addressBuffer;\n            if (toggle) {\n                // Vertical scroll\n                addressBuffer &= 0x0C1F; // b0000.1100.0001.1111\n                addressBuffer |= ((value & 0x07) << 12);\n                addressBuffer |= ((value & 0xF8) << 2);\n                \n                this.fineScrollY = value & 0x07;\n            } else {\n                // Horizontal scroll\n                addressBuffer &= 0x7FE0; // b0111.1111.1110.0000\n                addressBuffer |= (value >>> 3);\n                \n                this.fineScrollX = value & 0x07;\n            }\n            this.addressBuffer = addressBuffer;\n            this.writeToggle = !toggle;\n        } else {\n            this.writeToggle = false;\n            this.fineScrollX = 0x0;\n            this.fineScrollY = 0x0;\n        }\n    }\n    \n    //= 0x2006 Address =//\n    set address(value) {\n        if (value !== null) {\n            let toggle = this.writeToggle;\n            if (toggle) {\n                this.addressBuffer = (this.addressBuffer & 0xff00) | value;\n                this.addressBus = this.addressBuffer;\n            } else {\n                value = (value & 0x3f) << 8;\n                this.addressBuffer = (this.addressBuffer & 0x00ff) | value;\n            }\n            this.writeToggle = !toggle;\n        } else {\n            this.writeToggle = false;\n            this.addressBus = this.addressBuffer = 0x0000;\n        }\n    }\n    \n    //= 0x2007 Data =//\n    get data() {\n        let value;\n        let address = this.addressBus;\n        \n        if (address >= 0x3F00)\n            value = this.readPalette(address);\n        else\n            value = this.readBuffer;\n        \n        this.readBuffer = this.read(address);\n        this.addressBus = address + this.addressIncrement;\n        \n        return value;\n    }\n    set data(value) {\n        if (value !== null) {\n            let address = this.addressBus;\n            if (address >= 0x3F00)\n                this.writePalette(address, value);\n            else\n                this.write(address, value);\n            \n            this.addressBus = address + this.addressIncrement;\n        } else\n            this.readBuffer = 0x00;\n    }\n    \n    //== Registers access ===========================================//\n    readRegister(address) {\n        if (address > 0x2007) address &= 0x2007;\n        switch (address) {\n        case 0x2002: return this.status;\n        case 0x2004: return this.OAMData;\n        case 0x2007: return this.data;\n        default:     return 0x00;\n        }\n    }\n    writeRegister(address, data) {\n        if (address > 0x2007) address &= 0x2007;\n        switch (address) {\n        case 0x2000: this.control    = data; break;\n        case 0x2001: this.mask       = data; break;\n        case 0x2003: this.OAMAddress = data; break;\n        case 0x2004: this.OAMData    = data; break;\n        case 0x2005: this.scroll     = data; break;\n        case 0x2006: this.address    = data; break;\n        case 0x2007: this.data       = data; break;\n        }\n    }\n    \n    //== Data =======================================================//\n    read(address) {\n        let cartridge = this.cart;\n        if (cartridge.ciramEnabled(address))\n            return this.vramBank[cartridge.ciramA10(address) ? 1 : 0][address & 0x3FF];\n        else\n            return cartridge.ppuRead(address);\n    }\n    write(address, data) {\n        let cartridge = this.cart;\n        if (cartridge.ciramEnabled(address))\n            this.vramBank[cartridge.ciramA10(address) ? 1 : 0][address & 0x3FF] = data;\n        else\n            cartridge.ppuWrite(address, data);\n    }\n    \n    //== Palettes ===================================================//\n    get backdrop() { return this.palette[0][0]; }\n    \n    get bkgPalette() { return this.palette[0]; }\n    get sprPalette() { return this.palette[1]; }\n    \n    readPalette(address) {\n        if (address & 0x3)\n            return this.palette[(address & 0x10) >>> 4][address & 0x0F];\n        else\n            return this.palette[0][0x00];\n    }\n    writePalette(address, data) {\n        if (address & 0x3)\n            this.palette[(address & 0x10) >>> 4][address & 0x0F] = data;\n        else\n            this.palette[0][address & 0x0F] = data;\n    }\n    \n    //== Scrolling ==================================================//\n    incrementX() {\n        if (!this.renderingEnabled) return;\n        \n        let addressBus = this.addressBus;\n        if ((addressBus & 0x001F) === 31) {\n            addressBus &= 0x7FE0; // b0111.1111.1110.0000\n            addressBus ^= 0x0400; // b0000.0100.0000.0000\n        } else {\n            addressBus++;\n        }\n        this.addressBus = addressBus;\n    }\n    incrementY() {\n        if (!this.renderingEnabled) return;\n        \n        let addressBus = this.addressBus;\n        if (addressBus < 0x7000) {\n            addressBus += 0x1000;\n            this.fineScrollY++;\n        } else {\n            addressBus -= 0x7000; \n            \n            let coarseY = (addressBus & 0x03E0);\n            if (coarseY === 0x03A0) { // 29 << 5\n                addressBus &= 0x0C1F;\n                addressBus ^= 0x0800;\n            } else\n            if (coarseY === 0x03E0)   // 31 << 5\n                addressBus &= 0xFC1F;\n            else\n                addressBus += 0x0020;\n            \n            this.fineScrollY = addressBus >>> 12;\n        }\n        this.addressBus = addressBus;\n    }\n    \n    resetX() {\n        if (!this.renderingEnabled) return;\n        \n        let addressBus = this.addressBus;            //  _yyy.nnYY.YYYX.XXXX\n        addressBus &= 0x7BE0;                        // b0111.1011.1110.0000\n        addressBus |= (this.addressBuffer & 0x041F); // b0000.0100.0001.1111\n        this.addressBus = addressBus;\n    }\n    resetY() {\n        if (!this.renderingEnabled) return;\n        \n        let addressBus = this.addressBus;            //  _yyy.nnYY.YYYX.XXXX\n        addressBus &= 0x041F;                        // b0000.0100.0001.1111\n        addressBus |= (this.addressBuffer & 0x7BE0); // b0111.1011.1110.0000\n        this.addressBus = addressBus;\n        \n        this.fineScrollY = addressBus >>> 12;\n    }\n    \n    //== Background =================================================//\n    fetchNameTable(bus) {\n        let address = 0x2000 + (bus & 0x0FFF);\n        return this.read(address);\n    }\n    fetchAttributeTable(bus) {\n        let address = 0x23C0 | (bus & 0x0C00) | (bus>>>4 & 0x0038) | (bus>>>2 & 0x0007);\n        let offset = 0;\n        if (bus & 0x0002) offset += 2;\n        if (bus & 0x0040) offset += 4;\n        return (this.read(address) >>> offset) & 0x3;\n    }\n    fetchBkgPatternTable(patternIndex, row) {\n        let address = this.bkgPatternTable + patternIndex*16 + row;\n        return this.read(address)*256 + this.read(address+8);\n    }\n    \n    fetchTile() {\n        if (!this.showBackground) return;\n\n        let addressBus = this.addressBus;\n        \n        let patternIndex = this.fetchNameTable(addressBus);\n        let paletteIndex = this.fetchAttributeTable(addressBus);\n        let pattern      = this.fetchBkgPatternTable(patternIndex, this.fineScrollY);\n        \n        this.bkgPixelsBuffer.copyWithin(0, 8);\n        this.setPatternPixels(this.bkgPixelsBuffer.subarray(8), pattern, this.bkgPalette, paletteIndex);\n    }\n    \n    fetchNullTile() {\n        if (!this.showBackground) return;\n        \n        let addressBus = this.addressBus;\n        let patternIndex = this.fetchNameTable(addressBus);\n        this.fetchAttributeTable(addressBus);\n        this.fetchBkgPatternTable(patternIndex, this.fineScrollY);\n    }\n    fetchNullNTs() {\n        if (!this.showBackground) return;\n        \n        let addressBus = this.addressBus;\n        this.fetchNameTable(addressBus);\n        this.fetchNameTable(addressBus);\n    }\n    \n    renderTile(dot, scanline) {\n        if (!this.showBackground) return;\n        \n        let offset = this.fineScrollX;\n        let pixels = this.bkgPixelsBuffer.subarray(offset, offset+8);\n        \n        if (this.sprite0 && !this.sprite0Hit) {\n            if (this.sprite0Layer.subarray(dot, dot+8).some((e,i) => (e && pixels[i])))\n                this.sprite0Hit = true;\n        }\n        \n        this.bkgLayer.writePixels(dot, scanline, pixels);\n    }\n    \n    //== Sprites ====================================================//\n    clearSecondaryOAM() {\n        this.oamSecondary.fill(0xFF);\n        this.oamIndex = 0;\n    }\n    evaluateSprites(scanline) {\n        let spritesList = this.oamPrimary;\n        let sprites     = this.oamSecondary;\n        \n        let height = this.spriteHeight;\n        \n        while (this.oamAddress < 256) {\n            let y = spritesList[this.oamAddress];\n            \n            let top    = y + height; //Sprite's coordinates are bottom-left\n            let bottom = y;\n            \n            if (this.oamIndex === 32) {\n                this.oamAddress++; //This causes the 'Sprite overflow bug'\n                this.oamIndex++;\n            } else {\n                if (this.oamIndex < 32)\n                    sprites[this.oamIndex] = y;\n                if (scanline >= bottom && scanline < top) {\n                    if (this.oamIndex < 32) {\n                        if (this.oamAddress === 0)\n                            this.sprite0 = true;\n                        for (let i=1; i<4; i++)\n                            sprites[this.oamIndex+i] = spritesList[this.oamAddress+i];\n                        this.oamIndex += 4;\n                    } else {\n                        this.spriteOverflow = true;\n                        break;\n                    }\n                }\n                this.oamAddress += 4;\n            }\n        }\n        this.oamIndex = 0;\n    }\n    \n    fetchSprPatternTable(patternIndex, row) {\n        let offset = this.sprPatternTable;\n        if (this.sprite8x16) {\n            offset = (patternIndex & 0x1) << 12;\n            patternIndex &= 0xFE;\n        }\n        let address = offset + patternIndex*16 + row;\n        return this.read(address)*256 + this.read(address+8);\n    }\n    \n    fetchSprite(scanline) {\n        if (!this.showSprites) return;\n        \n        let addressBus = this.addressBus;     //\n        this.fetchNameTable(addressBus);      // Garbage fetch\n        this.fetchAttributeTable(addressBus); //\n        \n        this.oamAddress = 0x00;\n        \n        let sprites = this.oamSecondary;\n        \n        if (this.sprite0)\n            this.sprite0 = (this.oamIndex === 0);\n        \n        let y = sprites[this.oamIndex++];\n        let row = scanline - y;\n        \n        let patternIndex = sprites[this.oamIndex++];\n        let attributes   = sprites[this.oamIndex++];\n        \n        // Vertical Flip\n        if (attributes >= 0x80) {\n            row = this.spriteHeight - row - 1;\n            attributes -= 0x80;\n        }\n        \n        let flip;\n        // Horizontal Flip\n        if (attributes >= 0x40) {\n            flip = true;\n            attributes -= 0x40;\n        }\n        \n        // Behind Background\n        if (attributes >= 0x20) {\n            this.sprLayer = this.sprBehindLayer;\n            attributes -= 0x20;\n        } else\n            this.sprLayer = this.sprInFrontLayer;\n        \n        // 8x16 Sprites\n        if (row >= 8) {\n            row -= 8;\n            patternIndex++;\n        }\n        \n        let pattern = this.fetchSprPatternTable(patternIndex, row);\n        this.setPatternPixels(this.sprPixelsBuffer, pattern, this.sprPalette, attributes, flip);\n    }\n        \n    fetchNullSprite() {\n        if (!this.showSprites) return;\n        \n        let addressBus = this.addressBus;\n        this.fetchNameTable(addressBus);\n        this.fetchAttributeTable(addressBus);\n        \n        this.fetchSprPatternTable(this.sprPatternTable, 0xFF);\n    }\n    \n    renderSprite(scanline) {\n        if (!this.showSprites) return;\n        \n        let x = this.oamSecondary[this.oamIndex++];\n        let pixels = this.sprPixelsBuffer;\n        \n        if (this.sprite0)\n            this.sprite0Layer.fill(0).set(pixels, x);\n        \n        this.sprLayer.writePixels(x, scanline+1, pixels);\n    }\n    \n    //== Pixels Rendering ===========================================//\n    setPatternPixels(target, pattern, palette, paletteIndex, flip) {\n        if (paletteIndex >= 4) paletteIndex %= 4;\n        let paletteOffset = paletteIndex * 4;\n        \n        for (let offset = 0; offset < 8; offset++) {\n            let colorIndex = bitplaneLookup[(pattern << offset) & 0x8080];\n            target[flip ? 7-offset : offset] = colorIndex ? pxlColors[palette[paletteOffset + colorIndex]] : 0x00000000;\n        }\n    }\n    //== Output =====================================================//\n    printFrame() {\n        this.output.schedule(cssColors[this.backdrop]);\n    }\n}\n\nexport default PPU;\n","const frameTime = 1000/60;\n\nconst renderLines = 239;\nconst vblankStart = 241;\nconst vblankEnd   = 261;\n\nconst cyclesPerScanline = 341/3;\nconst cyclesPerFrame    = (341*261 + 340.5)/3;\n\nconst cyclesBeforeVBlankStart   = vblankStart * cyclesPerScanline;\nconst cyclesBeforeVBlankEnd     = vblankEnd * cyclesPerScanline - 8;\nconst cyclesBeforePreRenderLine = 261*cyclesPerScanline;\n\nexport class Engine {\n    constructor(nes) {\n        this.bus = nes;\n        \n        this.firstLoop = this.firstLoop.bind(this);\n        this.mainLoop  = this.mainLoop.bind(this);\n        \n        this.runningLoop = null;\n        \n        this.init();\n        \n        this.isPowered = false;\n        this.isPaused = false;\n    }\n    \n    init() {\n        this.frame = 0;\n        this.dropped = 0;\n        \n        this.fps = 60;\n        this.performance = 1.0;\n        \n        this._delta = 0.0;\n        this._lastTimestamp = 0.0;\n        this._frameTimeThisSecond = 0.0;\n        this._framesThisSecond = 0;\n        this._fps = 60;\n    }\n    \n    //=======================================================================================//\n    \n    powerOn() {\n        this.cpu = this.bus.cpu;\n        this.ppu = this.bus.ppu;\n        \n        this.init();\n        this.coldBoot();\n        \n        this.isPowered = true;\n        this.isPaused = false;\n    }\n    powerOff() {\n        clearTimeout(this.runningLoop);\n        this.runningLoop = null;\n        \n        this.isPowered = false;\n        this.isPaused = false;\n    }\n    \n    pause() {\n        if (this.isPaused) {\n            this.runningLoop = setTimeout(this.firstLoop, 0);\n            this.isPaused = false;\n        } else {\n            clearTimeout(this.runningLoop);\n            this.runningLoop = null;\n            this.isPaused = this.isPowered;\n        }\n        return this.isPaused;\n    }\n    \n    //=======================================================================================//\n    \n    coldBoot() {\n        let cpu = this.cpu;\n        let ppu = this.ppu;\n        \n        cpu.cycleOffset = 0;\n        \n        cpu.doInstructions(2279); // 1.275ms after boot\n        ppu.vblank = true;\n        cpu.doInstructions(4757); // 2.662ms after boot\n        ppu.vblank = true;\n        \n        cpu.doInstructions(cyclesBeforeVBlankStart);\n        ppu.doVBlank();\n        cpu.doInstructions(cyclesBeforeVBlankEnd);\n        ppu.endVBlank();\n        \n        this.doPreFetch(cpu, ppu, 261);\n        \n        this.runningLoop = setTimeout(this.firstLoop, 0);\n    }\n    \n    firstLoop() {\n        if (typeof window === 'undefined') return;\n        \n        let timestamp = window.performance.now();\n        \n        let cpu = this.cpu;\n        let ppu = this.ppu;\n        \n        this.doFrame(cpu, ppu);\n        \n        this.updateStats(window.performance.now() - timestamp);\n        \n        this._lastTimestamp = timestamp;\n        \n        this.runningLoop = setTimeout(this.mainLoop, 0);\n    }\n    \n    mainLoop() {\n        let timestamp = window.performance.now();\n        \n        this._delta = (timestamp - this._lastTimestamp);\n        \n        if (this._delta >= frameTime) {\n            if (this._delta > 1000) {\n                this.pause();\n                return;\n            }\n            \n            let cpu = this.cpu;\n            let ppu = this.ppu;\n            \n            while ((this._delta -= frameTime) >= frameTime) {\n                this.skipFrame(cpu, ppu);\n                this._fps--;\n            }\n            this.doFrame(cpu, ppu);\n            \n            this.updateStats(window.performance.now() - timestamp);\n            \n            this._lastTimestamp = timestamp;\n        }\n        \n        this.runningLoop = setTimeout(this.mainLoop, 0);\n    }\n    \n    updateStats(frameTime) {\n        this._frameTimeThisSecond += frameTime;\n        this._framesThisSecond++;\n        \n        if (this._framesThisSecond >= this._fps) {\n            this.performance = 1000 / this._frameTimeThisSecond;\n            this.fps = this._fps;\n            \n            this._frameTimeThisSecond = 0.0;\n            this._framesThisSecond = 0;\n            this._fps = 60;\n        }\n    }\n    \n    //=======================================================================================//\n    \n    doFrame(cpu, ppu) {\n        cpu.cycleOffset = this.frame * cyclesPerFrame;\n        \n        for (let scanline = 0; scanline <= renderLines; scanline++)\n            this.doScanline(cpu, ppu, scanline);\n        \n        cpu.doInstructions(cyclesBeforeVBlankStart);\n        \n        ppu.printFrame();\n        \n        // VBlank\n        ppu.doVBlank();\n        cpu.doInstructions(cyclesBeforeVBlankEnd);\n        ppu.endVBlank();\n        \n        // Pre-render line\n        this.doPreRenderLine(cpu, ppu);\n        \n        this.frame++;\n    }\n    \n    skipFrame(cpu, ppu) {\n        cpu.cycleOffset = this.frame * cyclesPerFrame;\n        \n        cpu.doInstructions(cyclesBeforeVBlankStart);\n        ppu.doVBlank();\n        cpu.doInstructions(cyclesBeforeVBlankEnd);\n        ppu.endVBlank();\n        cpu.doInstructions(cyclesPerFrame);\n        \n        this.frame++;\n        this.dropped++;\n    }\n    \n    doScanline(cpu, ppu, scanline) {\n        let cyclesBeforeScanline = scanline*cyclesPerScanline;\n        let dot = 0;\n        \n        ppu.clearSecondaryOAM();\n        while (dot < 64) {\n            cpu.doInstructions(cyclesBeforeScanline + dot/3);\n            ppu.renderTile(dot, scanline);\n            ppu.fetchTile();\n            ppu.incrementX();\n            dot += 8;\n        }\n        ppu.evaluateSprites(scanline);\n        while (dot < 248) {\n            cpu.doInstructions(cyclesBeforeScanline + dot/3);\n            ppu.renderTile(dot, scanline);\n            ppu.fetchTile();\n            ppu.incrementX();\n            dot += 8;\n        }\n        \n        // HBlank\n        cpu.doInstructions(cyclesBeforeScanline + dot/3);\n        ppu.renderTile(dot, scanline);\n        ppu.fetchNullTile();\n        ppu.incrementY();\n        ppu.resetX();\n        dot += 8;\n        \n        while (dot < 320) {\n            cpu.doInstructions(cyclesBeforeScanline + dot/3);\n            ppu.fetchSprite(scanline);\n            ppu.renderSprite(scanline);\n            dot += 8;\n        }\n        \n        this.doPreFetch(cpu, ppu, scanline);\n    }\n    \n    doPreRenderLine(cpu, ppu) {\n        let cyclesBeforeScanline = cyclesBeforePreRenderLine;\n        let dot = 0;\n        \n        while (dot < 256) {\n            cpu.doInstructions(cyclesBeforeScanline + dot/3);\n            ppu.fetchNullTile();\n            ppu.incrementX();\n            dot += 8;\n        }\n        ppu.incrementY();\n        ppu.resetX();\n        while (dot < 279) {\n            cpu.doInstructions(cyclesBeforeScanline + dot/3);\n            ppu.fetchNullSprite();\n            dot += 8;\n        }\n        while (dot < 304) {\n            cpu.doInstructions(cyclesBeforeScanline + dot/3);\n            ppu.fetchNullSprite();\n            ppu.resetY();\n            dot += 8;\n        }\n        while (dot < 320) {\n            cpu.doInstructions(cyclesBeforeScanline + dot/3);\n            ppu.fetchNullSprite();\n            dot += 8;\n        }\n        \n        this.doPreFetch(cpu, ppu, 261);\n    }\n    \n    doPreFetch(cpu, ppu, scanline) {\n        let cyclesBeforeScanline = scanline*cyclesPerScanline;\n        let dot = 320;\n        \n        while (dot < 336) {\n            cpu.doInstructions(cyclesBeforeScanline + dot/3);\n            // First 2 tiles of next frame's background:\n            ppu.fetchTile();\n            ppu.incrementX();\n            dot += 8;\n        }\n        ppu.fetchNullNTs();\n    }\n}\n\nexport default Engine;\n","export class Header {\n    constructor(data) {\n        this.loaded = false;\n        \n        this.format = \"Unknown\";\n        this.valid = false;\n        \n        this.mapperNumber = -1;\n        this.mapperName = \"\";\n        this.supported = false;\n        \n        this.PRGROMByteLength = 0;\n        this.CHRROMByteLength = 0;\n        \n        this.horiMirroring = false;\n        this.vertMirroring = false;\n        this.battery = false;\n        this.trainer = false;\n        \n        this.consoleType = 0;\n        \n        this.PRGRAMByteLength = 0;\n        this.CHRRAMByteLength = 0;\n        this.PRGNVRAMByteLength = 0;\n        this.CHRNVRAMByteLength = 0;\n        \n        if (data) this.parse(data);\n    }\n    \n    get byteLength() {\n        return 0x00;\n    }\n    \n    parse(data) {\n        return this.loaded = !!data.byteLength && (data.byteLength >= this.byteLength);\n    }\n}\n\nexport default Header;\n","export const PRGROMBANKSIZE = 0x4000;\nexport const CHRROMBANKSIZE = 0x1000;\n\nexport class Cartridge {\n    constructor() {\n        this.PRGRAM = new Uint8Array(PRGROMBANKSIZE);\n        this.CHRRAM = new Uint8Array(CHRROMBANKSIZE);\n        \n        this.PRGROM = [];\n        this.firstPRGBank = this.PRGRAM;\n        this.lastPRGBank  = this.PRGRAM;\n        this.PRGBank = [this.firstPRGBank, this.lastPRGBank];\n        \n        this.CHRROM = [];\n        this.firstCHRBank  = this.CHRRAM;\n        this.secondCHRBank = this.CHRRAM;\n        this.CHRBank = [this.firstCHRBank, this.secondCHRBank];\n        \n        this.horiMirroring = false;\n        this.vertMirroring = false;\n    }\n    \n    load(header, data) {\n        let offset = header.byteLength;\n        \n        this.horiMirroring = header.horiMirroring;\n        this.vertMirroring = header.vertMirroring;\n        \n        if (header.trainer) {\n            this.PRGRAM.set(new Uint8Array(data, offset, 0x200), 0x1000);\n            offset += 0x200;\n        }\n        \n        const numPRGBank = header.PRGROMByteLength / PRGROMBANKSIZE;\n        if (numPRGBank > 0) {\n            for (let bank = 0; bank < numPRGBank; bank++) {\n                this.PRGROM.push(new Uint8Array(data, offset, PRGROMBANKSIZE));\n                offset += PRGROMBANKSIZE;\n            }\n            this.firstPRGBank = this.PRGROM[0];\n            this.lastPRGBank  = this.PRGROM[this.PRGROM.length-1];\n        }\n        this.PRGBank = [this.firstPRGBank, this.lastPRGBank];\n        \n        const numCHRBank = header.CHRROMByteLength / CHRROMBANKSIZE;\n        if (numCHRBank > 0) {\n            for (let bank = 0; bank < numCHRBank; bank++) {\n                this.CHRROM.push(new Uint8Array(data, offset, CHRROMBANKSIZE));\n                offset += CHRROMBANKSIZE;\n            }\n            this.firstCHRBank  = this.CHRROM[0];\n            this.secondCHRBank = this.CHRROM[1];\n        }\n        this.CHRBank = [this.firstCHRBank, this.secondCHRBank];\n    }\n    \n    //== Memory access from CPU =====================================//\n    cpuRead(address) {\n        if (address >= 0xC000) {\n            return this.PRGBank[1][address - 0xC000];\n        } else if (address >= 0x8000) {\n            return this.PRGBank[0][address - 0x8000];\n        } else {\n            if (address >= 0x6000)   address -= 0x6000;\n            while (address > 0x1FFF) address -= 0x2000;\n            return this.PRGRAM[address];\n        }\n    }\n    cpuWrite(address, data) {\n        if (address >= 0x6000)   address -= 0x6000;\n        while (address > 0x1FFF) address -= 0x2000;\n        this.PRGRAM[address] = data;\n    }\n    \n    //== Memory access from PPU =====================================//\n    ppuRead(address) {\n        if (address < 0x1000)\n            return this.CHRBank[0][address];\n        else if (address < 0x2000)\n            return this.CHRBank[1][address - 0x1000];\n        else {\n            address -= 0x2000;\n            while (address > 0x0FFF) address -= 0x1000;\n            return this.CHRBank[1][address];\n        }\n    }\n    ppuWrite(address, data) {\n        while (address > 0x1FFF) address -= 0x2000;\n        this.CHRRAM[address] = data;\n    }\n    \n    //== CIRAM A10 (Pin22) ==========================================//\n    ciramA10(address) { /* eslint-disable-line no-unused-vars */\n        //Not connected by default\n        return 0x0000;\n    }\n    //== CIRAM /CE (Pin57) ==========================================//\n    ciramEnabled(address) {\n        //Connected to PPU /A13 (0x2000) by default\n        if (address < 0x2000)\n            return 0x0000;\n        else if (address < 0x4000)\n            return 0x2000;\n        else\n            return address & 0x2000;\n    }\n}\n\nexport default Cartridge;\n","import Cartridge from '../Cartridge.js';\n\nexport class NROM extends Cartridge {\n    //== CIRAM A10 (Pin22) ==========================================//\n    ciramA10(address) {\n        if (address < 0x400)\n            return 0;\n        else if (this.vertMirroring)\n            return address & 0x400; //Connected to PPU A10\n        else if (address < 0x800)\n            return 0;\n        else if (this.horiMirroring)\n            return address & 0x800; //Connected to PPU A11\n        else\n            return 0;\n    }\n}\nexport default NROM;\n","export { NROM } from './NROM.js';\nexport { MMC1 } from './MMC1.js';\n\nexport default Object.freeze([\n    //0x00\n    \"NROM\",\"Nintendo MMC1\",\"UNROM\",\"CNROM\",\"Nintendo MMC3\",\"Nintendo MMC5\",\"FFE Rev. A\",\"ANROM\",\n    \"\",\"Nintendo MMC2\",\"Nintendo MMC4\",\"Color Dreams\",\"REX DBZ 5\",\"CPROM\",\"REX SL-1632\",\"100-in-1\",\n    //0x10\n    \"BANDAI 24C02\",\"FFE Rev. B\",\"JALECO SS880006\",\"Namcot 163\",\"\",\"Konami VRC4a/VRC4c\",\"Konami VRC2a\",\"Konami VRC2b/VRC4e\",\n    \"Konami VRC6a\",\"Konami VRC4b/VRC4d\",\"Konami VRC6b\",\"CC-21 MI HUN CHE\",\"\",\"\",\"\",\"\",\n    //0x20\n    \"IREM G-101\",\"TC0190FMC/TC0350FMR\",\"IREM I-IM/BNROM\",\"Wario Land 2\",\"TXC Policeman\",\"PAL-ZZ SMB/TETRIS/NWC\",\"Bit Corp.\",\"\",\n    \"SMB2j FDS\",\"CALTRON 6-in-1\",\"BIO MIRACLE FDS\",\"FDS SMB2j LF36\",\"MMC3 BMC PIRATE A\",\"MMC3 BMC PIRATE B\",\"RUMBLESTATION 15-in-1\",\"NES-QJ SSVB/NWC\",\n    //0x30\n    \"TAITO TCxxx\",\"MMC3 BMC PIRATE C\",\"SMB2j FDS Rev. A\",\"11-in-1 BALL SERIES\",\"MMC3 BMC PIRATE D\",\"SUPERVISION 16-in-1\",\"\",\"\",\n    \"\",\"SIMBPLE BMC PIRATE A\",\"SIMBPLE BMC PIRATE B\",\"\",\"SIMBPLE BMC PIRATE C\",\"20-in-1 KAISER Rev. A\",\"700-in-1\",\"\",\n    //0x40\n    \"TENGEN RAMBO1\",\"IREM-H3001\",\"MHROM\",\"SUNSOFT-FZII\",\"Sunsoft Mapper #4\",\"SUNSOFT-5/FME-7\",\"BA KAMEN DISCRETE\",\"CAMERICA BF9093\",\n    \"JALECO JF-17\",\"KONAMI VRC3\",\"TW MMC3+VRAM Rev. A\",\"KONAMI VRC1\",\"NAMCOT 108 Rev. A\",\"IREM LROG017\",\"Irem 74HC161/32\",\"AVE/C&E/TXC BOARD\",\n    //0x50\n    \"TAITO X1-005 Rev. A\",\"\",\"TAITO X1-017\",\"YOKO VRC Rev. B\",\"\",\"KONAMI VRC7\",\"JALECO JF-13\",\"74*139/74 DISCRETE\",\n    \"NAMCO 3433\",\"SUNSOFT-3\",\"HUMMER/JY BOARD\",\"EARLY HUMMER/JY BOARD\",\"JALECO JF-19\",\"SUNSOFT-3R\",\"HVC-UN1ROM\",\"NAMCOT 108 Rev. B\",\n    //0x60\n    \"BANDAI OEKAKIDS\",\"IREM TAM-S1\",\"\",\"VS Uni/Dual- system\",\"\",\"\",\"\",\"FDS DOKIDOKI FULL\",\n    \"\",\"NES-EVENT NWC1990\",\"SMB3 PIRATE A\",\"MAGIC CORP A\",\"FDS UNROM BOARD\",\"\",\"\",\"\",\n    //0x70\n    \"ASDER/NTDEC BOARD\",\"HACKER/SACHEN BOARD\",\"MMC3 SG PROT. A\",\"MMC3 PIRATE A\",\"MMC1/MMC3/VRC PIRATE\",\"FUTURE MEDIA BOARD\",\"TSKROM\",\"NES-TQROM\",\n    \"FDS TOBIDASE\",\"MMC3 PIRATE PROT. A\",\"\",\"MMC3 PIRATE H2288\",\"\",\"FDS LH32\",\"\",\"\",\n    //0x80\n    \"\",\"\",\"\",\"\",\"TXC/MGENIUS 22111\",\"SA72008\",\"MMC3 BMC PIRATE\",\"\",\n    \"TCU02\",\"S8259D\",\"S8259B\",\"S8259C\",\"JALECO JF-11/14\",\"S8259A\",\"UNLKS7032\",\"TCA01\",\n    //0x90\n    \"AGCI 50282\",\"SA72007\",\"SA0161M\",\"TCU01\",\"SA0037\",\"SA0036\",\"S74LS374N\",\"\",\n    \"\",\"BANDAI SRAM\",\"\",\"\",\"\",\"BANDAI BARCODE\",\"\",\"BANDAI 24C01\",\n    //0xA0\n    \"SA009\",\"\",\"\",\"\",\"\",\"\",\"SUBOR Rev. A\",\"SUBOR Rev. B\",\n    \"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n    //0xB0\n    \"BMCFK23C\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n    \"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n    //0xC0\n    \"TW MMC3+VRAM Rev. B\",\"NTDEC TC-112\",\"TW MMC3+VRAM Rev. C\",\"TW MMC3+VRAM Rev. D\",\"\",\"\",\"TW MMC3+VRAM Rev. E\",\"\",\n    \"\",\"\",\"\",\"\",\"\",\"\",\"NAMCOT 108 Rev. C\",\"TAITO X1-005 Rev. B\",\n    //0xD0\n    \"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\n    \"\",\"\",\"\",\"UNLA9746\",\"Debug Mapper\",\"UNLN625092\",\"\",\"\",\n    //0xE0\n    \"\",\"\",\"BMC 22+20-in-1\",\"\",\"\",\"\",\"BMC Contra+22-in-1\",\"\",\n    \"BMC QUATTRO\",\"BMC 22+20-in-1 RST\",\"BMC MAXI\",\"\",\"\",\"\",\"UNL6035052\",\"\",\n    //0xF0\n    \"\",\"\",\"\",\"S74LS374NA\",\"DECATHLON\",\"\",\"FONG SHEN BANG\",\"\",\n    \"\",\"\",\"\",\"\",\"SAN GUO ZHI PIRATE\",\"DRAGON BALL PIRATE\",\"\",\"\",\n]);\n","import mapperNames, {\n    NROM,\n    MMC1,\n} from './Mappers/index.js';\n\nconst constructors = Object.freeze([\n    NROM,\n    MMC1,\n]);\n\nexport class Mapper {\n    constructor(number) {\n        return new (constructors[number] || NROM);\n    }\n    \n    static supported(number) {\n        return typeof constructors[number] !== 'undefined';\n    }\n    static name(number) {\n        return mapperNames[number] || \"Unknown\";\n    }\n}\n\nexport default Mapper;\n","import Cartridge from '../Cartridge.js';\n\nexport class MMC1 extends Cartridge {\n    constructor() {\n        super();\n        \n        this.mirroring   = 0;\n        this.PRGBankMode = 3;\n        this.CHRBankMode = 0;\n        \n        this.buffer = 0;\n        this.index = 0;\n    }\n    \n    //== Internal registers =========================================//\n    set control(value) {\n        this.mirroring   = (value & 0x03);\n        this.PRGBankMode = (value & 0x0C) >> 2;\n        this.CHRBankMode = (value & 0x10) >> 4;\n    }\n    \n    set CHR0(value) {\n        if (this.CHRBankMode === 1) {\n            this.CHRBank[0] = this.CHRROM[value];\n        } else {\n            let bank = value & ~1;\n            this.CHRBank[0] = this.CHRROM[bank+0];\n            this.CHRBank[1] = this.CHRROM[bank+1];\n        }\n    }\n    set CHR1(value) {\n        if (this.CHRBankMode === 1) {\n            this.CHRBank[1] = this.CHRROM[value];\n        }\n    }\n    \n    set PRG(value) {\n        while (value >= 0x10) value -= 0x10;\n        if (this.PRGBankMode === 3) {\n            this.PRGBank[0] = this.PRGROM[value];\n            this.PRGBank[1] = this.lastPRGBank;\n        } else if (this.PRGBankMode === 2) {\n            this.PRGBank[0] = this.firstPRGBank;\n            this.PRGBank[1] = this.PRGROM[value];\n        } else {\n            let bank = value & ~1;\n            this.PRGBank[0] = this.PRGROM[bank+0];\n            this.PRGBank[1] = this.PRGROM[bank+1];\n        }\n    }\n    \n    write(address, data) {\n        switch (address - 0x8000) {\n        case 0x0000: this.control = data; break;\n        case 0x2000: this.CHR0    = data; break;\n        case 0x4000: this.CHR1    = data; break;\n        case 0x6000: this.PRG     = data; break;\n        default: this.write(address & 0xE000, data);\n        }\n    }\n    \n    //== Memory access from CPU =====================================//\n    cpuWrite(address, data) {\n        if (address >= 0x8000) {\n            if (data >= 0x80) {\n                this.buffer = 0;\n                this.index = 0;\n                this.mirroring = 0;\n                this.CHRBankMode = 0;\n            } else {\n                this.buffer += ((data & 0x1) << this.index);\n                if (++this.index === 5) {\n                    this.write(address, this.buffer);\n                    this.buffer = 0;\n                    this.index = 0;\n                }\n            }\n        } else {\n            super.cpuWrite(address, data);\n        }\n    }\n    \n    //== CIRAM A10 (Pin22) ==========================================//\n    ciramA10(address) {\n        if (this.mirroring === 3) {\n            if (address < 0x800)\n                return 0;\n            else\n                return address & 0x800;\n        } else if (this.mirroring === 2) {\n            if (address < 0x400)\n                return 0;\n            else\n                return address & 0x400;\n        } else\n            return this.mirroring;\n    }\n}\nexport default MMC1;\n","import Header from './Header.js';\nimport Mapper from '../Mapper.js';\n\nconst PRGROMBANKSIZE = 0x4000;\nconst CHRROMBANKSIZE = 0x2000;\nconst PRGRAMBANKSIZE = 0x2000;\n\nconst LENGTH = 0x10;\n\nexport class INESHeader extends Header {\n    get byteLength() {\n        return LENGTH;\n    }\n    \n    parse(data) {\n        if (super.parse(data)) {\n            const header = new DataView(data, 0, LENGTH);\n            if (header.getUint32(0) === 0x4E45531A) {\n                this.valid = true;\n                \n                this.format = \"Archaic iNES\";\n                \n                const byte4 = header.getUint8(4);\n                const byte5 = header.getUint8(5);\n                \n                this.PRGROMByteLength = getROMByteLength(PRGROMBANKSIZE, byte4);\n                this.CHRROMByteLength = getROMByteLength(CHRROMBANKSIZE, byte5);\n                \n                const byte6 = header.getUint8(6);\n                \n                this.mapperNumber = byte6 >> 4;\n                \n                if (byte6 & 0x8) {\n                    this.horiMirroring = false;\n                    this.vertMirroring = false;\n                } else if (byte6 & 0x1) {\n                    this.horiMirroring = false;\n                    this.vertMirroring = true;\n                } else {\n                    this.horiMirroring = true;\n                    this.vertMirroring = false;\n                }\n                \n                this.battery = !!(byte6 & 0x2);\n                this.trainer = !!(byte6 & 0x4);\n                \n                const byte7 = header.getUint8(7);\n                \n                if (!(byte7 & 0x04)) {\n                    this.mapperNumber += byte7 & 0xF0;\n                    this.consoleType = byte7 & 0x03;\n                    \n                    if (byte7 & 0x08) {\n                        const byte9 = header.getUint8(9);\n                        \n                        const PRGSize = getROMByteLength(PRGROMBANKSIZE, byte4, byte9 & 0x0F);\n                        const CHRSize = getROMByteLength(CHRROMBANKSIZE, byte5, byte9 >> 4);\n                        if (PRGSize + CHRSize <= data.byteLength) {\n                            this.parseV2(header);\n                        }\n                    } else {\n                        if (header.getUint32(12) === 0) {\n                            this.parseV1(header);\n                        }\n                    }\n                }\n                \n                this.mapperName = Mapper.name(this.mapperNumber);\n                this.supported  = Mapper.supported(this.mapperNumber);\n            }\n        }\n        return this.loaded;\n    }\n    \n    parseV1(data) {\n        this.format = \"iNES\";\n        \n        this.PRGRAMByteLength = (data.getUint8(8) || 1) * PRGRAMBANKSIZE;\n    }\n    \n    parseV2(data) {\n        this.format = \"NES 2.0\";\n        \n        this.mapperNumber += (data.getUint8(8) & 0x0F)*256;\n        \n        const byte9 = data.getUint8(9);\n        this.PRGROMByteLength = getROMByteLength(PRGROMBANKSIZE, data.getUint8(4), byte9 & 0x0F);\n        this.CHRROMByteLength = getROMByteLength(CHRROMBANKSIZE, data.getUint8(5), byte9 >> 4);\n        \n        const byte10 = data.getUint8(10);\n        this.PRGRAMByteLength   = getRAMByteLength(byte10 & 0x0F);\n        this.PRGNVRAMByteLength = getRAMByteLength(byte10 >> 4);\n        \n        const byte11 = data.getUint8(11);\n        this.CHRRAMByteLength   = getRAMByteLength(byte11 & 0x0F);\n        this.CHRNVRAMByteLength = getRAMByteLength(byte11 >> 4);\n    }\n}\n\n/**\n * Automatically calculate PRG/CHR ROM byte length according to header format.\n * (Supports exponent-multiplier notation of *NES 2.0*)\n * @param {number} bankSize The size of each bank, will multiply the computed value to get the length in bytes\n * @param {number} lsb 8-bit value read from `byte 4` (PRG) or `byte 5` (CHR)\n * @param {number} msb 4-bit value read from `byte 9` if *NES 2.0* (must be `0` or omitted otherwise)\n * @returns {number} Computed length in bytes\n */\nfunction getROMByteLength(bankSize, lsb, msb = 0) {\n    if (msb < 0x0F) {\n        return (lsb + msb*256) * bankSize;\n    } else {\n        const multiplier = (lsb & 0x3)*2 + 1;\n        const exponent = lsb >> 2;\n        return 2^exponent * multiplier;\n    }\n}\n\n/**\n * Automatically calculate PRG/CHR [NV]RAM byte length from *NES 2.0* header values.\n * @param {number} shiftCount Will shift `64` by this number of bits\n * @returns {number} Computed length in bytes\n */\nfunction getRAMByteLength(shiftCount) {\n    return shiftCount ? 0x40 << shiftCount : 0;\n}\n\nexport default INESHeader;\n","import Header from './Header.js';\n\nconst LENGTH = 0x20;\n\nexport class UNIFHeader extends Header {\n    get byteLength() {\n        return LENGTH;\n    }\n    \n    parse(data) {\n        if (super.parse(data)) {\n            const header = new DataView(data, 0, LENGTH);\n            if (header.getUint32(0) === 0x554E4946) {\n                this.format = \"UNIF v\" + header.getUint32(4, true);\n            }\n        }\n        return this.loaded;\n    }\n}\n\nexport default UNIFHeader;\n","const CONSOLE_TYPE = [\n    \"NES/Famicom\",\n    \"Nintendo Vs. System\",\n    \"Nintendo Playchoice 10\",\n    \"Extended Console Type\",\n];\nconst TV_SYSTEM = {\n    NTSC: \"NTSC\",\n    PAL: \"PAL\",\n    SECAM: \"SECAM\",\n};\n\nexport class Metadata {\n    constructor() {\n        this.name = \"No Cartridge\";\n        this.format = \"\";\n        \n        this.consoleType = CONSOLE_TYPE[0];\n        this.tvSystem = TV_SYSTEM.NTSC;\n        \n        this.mapper = \"\";\n        this.PRGROM = \"\";\n        this.CHRROM = \"\";\n        this.scrolling = \"\";\n        this.SRAM = \"\";\n        this.PRGRAM = \"\";\n        this.CHRRAM = \"\";\n        this.misc = \"\";\n        \n        this.warnings = [];\n        this.errors = [];\n    }\n    \n    //=======================================================================================//\n    \n    get supported() {\n        return this.warnings.length === 0;\n    }\n    get valid() {\n        return this.errors.length === 0;\n    }\n    \n    warn(message) {\n        this.warnings.push(message);\n    }\n    error(message) {\n        this.errors.push(message);\n    }\n    \n    //=======================================================================================//\n    \n    parseFilename(filename) {\n        const countryCodes = /\\((U|E|Unk|Unl|1|4|A|J|B|K|C|NL|PD|F|S|FC|SW|FN|G|UK|GR|HK|I|H)+\\)/.exec(filename);\n        if (countryCodes) {\n            if (countryCodes[0].search(/U[^Kn]|1|4|J|[^U]K|PD|FC|HK/) > 0)\n                this.tvSystem = TV_SYSTEM.NTSC;\n            else if (countryCodes[0].search(/E|A|B|[^F]C|NL|S|SW|FN|G|UK|GR|I|H/) > 0)\n                this.tvSystem = TV_SYSTEM.PAL;\n            else if (countryCodes[0].search(/F[^C]/) > 0)\n                this.tvSystem = TV_SYSTEM.SECAM; //wtf la France ?\n            \n            if (this.tvSystem !== TV_SYSTEM.NTSC)\n                this.warn(`Unsupported TV system (${this.tvSystem})`);\n        }\n        \n        this.name = filename.replace(\n            /\\.[A-Za-z0-9_]+$/, \"\"\n        ).replace(\n            /\\s?\\((U|E|Unk|Unl|1|4|A|J|B|K|C|NL|PD|F|S|FC|SW|FN|G|UK|GR|HK|I|H)+\\)/g, \"\"\n        ).replace(\n            /\\s?\\[(!|a|p|b|t|f|T[+-]|h|o)+\\]/g, \"\"\n        ).replace(\n            /_+/g, \" \"\n        ).trim();\n        \n        if (this.name)\n            this.name = this.name[0].toUpperCase() + this.name.slice(1);\n    }\n    \n    load(header) {\n        this.format = header.format;\n        \n        this.mapper = `Mapper #${header.mapperNumber}: ${header.mapperName}`;\n        if (!header.supported)\n            this.warn(`Unsupported mapper (#${header.mapperNumber}:${header.mapperName})`);\n        \n        this.PRGROM = `${header.PRGROMByteLength / 1024}kb of PRG-ROM`;\n        this.CHRROM = `${header.CHRROMByteLength / 1024}kb of CHR-ROM`;\n        \n        if (header.horiMirroring && header.vertMirroring) {\n            this.scrolling = \"Scrolling disabled (or Mapper controlled)\";\n        } else if (header.vertMirroring) {\n            this.scrolling = \"Horizontal scrolling\";\n        } else if (header.horiMirroring) {\n            this.scrolling = \"Vertical scrolling (or Mapper controlled)\";\n        } else {\n            this.scrolling = \"4-screens scrolling\";\n        }\n        \n        if (header.battery) this.SRAM = \"Battery-backed SRAM\";\n        if (header.trainer) this.misc = \"512b trainer data present\";\n        \n        if (header.PRGRAMByteLength && header.PRGNVRAMByteLength)\n            this.PRGRAM = `${(header.PRGRAMByteLength+header.PRGNVRAMByteLength) / 1024}kb of combined PRG-RAM/NVRAM`;\n        else if (header.PRGNVRAMByteLength)\n            this.PRGRAM = `${header.PRGNVRAMByteLength / 1024}kb of PRG-NVRAM`;\n        else if (header.PRGRAMByteLength)\n            this.PRGRAM = `${header.PRGRAMByteLength / 1024}kb of PRG-RAM`;\n        \n        if (header.CHRRAMByteLength && header.CHRNVRAMByteLength)\n            this.CHRRAM = `${(header.CHRRAMByteLength+header.CHRNVRAMByteLength) / 1024}kb of combined CHR-RAM/NVRAM`;\n        else if (header.CHRNVRAMByteLength)\n            this.CHRRAM = `${header.CHRNVRAMByteLength / 1024}kb of CHR-NVRAM`;\n        else if (header.CHRRAMByteLength)\n            this.CHRRAM = `${header.CHRRAMByteLength / 1024}kb of CHR-RAM`;\n        \n        this.consoleType = CONSOLE_TYPE[header.consoleType];\n        if (header.consoleType > 0)\n            this.warn(`Unsupported console type (${this.consoleType})`);\n    }\n    \n    //=======================================================================================//\n    \n    serialize() {\n        return {\n            name: this.name,\n            format: this.format,\n            consoleType: this.consoleType,\n            tvSystem: this.tvSystem,\n            \n            mapper: this.mapper,\n            PRGROM: this.PRGROM,\n            CHRROM: this.CHRROM,\n            scrolling: this.scrolling,\n            SRAM: this.SRAM,\n            PRGRAM: this.PRGRAM,\n            CHRRAM: this.CHRRAM,\n            misc: this.misc,\n        };\n    }\n}\n\nexport default Metadata;\n","import { Cartridge, Mapper, Metadata } from './Cartridges/index.js';\nimport {\n    Header,\n    INESHeader,\n    UNIFHeader,\n} from './Cartridges/FileFormats/index.js';\n\nexport class CartConnector {\n    constructor() {\n        this.reset();\n    }\n    \n    reset() {\n        this.file = new Header;\n        this.metadata = new Metadata;\n        this.cartridge = new Cartridge;\n    }\n    \n    //=======================================================================================//\n    \n    load(file) {\n        this.reset();\n        \n        return new Promise(\n            (resolve, reject) => {\n                if (file) {\n                    this.metadata.parseFilename(file.name);\n                    \n                    if (file.size) {\n                        const reader = new FileReader;\n                        reader.onabort = () => reject(new DOMException);\n                        reader.onerror = () => reject(reader.error);\n                        reader.onload = () => resolve(reader.result);\n                        \n                        reader.readAsArrayBuffer(file);\n                    } else {\n                        reject(new Error(\"File is empty\"));\n                    }\n                } else {\n                    reject(new DOMException);\n                }\n            }\n        ).then(\n            (data) => {\n                const signature = (new DataView(data)).getUint32(0);\n                \n                if (signature === 0x4E45531A) // \"NES[EOF]\"\n                    this.file = new INESHeader(data);\n                else if (signature === 0x554E4946) // \"UNIF\"\n                    this.file = new UNIFHeader(data);\n                else\n                    throw new Error(\"Invalid format\");\n                \n                if (!this.file.valid)\n                    throw new Error(`Unsupported format (${this.file.format})`);\n                \n                this.metadata.load(this.file);\n                \n                this.cartridge = new Mapper(this.file.mapperNumber);\n                this.cartridge.load(this.file, data);\n                \n                return this;\n            }\n        ).catch(\n            (error) => {\n                if (error instanceof DOMException)\n                    this.metadata.error(\"Loading aborted\");\n                else if (error.message)\n                    this.metadata.error(error.message);\n                else\n                    this.metadata.error(\"Loading failed\");\n                \n                this.cartridge = new Cartridge;\n                return this;\n            }\n        );\n    }\n    unload() {\n        this.reset();\n        \n        return Promise.resolve(this);\n    }\n}\n\nexport default CartConnector;\n","export class Controller {\n    constructor(type) {\n        this.type = type || \"\";\n        \n        this.strobing = false;\n        this.states = new Array(8).fill(0);\n        this.strobe();\n    }\n    \n    get empty()   { return  !this.type; }\n    get present() { return !!this.type; }\n    \n    strobe() {\n        this.data = [...this.states];\n    }\n    \n    //== Input/Output ===============================================//\n    read() {\n        if (this.strobing) this.strobe();\n        \n        let data = this.data.shift();\n        return data !== undefined ? data : 1;\n    }\n    write(data) {\n        this.strobing = !!(data & 0x01);\n        if (this.strobing) this.strobe();\n    }\n}\n\nexport default Controller;\n","import Controller from \"./Controller.js\";\n\nconst BUTTONS = Object.freeze({\n    a: 0, b: 1, select: 2, start: 3, up: 4, down: 5, left: 6, right: 7\n});\n\nexport class Joypad extends Controller {\n    constructor() {\n        super(\"Joypad\");\n        \n        this.buttonHandlers = this.states.map((v, i) => (\n            (pressed) => { this.states[i] = pressed ? 1 : 0; }\n        ));\n    }\n    \n    getButtonHandler(name) {\n        let index = BUTTONS[name.toLowerCase()];\n        if (index != null)\n            return this.buttonHandlers[index];\n        else\n            throw new Error(`'${name}' is not a valid button name`);\n    }\n}\nexport default Joypad;\n","import Joypad from '../Joypad.js';\n\nconst KEYS = Object.freeze({\n    8: 'Backspace', 9: 'Tab', 13: 'Enter', 16: 'Shift', 17: 'Ctrl', 18: 'Alt', 19: 'Pause',\n    27: 'Escape', 32: 'Space', 33: 'Page-up', 34: 'Page-down', 35: 'End', 36: 'Home',\n    37: 'Left', 38: 'Up', 39: 'Right', 40: 'Down',\n    45: 'Insert', 46: 'Delete',\n    48: '0', 49: '1', 50: '2', 51: '3', 52: '4', 53: '5', 54: '6', 55: '7', 56: '8', 57: '9',\n    65: 'A', 66: 'B', 67: 'C', 68: 'D', 69: 'E', 70: 'F', 71: 'G', 72: 'H', 73: 'I',\n    74: 'J', 75: 'K', 76: 'L', 77: 'M', 78: 'N', 79: 'O', 80: 'P', 81: 'Q', 82: 'R',\n    83: 'S', 84: 'T', 85: 'U', 86: 'V', 87: 'W', 88: 'X', 89: 'Y', 90: 'Z',\n    96:  'Numpad-0',  97: 'Numpad-1',  98: 'Numpad-2',  99: 'Numpad-3', 100: 'Numpad-4',\n    101: 'Numpad-5', 102: 'Numpad-6', 103: 'Numpad-7', 104: 'Numpad-8', 105: 'Numpad-9',\n    106: 'Multiply', 107: 'Add', 109: 'Subtract', 110: 'Decimal-point', 111: 'Divide',\n    112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4',  116: 'F5',  117: 'F6',\n    118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',\n    186: ';', 187: '=', 188: ',', 189: '-', 190: '.', 191: '/', 192: '`',\n    219: '[', 220: '\\\\', 221: ']', 222: '\\'',\n});\n\nexport class Keyboard extends Joypad {\n    constructor(opts) {\n        super();\n        \n        this.keyMap = {};\n        if (opts) this.assignKeys(opts);\n        \n        if (typeof window !== 'undefined') {\n            window.addEventListener('keydown', (e) => this.pressKey(e, true));\n            window.addEventListener('keyup',   (e) => this.pressKey(e, false));\n        }\n    }\n    \n    get map() {\n        return KEYS;\n    }\n    \n    assignKey(buttonName, keyCode) {\n        let handler = this.getButtonHandler(buttonName);\n        \n        Object.entries(this.keyMap).forEach(\n            ([key, value]) => { if (value === handler) delete this.keyMap[key]; }\n        );\n        this.keyMap[keyCode] = handler;\n    }\n    assignKeys(opts) {\n        Object.entries(opts).forEach(([key, value]) => this.assignKey(key, value));\n    }\n    \n    pressKey(event, keyDown) {\n        let key = event.keyCode || event.which;\n        let button = this.keyMap[key];\n        if (button) {\n            button(keyDown);\n            event.preventDefault();\n        }\n    }\n}\n\nexport default Keyboard;\n","import { Controller } from \"./Controllers/index.js\";\n\nexport class CtrlConnector {\n    constructor() {\n        this.controllers = [new Controller, new Controller];\n    }\n    \n    insert(controller) {\n        if (this.controllers.indexOf(controller) > -1)\n            return controller;\n        else if (this.controllers[0].empty)\n            this.controllers[0] = controller;\n        else if (this.controllers[1].empty)\n            this.controllers[1] = controller;\n        else\n            return;\n        \n        return controller;\n    }\n    remove(controller) {\n        let index = this.controllers.indexOf(controller);\n        if (index > -1) {\n            this.controllers[index] = new Controller;\n            \n            return controller;\n        }\n    }\n}\n\nexport default CtrlConnector;\n","export class VideoOutput {\n    constructor() {\n        this.canvas  = null;\n        this.context = null;\n        \n        this.layers = [];\n    }\n    \n    get connected()    { return !!this.canvas; }\n    get disconnected() { return  !this.canvas; }\n    \n    connect(output) {\n        if (output && output.nodeName === 'CANVAS') {\n            this.canvas = output;\n            \n            this.width  = output.width;\n            this.height = output.height;\n            \n            return output;\n        } else {\n            return this.disconnect();\n        }\n    }\n    disconnect() {\n        return this.canvas = null;\n    }\n    \n    //===============================================================//\n    \n    addLayer(videoBuffer) {\n        this.layers.push(videoBuffer);\n    }\n    \n    start() {\n        if (this.connected) {\n            this.context = this.canvas.getContext('2d', {alpha: false});\n            this.context.imageSmoothingEnabled = false;\n            \n            this.offCanvas = document.createElement('canvas');\n            this.offCanvas.width  = 256;\n            this.offCanvas.height = 240;\n            this.offContext = this.offCanvas.getContext('2d', {alpha: true});\n            this.offContext.imageSmoothingEnabled = false;\n        }\n    }\n    \n    stop() {\n        if (this.connected) {\n            window.cancelAnimationFrame(this.scheduled);\n            \n            this.layers = [];\n            \n            this.context = null;\n            \n            this.offCanvas.remove();\n            this.offContext = null;\n        }\n    }\n    \n    //===============================================================//\n    \n    schedule(cssBackdrop) {\n        if (this.connected) {\n            const layers = this.layers.map((layer) => layer.getFrame());\n            \n            this.scheduled = window.requestAnimationFrame(() => {\n                this.context.fillStyle = cssBackdrop;\n                this.context.fillRect(0, 0, this.width, this.height);\n                \n                layers.forEach((layer) => {\n                    this.offContext.putImageData(layer, 0, 0);\n                    this.context.drawImage(this.offCanvas, 0, 0, 256, 240, 0, 0, this.width, this.height);\n                });\n            });\n        }\n    }\n}\n\nexport default VideoOutput;\n","const bufferLength = 367;\nconst buffersCount = 24;\n\n/**\n * An array of short audio buffers continuously reused in a FIFO manner. When ready,\n * an audio buffer can be shifted out and then played by being passed into an\n * `AudioBufferSourceNode`.\n */\nexport class AudioRingBuffer {\n    /**\n     * @param {number} sampleRate\n     */\n    constructor(sampleRate) {\n        /**\n         * @private @readonly\n         * @type {AudioBuffer[]}\n         */\n        this.buffers = new Array(buffersCount).fill(null).map(() => (\n            new AudioBuffer({ length: bufferLength, sampleRate })\n        ));\n\n        /**\n         * The length in seconds of one audio buffer.\n         * @readonly\n         * @type {number}\n         */\n        this.duration = bufferLength / sampleRate;\n\n        /**\n         * Triggered when a new audio buffer is ready to be shifted out and played.\n         * @type {(buffer:AudioRingBuffer) => void|undefined}\n         */\n        this.onnewbufferready = undefined;\n\n        /**\n         * Triggered just **_after_** a buffer underrun occurs.\n         * \n         * This should be used for logging, or to take action to prevent *another* such\n         * event from happening, but nothing should be read/written to the buffer at this\n         * time since it happens *while* an audio buffer is being shifted out.\n         * @type {(lag:number) => void|undefined}\n         */\n        this.onbufferunderrun = undefined;\n        /**\n         * Triggered just **_before_** a buffer overrun occurs.\n         * \n         * This gives the opportunity to prevent it by shifting out one or more audio\n         * buffers to free some space.\n         * @type {(buffer:AudioRingBuffer) => void|undefined}\n         */\n        this.onbufferoverrun = undefined;\n\n        this.reset();\n    }\n\n    //===================================================================================//\n\n    /**\n     * Empties all buffers completely and bring `usage` back to 0%.\n     */\n    reset() {\n        /** @private */\n        this.readyBuffer = this.writeBuffer = this.buffers[0];\n        /** @private */\n        this.nextReadyIndex = this.nextWriteIndex = 1;\n\n        this.initChannelData();\n    }\n    /** @private */\n    initChannelData() {\n        /** @private */\n        this.data = this.writeBuffer.getChannelData(0);\n        /** @private */\n        this.index = 0;\n    }\n\n    //===================================================================================//\n\n    /**\n     * The length (in samples) of each audio buffer.\n     * @readonly\n     */\n    get length() {\n        return bufferLength;\n    }\n\n    /**\n     * The total number of audio buffers in the queue.\n     * @readonly\n     */\n    get buffersCount() {\n        return buffersCount;\n    }\n    /**\n     * The number of audio buffers that are currently ready to be shifted out of the\n     * queue and played.\n     * @readonly\n     */\n    get readyBuffersCount() {\n        const readyCount = this.nextWriteIndex - this.nextReadyIndex;\n        return (readyCount < 0) ? readyCount + buffersCount : readyCount;\n    }\n\n    /**\n     * The percentage usage of the whole ring buffer.\n     * @readonly\n     */\n    get usage() {\n        return (this.readyBuffersCount + (this.index / bufferLength)) / buffersCount;\n    }\n\n    /**\n     * *True* if there is at least 1 buffer ready to be played.\n     * @readonly\n     */\n    get ready() { return this.nextReadyIndex !== this.nextWriteIndex; }\n    /**\n     * *True* if half of the buffers are ready to be played.\n     * @readonly\n     */\n    get halfFull() { return this.readyBuffersCount >= buffersCount/2; }\n\n    //===================================================================================//\n\n    /**\n     * Get the first *Ready* buffer out of the queue.\n     * \n     * If no buffer is ready yet (buffer underrun), current `writeBuffer` will be\n     * fulfilled with the last received sample (which will result in silence) and then\n     * rotated.\n     * \n     * @returns {AudioBuffer} The first *Ready* buffer\n     */\n    shift() {\n        if (!this.ready) {\n            const index = this.index;\n            const lastSample = index && this.data[index-1];\n            this.data.fill(lastSample, index);\n            this.rotateWriteBuffer();\n            this.data = this.writeBuffer.getChannelData(0);\n            this.data.fill(lastSample, 0, index);\n\n            if (typeof this.onbufferunderrun === 'function')\n                this.onbufferunderrun(((index / bufferLength) - 1) * this.duration);\n        }\n        const currentBuffer = this.readyBuffer;\n\n        this.rotateReadyBuffer();\n\n        return currentBuffer;\n    }\n\n    /**\n     * Appends a sample to the current `writeBuffer`, automatically rotating it when full.\n     * \n     * If the queue becomes full (buffer overrun), `onbufferoverrun` will be called first\n     * (if set), which gives the opportunity to free some space by shifting one or more\n     * *Ready* buffers. Otherwise the whole ring buffer will be cleared except for the\n     * first *Ready* buffer, which will keep its *Ready* state, and writing will continue\n     * on the next one (audio click will occur).\n     * \n     * @param {number} value IEEE754 32-bit linear PCM between -1 and +1\n     */\n    writeSample(value) {\n        this.data[this.index++] = value;\n        if (this.index === bufferLength) {\n            if (this.usage === 1.0) {\n                if (typeof this.onbufferoverrun === 'function')\n                    this.onbufferoverrun(this);\n            }\n            this.rotateWriteBuffer();\n\n            if (this.ready) {\n                this.initChannelData();\n                if (typeof this.onnewbufferready === 'function')\n                    this.onnewbufferready(this);\n            } else {\n                this.rotateWriteBuffer();\n                this.initChannelData();\n            }\n        }\n    }\n\n    //===================================================================================//\n\n    /** @private */\n    rotateWriteBuffer() {\n        let nextWriteIndex = this.nextWriteIndex;\n        this.writeBuffer = this.buffers[nextWriteIndex++];\n        this.nextWriteIndex = (nextWriteIndex < buffersCount) ? nextWriteIndex : 0;\n    }\n    /** @private */\n    rotateReadyBuffer() {\n        let nextReadyIndex = this.nextReadyIndex;\n        this.readyBuffer = this.buffers[nextReadyIndex++];\n        this.nextReadyIndex = (nextReadyIndex < buffersCount) ? nextReadyIndex : 0;\n    }\n}\n\nexport default AudioRingBuffer;\n","import AudioRingBuffer from \"./Audio/AudioRingBuffer.js\";\n\nconst sampleRate = 44100;\nconst threshold = 1/12;\n\n/** @type {AudioContext} */\nlet context;\n\nexport class AudioOutput {\n    constructor() {\n        /** @private */\n        this.buffer = new AudioRingBuffer(sampleRate);\n        \n        this.buffer.onbufferunderrun = (lag) => this.decreaseSpeed(lag);\n        this.buffer.onbufferoverrun = (buffer) => {\n            do this.schedule(context, buffer);\n            while (!this.healthy);\n        };\n        \n        /** @private */\n        this.gainNode = null;\n        /** @private */\n        this.volumeValue = 1.0;\n        \n        /** @private */\n        this.next = 0.0;\n        /** @private */\n        this.lockedUntil = Infinity;\n        \n        this.speedAdjustment = 1.0;\n    }\n    \n    //===================================================================================//\n    \n    /**\n     * @readonly\n     * @returns {AudioContext} AudioContext\n     */\n    get context() {\n        if (!context) {\n            context = new AudioContext({ sampleRate });\n            context.suspend();\n        }\n        return context;\n    }\n    \n    /**\n     * @readonly\n     * @returns {AudioNode} AudioNode\n     */\n    get destination() {\n        if (!this.gainNode) {\n            this.gainNode = this.context.createGain();\n            this.gainNode.gain.value = this.volumeValue;\n            this.gainNode.connect(this.context.destination);\n        }\n        return this.gainNode;\n    }\n    \n    //===================================================================================//\n    \n    /**\n     * Output volume between 0.0 and 1.0\n     */\n    get volume() {\n        return this.volumeValue;\n    }\n    set volume(value) {\n        this.volumeValue = Math.min(1, Math.abs(value));\n        if (this.gainNode)\n            this.gainNode.gain.value = this.volumeValue;\n    }\n    \n    /**\n     * The amount of audio currently in the output buffer (in second).\n     * @readonly\n     */\n    get buffered() {\n        return this.next - this.context.currentTime;\n    }\n    /**\n     * *True* if the output buffer contains enough audio to be considered safe to be\n     * played.\n     * @readonly\n     */\n    get healthy() {\n        return this.buffered >= threshold;\n    }\n    \n    /**\n     * Sample rate (in hertz).\n     * @readonly\n     */\n    get sampleRate() {\n        return sampleRate;\n    }\n    \n    //===================================================================================//\n    \n    start() {\n        const context = this.context;\n        \n        this.lockedUntil = Infinity;\n        \n        this.buffer.reset();\n        this.buffer.onnewbufferready = (buffer) => {\n            if (buffer.halfFull) {\n                buffer.onnewbufferready = (buffer) => {\n                    if (!this.healthy || buffer.halfFull)\n                        this.schedule(context, buffer);\n                };\n                \n                context.resume();\n                \n                this.next = context.currentTime;\n                while (!this.healthy)\n                    this.schedule(context, buffer);\n                this.lockedUntil = this.next;\n            }\n        };\n    }\n    stop() {\n        setTimeout(() => this.context.suspend(), this.buffered * 1000);\n    }\n    \n    /** @param {number} value */\n    writeSample(value) {\n        this.buffer.writeSample(value);\n    }\n    \n    //===================================================================================//\n    \n    /**\n     * @private\n     * @param {AudioContext} context\n     * @param {AudioRingBuffer} buffer\n     */\n    schedule(context, buffer) {\n        const source = context.createBufferSource();\n        const audioBuffer = buffer.shift();\n        source.buffer = audioBuffer;\n        \n        let next = this.next;\n        let buffered = next - context.currentTime;\n        if (buffered < threshold) {\n            source.onended = () => {\n                if (!this.healthy || buffer.halfFull)\n                    this.schedule(context, buffer);\n            };\n            if (buffered < 0)\n                next = context.currentTime;\n        } else if (buffered > threshold*3) {\n            return;\n        }\n        source.connect(this.destination);\n        source.start(next);\n        this.next = next + audioBuffer.duration;\n        \n        if (buffered > threshold*2)\n            this.increaseSpeed((1 - (threshold*2 / buffered)) / 10);\n    }\n    \n    /**\n     * @private\n     * @param {number} amount A positive number representing the percentage amount by\n     * which the speed will be increased.\n     */\n    increaseSpeed(amount) {\n        if (context.currentTime >= this.lockedUntil) {\n            if (this.speedAdjustment < 1)\n                this.speedAdjustment = Math.min(this.speedAdjustment * (1 + amount), 1);\n            \n            this.lockedUntil = this.next;\n        }\n    }\n    /**\n     * @private\n     * @param {number} amount A negative number representing the percentage amount by\n     * which the speed will be decreased.\n     */\n    decreaseSpeed(amount) {\n        if (context.currentTime >= this.lockedUntil) {\n            this.speedAdjustment *= (1 + amount);\n            \n            this.lockedUntil = this.next;\n        }\n    }\n}\n\nexport default AudioOutput;\n","import CPU from './CPU.js';\nimport PPU from './PPU.js';\nimport Engine from './Engine.js';\nimport CartConnector from './CartConnector.js';\nimport CtrlConnector from './CtrlConnector.js';\nimport VideoOutput from './VideoOutput.js';\nimport AudioOutput from './AudioOutput.js';\n\nexport class NES {\n    constructor() {\n        this.cpu = new CPU(this);\n        this.apu = this.cpu.apu;\n        this.ppu = new PPU(this);\n        this.engine = new Engine(this);\n        \n        this.cartConnector = new CartConnector;\n        this.ctrlConnector = new CtrlConnector;\n        this.videoOutput = new VideoOutput;\n        this.audioOutput = new AudioOutput;\n        \n        this.isPowered = false;\n    }\n    \n    //== Buttons ============================================================================//\n    pressPower() {\n        if (!this.isPowered) {\n            this.cpu.powerOn();\n            this.ppu.powerOn();\n            \n            this.engine.powerOn();\n            \n            this.isPowered = true;\n        } else {\n            this.cpu.powerOff();\n            this.ppu.powerOff();\n            \n            this.engine.powerOff();\n            \n            this.isPowered = false;\n        }\n        return this.isPowered;\n    }\n    pressReset() {\n        this.cpu.reset();\n        this.ppu.reset();\n    }\n    \n    //== Engine =============================================================================//\n    pause() {\n        return this.engine.pause();\n    }\n    \n    //== Front red LED ======================================================================//\n    // (Yes, it is a fully-fledged part of the NES !)\n    get frontLEDState() { return this.isPowered ? this.engine.isPaused ? \"paused\" : \"on\" : \"off\"; }\n    \n    //== Cartridge ==========================================================================//\n    insertCartridge(file) {\n        return this.cartConnector.load(file);\n    }\n    removeCartridge() {\n        return this.cartConnector.unload();\n    }\n    \n    //== Controllers ========================================================================//\n    insertController(controller) {\n        return this.ctrlConnector.insert(controller);\n    }\n    removeController(controller) {\n        return this.ctrlConnector.remove(controller);\n    }\n    \n    //== Video ==============================================================================//\n    connectVideo(output) {\n        return this.videoOutput.connect(output);\n    }\n    disconnectVideo() {\n        return this.videoOutput.disconnect();\n    }\n    \n    //== Audio ==============================================================================//\n    \n    /** @readonly */\n    get audio() { return this.audioOutput; }\n}\nexport default NES;\n"],"names":["lengths","Channel","constructor","this","enabled","lengthCounter","lengthCounterHalt","reset","length","_enabled","value","updateLength","duties","PulseChannel","id","super","constantVolume","envelopeEnabled","envelopeReset","envelopeCycle","envelopePeriod","envelopeVolume","envelopeLoop","dutyCycle","duty","sweepEnabled","sweepReset","sweepCycle","sweepPeriod","sweepNegate","sweepShift","timerCycle","timerPeriod","volume","sweep","timer","writeRegister","address","data","doCycle","doQuarter","doHalf","output","TriangleChannel","linearCounter","linearCounterMax","linearCounterReset","dutyPosition","counter","linearCounterControl","timerPeriods","NoiseChannel","timerMode","shiftRegister","feedback","DMC","cpu","cycle","sampleAddress","sampleLength","sampleIndex","sampleLeft","sampleLoop","sampleBuffer","shiftRegisterBits","irqEnabled","irq","rate","load","doIRQ","updateSampleBuffer","updateShiftRegister","updateOutput","read","APU","bus","pulse1","pulse2","triangle","noise","dmc","cyclesPerSample","cyclesUntilSample","Infinity","irqDisabled","status","toggle","powerOn","audioOutput","start","sampleRate","speedAdjustment","powerOff","stop","counterMode","resetDelay","readRegister","doCycles","count","doSample","pulses","others","writeSample","pulsesSamples","othersSamples","Float32Array","i","cyclesLookup","wrapByte","CPU","nes","cycleOffset","apu","ram","Uint8Array","stack","subarray","nmiVector","resetVector","irqVector","A","X","Y","P","SP","PC","addressLookup","imp","indX","zero","imm","abs","rel","indY","zeroX","absY","absX","ind","zeroY","map","fn","bind","instructionLookup","BRK","ORA","KIL","NOP","ASL","PHP","BPL","CLC","JSR","AND","BIT","ROL","PLP","BMI","SEC","RTI","EOR","LSR","PHA","JMP","BVC","CLI","RTS","ADC","ROR","PLA","BVS","SEI","STA","STY","STX","DEY","TXA","BCC","TYA","TXS","LDY","LDA","LDX","TAY","TAX","BCS","CLV","TSX","CPY","CMP","DEC","INY","DEX","BNE","CLD","CPX","SBC","INC","INX","BEQ","SED","isPowered","ppu","ctrl1","ctrlConnector","controllers","ctrl2","cart","cartConnector","cartridge","cpuRead","doReset","doInstructions","limit","cycles","doInstruction","opcode","operand","implied","doNMI","pushWord","pushByte","Interrupt","write","dmaAddress","OAMData","cpuWrite","_SP","pullByte","pullWord","Carry","Zero","Decimal","Overflow","Negative","_A","_X","_Y","ALU","readWord","indirect","fnFetchOperand","add","reg","alu","compare","pxlColors","Uint32Array","VideoBuffer","width","height","createNewBuffer","ImageData","image","buffer","writePixels","x","y","values","set","getFrame","frame","cssColors","Colors","bitplaneLookup","PPU","vblank","vram","vramBank","oamPrimary","oamSecondary","oamAddress","oamIndex","palette","bkgPixelsBuffer","sprPixelsBuffer","bkgLayer","sprBehindLayer","sprInFrontLayer","sprLayer","sprite0Layer","control","mask","OAMAddress","fill","scroll","ntsc","metadata","tvSystem","videoOutput","addLayer","doVBlank","nmiEnabled","endVBlank","addressBuffer","addressIncrement","sprPatternTable","bkgPatternTable","sprite8x16","spriteHeight","grayscale","showLeftMostBkg","showLeftMostSpr","showBackground","showSprites","emphasizeRed","emphasizeGreen","emphasizeBlue","renderingEnabled","spriteOverflow","sprite0Hit","writeToggle","sprite0","fineScrollY","fineScrollX","addressBus","readPalette","readBuffer","writePalette","ciramEnabled","ciramA10","ppuRead","ppuWrite","backdrop","bkgPalette","sprPalette","incrementX","incrementY","coarseY","resetX","resetY","fetchNameTable","fetchAttributeTable","offset","fetchBkgPatternTable","patternIndex","row","fetchTile","paletteIndex","pattern","copyWithin","setPatternPixels","fetchNullTile","fetchNullNTs","renderTile","dot","scanline","pixels","some","e","clearSecondaryOAM","evaluateSprites","spritesList","sprites","top","bottom","fetchSprPatternTable","fetchSprite","flip","attributes","fetchNullSprite","renderSprite","target","paletteOffset","colorIndex","printFrame","schedule","frameTime","cyclesPerScanline","cyclesPerFrame","cyclesBeforeVBlankStart","vblankStart","cyclesBeforeVBlankEnd","vblankEnd","Engine","firstLoop","mainLoop","runningLoop","init","isPaused","dropped","fps","performance","_delta","_lastTimestamp","_frameTimeThisSecond","_framesThisSecond","_fps","coldBoot","clearTimeout","pause","setTimeout","doPreFetch","window","timestamp","now","doFrame","updateStats","skipFrame","doScanline","doPreRenderLine","cyclesBeforeScanline","Header","loaded","format","valid","mapperNumber","mapperName","supported","PRGROMByteLength","CHRROMByteLength","horiMirroring","vertMirroring","battery","trainer","consoleType","PRGRAMByteLength","CHRRAMByteLength","PRGNVRAMByteLength","CHRNVRAMByteLength","parse","byteLength","PRGROMBANKSIZE","CHRROMBANKSIZE","Cartridge","PRGRAM","CHRRAM","PRGROM","firstPRGBank","lastPRGBank","PRGBank","CHRROM","firstCHRBank","secondCHRBank","CHRBank","header","numPRGBank","bank","push","numCHRBank","NROM","mapperNames","Object","freeze","constructors","mirroring","PRGBankMode","CHRBankMode","index","CHR0","CHR1","PRG","Mapper","number","static","INESHeader","DataView","getUint32","byte4","getUint8","byte5","getROMByteLength","byte6","byte7","byte9","parseV2","parseV1","name","byte10","getRAMByteLength","byte11","bankSize","lsb","msb","shiftCount","UNIFHeader","CONSOLE_TYPE","TV_SYSTEM","Metadata","mapper","scrolling","SRAM","misc","warnings","errors","warn","message","error","parseFilename","filename","countryCodes","exec","search","replace","trim","toUpperCase","slice","serialize","CartConnector","file","Promise","resolve","reject","size","reader","FileReader","onabort","DOMException","onerror","onload","result","readAsArrayBuffer","Error","then","signature","catch","unload","Controller","type","strobing","states","Array","strobe","empty","present","shift","undefined","BUTTONS","a","b","select","up","down","left","right","Joypad","buttonHandlers","v","pressed","getButtonHandler","toLowerCase","KEYS","opts","keyMap","assignKeys","addEventListener","pressKey","assignKey","buttonName","keyCode","handler","entries","forEach","key","event","keyDown","which","button","preventDefault","CtrlConnector","insert","controller","indexOf","remove","VideoOutput","canvas","context","layers","connected","disconnected","connect","nodeName","disconnect","videoBuffer","getContext","alpha","imageSmoothingEnabled","offCanvas","document","createElement","offContext","cancelAnimationFrame","scheduled","cssBackdrop","layer","requestAnimationFrame","fillStyle","fillRect","putImageData","drawImage","bufferLength","buffersCount","AudioRingBuffer","buffers","AudioBuffer","duration","onnewbufferready","onbufferunderrun","onbufferoverrun","readyBuffer","writeBuffer","nextReadyIndex","nextWriteIndex","initChannelData","getChannelData","readyBuffersCount","readyCount","usage","ready","halfFull","lastSample","rotateWriteBuffer","currentBuffer","rotateReadyBuffer","threshold","AudioOutput","lag","decreaseSpeed","healthy","gainNode","volumeValue","next","lockedUntil","AudioContext","suspend","destination","createGain","gain","Math","min","buffered","currentTime","resume","source","createBufferSource","audioBuffer","onended","increaseSpeed","amount","NES","engine","pressPower","pressReset","frontLEDState","insertCartridge","removeCartridge","insertController","removeController","connectVideo","disconnectVideo","audio"],"mappings":"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"}