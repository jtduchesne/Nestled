export class PPU {
    constructor(nes: any);
    bus: any;
    vblank: boolean;
    vram: Uint8Array;
    vramBank: Uint8Array[];
    oamPrimary: Uint8Array;
    oamSecondary: Uint8Array;
    oamAddress: number;
    oamIndex: number;
    palette: Uint8Array[];
    bkgPixelsBuffer: Uint32Array;
    sprPixelsBuffer: Uint32Array;
    bkgLayer: VideoBuffer;
    sprBehindLayer: VideoBuffer;
    sprInFrontLayer: VideoBuffer;
    sprLayer: VideoBuffer;
    sprite0Layer: Uint32Array;
    isPowered: boolean;
    powerOn(): void;
    set control(arg: any);
    set mask(arg: any);
    set status(arg: number);
    get status(): number;
    set OAMAddress(arg: any);
    set scroll(arg: any);
    set address(arg: any);
    set data(arg: any);
    get data(): any;
    ntsc: boolean;
    cpu: any;
    cart: any;
    output: any;
    powerOff(): void;
    reset(): void;
    doVBlank(): void;
    endVBlank(): void;
    addressIncrement: number;
    sprPatternTable: number;
    bkgPatternTable: number;
    sprite8x16: boolean;
    nmiEnabled: boolean;
    spriteHeight: number;
    grayscale: boolean;
    showLeftMostBkg: boolean;
    showLeftMostSpr: boolean;
    showBackground: boolean;
    showSprites: boolean;
    emphasizeRed: boolean;
    emphasizeGreen: boolean;
    emphasizeBlue: boolean;
    renderingEnabled: boolean;
    writeToggle: any;
    spriteOverflow: boolean;
    sprite0Hit: boolean;
    sprite0: boolean;
    set OAMData(arg: number);
    get OAMData(): number;
    fineScrollY: number;
    fineScrollX: number;
    addressBuffer: any;
    addressBus: any;
    readBuffer: any;
    readRegister(address: any): any;
    writeRegister(address: any, data: any): void;
    read(address: any): any;
    write(address: any, data: any): void;
    get backdrop(): number;
    get bkgPalette(): Uint8Array;
    get sprPalette(): Uint8Array;
    readPalette(address: any): number;
    writePalette(address: any, data: any): void;
    incrementX(): void;
    incrementY(): void;
    resetX(): void;
    resetY(): void;
    fetchNameTable(bus: any): any;
    fetchAttributeTable(bus: any): number;
    fetchBkgPatternTable(patternIndex: any, row: any): any;
    fetchTile(): void;
    fetchNullTile(): void;
    fetchNullNTs(): void;
    renderTile(dot: any, scanline: any): void;
    clearSecondaryOAM(): void;
    evaluateSprites(scanline: any): void;
    fetchSprPatternTable(patternIndex: any, row: any): any;
    fetchSprite(scanline: any): void;
    fetchNullSprite(): void;
    renderSprite(scanline: any): void;
    setPatternPixels(target: any, pattern: any, palette: any, paletteIndex: any, flip: any): void;
    printFrame(): void;
}
export default PPU;
import { VideoBuffer } from "./Video.js";
//# sourceMappingURL=PPU.d.ts.map