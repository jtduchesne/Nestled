export class CPU {
    constructor(nes: any);
    bus: any;
    cycle: number;
    cycleOffset: number;
    apu: APU;
    ram: Uint8Array;
    stack: Uint8Array;
    nmiVector: () => number;
    resetVector: () => number;
    irqVector: () => number;
    set A(arg: any);
    get A(): any;
    set X(arg: any);
    get X(): any;
    set Y(arg: any);
    get Y(): any;
    P: number;
    set SP(arg: any);
    get SP(): any;
    PC: number;
    addressLookup: any[];
    instructionLookup: any[];
    isPowered: boolean;
    powerOn(): void;
    ppu: any;
    ctrl1: any;
    ctrl2: any;
    cart: any;
    powerOff(): void;
    reset(): void;
    doInstructions(limit?: number): void;
    doInstruction(): number;
    opcode: any;
    operand: any;
    doNMI(): void;
    doReset(): void;
    set Interrupt(arg: number);
    get Interrupt(): number;
    doIRQ(): void;
    read(address: any): any;
    write(address: any, data: any): any;
    _SP: any;
    pushByte(value: any): void;
    pushWord(value: any): void;
    pullByte(): number;
    pullWord(): number;
    set Carry(arg: number);
    get Carry(): number;
    set Zero(arg: number);
    get Zero(): number;
    set Decimal(arg: number);
    get Decimal(): number;
    set Overflow(arg: number);
    get Overflow(): number;
    set Negative(arg: number);
    get Negative(): number;
    _A: any;
    _X: any;
    _Y: any;
    ALU(value: any): any;
    imp(implied: any): any;
    imm(): number;
    rel(): any;
    zero(): any;
    zeroX(): any;
    zeroY(): any;
    readWord(): any;
    abs(): any;
    absX(): any;
    absY(): any;
    ind(): any;
    indX(): any;
    indY(): any;
    BRK(fnFetchOperand: any): void;
    RTI(fnFetchOperand: any): void;
    JSR(fnFetchOperand: any): void;
    RTS(fnFetchOperand: any): void;
    JMP(fnFetchOperand: any): void;
    BPL(fnFetchOperand: any): void;
    BMI(fnFetchOperand: any): void;
    BVC(fnFetchOperand: any): void;
    BVS(fnFetchOperand: any): void;
    BCC(fnFetchOperand: any): void;
    BCS(fnFetchOperand: any): void;
    BNE(fnFetchOperand: any): void;
    BEQ(fnFetchOperand: any): void;
    PHA(fnFetchOperand: any): void;
    PHP(fnFetchOperand: any): void;
    PLA(fnFetchOperand: any): void;
    PLP(fnFetchOperand: any): void;
    CLC(fnFetchOperand: any): void;
    CLD(fnFetchOperand: any): void;
    CLI(fnFetchOperand: any): void;
    CLV(fnFetchOperand: any): void;
    SEC(fnFetchOperand: any): void;
    SED(fnFetchOperand: any): void;
    SEI(fnFetchOperand: any): void;
    TAX(fnFetchOperand: any): void;
    TXA(fnFetchOperand: any): void;
    TAY(fnFetchOperand: any): void;
    TYA(fnFetchOperand: any): void;
    TSX(fnFetchOperand: any): void;
    TXS(fnFetchOperand: any): void;
    LDA(fnFetchOperand: any): void;
    LDX(fnFetchOperand: any): void;
    LDY(fnFetchOperand: any): void;
    STA(fnFetchOperand: any): void;
    STX(fnFetchOperand: any): void;
    STY(fnFetchOperand: any): void;
    ADC(fnFetchOperand: any): void;
    SBC(fnFetchOperand: any): void;
    add(reg: any, operand: any): void;
    ASL(fnFetchOperand: any): void;
    LSR(fnFetchOperand: any): void;
    ROL(fnFetchOperand: any): void;
    ROR(fnFetchOperand: any): void;
    INC(fnFetchOperand: any): void;
    DEC(fnFetchOperand: any): void;
    INX(fnFetchOperand: any): void;
    DEX(fnFetchOperand: any): void;
    INY(fnFetchOperand: any): void;
    DEY(fnFetchOperand: any): void;
    BIT(fnFetchOperand: any): void;
    CMP(fnFetchOperand: any): void;
    CPX(fnFetchOperand: any): void;
    CPY(fnFetchOperand: any): void;
    compare(reg: any, operand: any): void;
    ORA(fnFetchOperand: any): void;
    AND(fnFetchOperand: any): void;
    EOR(fnFetchOperand: any): void;
    NOP(fnFetchOperand: any): void;
    KIL(fnFetchOperand: any): void;
}
export default CPU;
import APU from "./APU.js";
//# sourceMappingURL=CPU.d.ts.map